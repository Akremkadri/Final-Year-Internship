/**
 *
 *  Kunde.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Kunde.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::cim_web;

const std::string Kunde::Cols::_KUNDENID = "KUNDENID";
const std::string Kunde::Cols::_BEZEICHNUNG = "BEZEICHNUNG";
const std::string Kunde::Cols::_KUNDESEIT = "KUNDESEIT";
const std::string Kunde::Cols::_VERTRAGSPARTEI_CD = "VERTRAGSPARTEI_CD";
const std::string Kunde::Cols::_LOESCH_CD = "LOESCH_CD";
const std::string Kunde::Cols::_LOESCHDATUM = "LOESCHDATUM";
const std::string Kunde::Cols::_CRTDATUM = "CRTDATUM";
const std::string Kunde::Cols::_CRTUSER = "CRTUSER";
const std::string Kunde::Cols::_MUTDATUM = "MUTDATUM";
const std::string Kunde::Cols::_MUTUSER = "MUTUSER";
const std::string Kunde::Cols::_PSEUDOACCOUNT_CD = "PSEUDOACCOUNT_CD";
const std::string Kunde::Cols::_KUNDEBESUCH = "KUNDEBESUCH";
const std::string Kunde::Cols::_BEZEICHNUNGVERTRAG = "BEZEICHNUNGVERTRAG";
const std::string Kunde::Cols::_PSEUDONYM = "PSEUDONYM";
const std::string Kunde::Cols::_RECHTSDOMIZIL_CD = "RECHTSDOMIZIL_CD";
const std::string Kunde::Cols::_KORRESPONDENZSPRACH_CD = "KORRESPONDENZSPRACH_CD";
const std::string Kunde::Cols::_MIT_PROFIL_CD = "MIT_PROFIL_CD";
const std::string Kunde::Cols::_GEMEINSCHAFTSKONTO_CD = "GEMEINSCHAFTSKONTO_CD";
const std::string Kunde::Cols::_PIN = "PIN";
const std::string Kunde::Cols::_VERWENDUNGSZWECK = "VERWENDUNGSZWECK";
const std::string Kunde::Cols::_IDENTIFIKATIONSART_CD = "IDENTIFIKATIONSART_CD";
const std::string Kunde::Cols::_VERMOEGENSURSPRUNG_CD = "VERMOEGENSURSPRUNG_CD";
const std::string Kunde::Cols::_VERMOEGENSURSPRUNG = "VERMOEGENSURSPRUNG";
const std::string Kunde::Cols::_GELDVONKONTO = "GELDVONKONTO";
const std::string Kunde::Cols::_BISHERIGEBETREUUNG = "BISHERIGEBETREUUNG";
const std::string Kunde::Cols::_BISHERIGEBETREUUNGSEIT = "BISHERIGEBETREUUNGSEIT";
const std::string Kunde::Cols::_MANUALOPEN_CD = "MANUALOPEN_CD";
const std::string Kunde::Cols::_EIN_VERMOEGEN_CD = "EIN_VERMOEGEN_CD";
const std::string Kunde::Cols::_REGIONZAHLUNG_CD = "REGIONZAHLUNG_CD";
const std::string Kunde::Cols::_EIN_VERMOEGENART_CD = "EIN_VERMOEGENART_CD";
const std::string Kunde::Cols::_SPEZ_WUENSCHE_CD = "SPEZ_WUENSCHE_CD";
const std::string Kunde::Cols::_MANAGER_CD = "MANAGER_CD";
const std::string Kunde::Cols::_RISKINDEX = "RISKINDEX";
const std::string Kunde::Cols::_RISKINDEX_GUELTISEIT = "RISKINDEX_GUELTISEIT";
const std::string Kunde::Cols::_RISKINDEX_LETZTEBERECHNUNG = "RISKINDEX_LETZTEBERECHNUNG";
const std::string Kunde::Cols::_KONTOEROEFFNUNGSART_CD = "KONTOEROEFFNUNGSART_CD";
const std::string Kunde::Cols::_RISKINDEXBERECHNEN_CD = "RISKINDEXBERECHNEN_CD";
const std::string Kunde::Cols::_KUNDENNATUR_CD = "KUNDENNATUR_CD";
const std::string Kunde::Cols::_RISIKOKATEGORIE_CD = "RISIKOKATEGORIE_CD";
const std::string Kunde::Cols::_PEP_CD = "PEP_CD";
const std::string Kunde::Cols::_SPEZIALKATEGORIE_CD = "SPEZIALKATEGORIE_CD";
const std::string Kunde::Cols::_NATURE_CD = "NATURE_CD";
const std::string Kunde::Cols::_NAME = "NAME";
const std::string Kunde::Cols::_LEDIGERNAME = "LEDIGERNAME";
const std::string Kunde::Cols::_VORNAME = "VORNAME";
const std::string Kunde::Cols::_CDPARTC = "CDPARTC";
const std::string Kunde::Cols::_NATIONALITAET_CD = "NATIONALITAET_CD";
const std::string Kunde::Cols::_RISIKOLAND_CD = "RISIKOLAND_CD";
const std::string Kunde::Cols::_PERSOENLICHBEKANNT_CD = "PERSOENLICHBEKANNT_CD";
const std::string Kunde::Cols::_RISIKOTAETIGKEIT_CD = "RISIKOTAETIGKEIT_CD";
const std::string Kunde::Cols::_STEUERDOMIZIL_CD = "STEUERDOMIZIL_CD";
const std::string Kunde::Cols::_EU_TAXSTATUS_CD = "EU_TAXSTATUS_CD";
const std::string Kunde::Cols::_TIN = "TIN";
const std::string Kunde::Cols::_APSYS_CDROLPERSI = "APSYS_CDROLPERSI";
const std::string Kunde::Cols::_VERTRAGSPRACH_CD = "VERTRAGSPRACH_CD";
const std::string Kunde::Cols::_VERMOEGENSKATEGORIE_IHAG_CD = "VERMOEGENSKATEGORIE_IHAG_CD";
const std::string Kunde::Cols::_APSYS_INTISHS = "APSYS_INTISHS";
const std::string Kunde::Cols::_APSYS_INTILGS = "APSYS_INTILGS";
const std::string Kunde::Cols::_GESAMTVERMOEGEN_CD = "GESAMTVERMOEGEN_CD";
const std::string Kunde::Cols::_COMPLIANCE_OK_CD = "COMPLIANCE_OK_CD";
const std::string Kunde::Cols::_COMPLIANCE_OK_BEMERKUNG = "COMPLIANCE_OK_BEMERKUNG";
const std::string Kunde::Cols::_COMPLIANCE_OK_DATUM = "COMPLIANCE_OK_DATUM";
const std::string Kunde::Cols::_COMPLIANCE_OK_USERID = "COMPLIANCE_OK_USERID";
const std::string Kunde::Cols::_EIN_VERMOEGEN = "EIN_VERMOEGEN";
const std::string Kunde::Cols::_SEGMENTIERUNG_CD = "SEGMENTIERUNG_CD";
const std::string Kunde::Cols::_AKTID = "AKTID";
const std::string Kunde::Cols::_VALIDID = "VALIDID";
const std::string Kunde::Cols::_VALID_CD = "VALID_CD";
const std::string Kunde::Cols::_VALIDUSER = "VALIDUSER";
const std::string Kunde::Cols::_ENC_SALT = "ENC_SALT";
const std::string Kunde::Cols::_BEZEICHNUNG_ENC = "BEZEICHNUNG_ENC";
const std::string Kunde::Cols::_APSYS_CDMOTIFPARTS = "APSYS_CDMOTIFPARTS";
const std::string Kunde::Cols::_APSYS_CDINDUS0S = "APSYS_CDINDUS0S";
const std::string Kunde::Cols::_APSYS_FLAGPREAVISEXEC = "APSYS_FLAGPREAVISEXEC";
const std::string Kunde::Cols::_APSYS_CDAVIOBISPECC = "APSYS_CDAVIOBISPECC";
const std::string Kunde::Cols::_APSYS_FLAGHISPERC = "APSYS_FLAGHISPERC";
const std::string Kunde::Cols::_APSYS_REPAMANUC = "APSYS_REPAMANUC";
const std::string Kunde::Cols::_APSYS_PERDEVCALC = "APSYS_PERDEVCALC";
const std::string Kunde::Cols::_APSYS_FLAGUKTAXC = "APSYS_FLAGUKTAXC";
const std::string Kunde::Cols::_APSYS_CDNOGAS = "APSYS_CDNOGAS";
const std::string Kunde::Cols::_APSYS_STATFISCC = "APSYS_STATFISCC";
const std::string Kunde::Cols::_APSYS_FLAGFWTI = "APSYS_FLAGFWTI";
const std::string Kunde::Cols::_APSYS_FLAGFWTUKNRSDI = "APSYS_FLAGFWTUKNRSDI";
const std::string Kunde::Cols::_APSYS_FLAGFWTTAXSPEGEI = "APSYS_FLAGFWTTAXSPEGEI";
const std::string Kunde::Cols::_APSYS_CDFWTOPTREGULFISCANCC = "APSYS_CDFWTOPTREGULFISCANCC";
const std::string Kunde::Cols::_APSYS_CDFWTSTATREGULFISCANCC = "APSYS_CDFWTSTATREGULFISCANCC";
const std::string Kunde::Cols::_APSYS_CDFWTOPTREGULFISCFUTC = "APSYS_CDFWTOPTREGULFISCFUTC";
const std::string Kunde::Cols::_STEUERLAND_ABGST_CD = "STEUERLAND_ABGST_CD";
const std::string Kunde::Cols::_APSYS_CDNATURES = "APSYS_CDNATURES";
const std::string Kunde::Cols::_APSYS_SHNAS = "APSYS_SHNAS";
const std::string Kunde::Cols::_APSYS_CDPYHQDOMIS = "APSYS_CDPYHQDOMIS";
const std::string Kunde::Cols::_APSYS_CDPERMI = "APSYS_CDPERMI";
const std::string Kunde::Cols::_APSYS_IDRCIS = "APSYS_IDRCIS";
const std::string Kunde::Cols::_APSYS_FLAGISTTC = "APSYS_FLAGISTTC";
const std::string Kunde::Cols::_APSYS_DEVEVALS = "APSYS_DEVEVALS";
const std::string Kunde::Cols::_APSYS_IDSTRUCS = "APSYS_IDSTRUCS";
const std::string Kunde::Cols::_APSYS_SUIVIAGTS = "APSYS_SUIVIAGTS";
const std::string Kunde::Cols::_APSYS_CDINDUSCSSFS = "APSYS_CDINDUSCSSFS";
const std::string Kunde::Cols::_APSYS_CDINDUSBLUXS = "APSYS_CDINDUSBLUXS";
const std::string Kunde::Cols::_APSYS_CDINDUSSBUBA = "APSYS_CDINDUSSBUBA";
const std::string Kunde::Cols::_APSYS_CDINDUSSBNS = "APSYS_CDINDUSSBNS";
const std::string Kunde::Cols::_APSYS_GRMTEVALS = "APSYS_GRMTEVALS";
const std::string Kunde::Cols::_APSYS_IDPOCS = "APSYS_IDPOCS";
const std::string Kunde::Cols::_APSYS_INFO = "APSYS_INFO";
const std::string Kunde::Cols::_APSYS_IDENTS = "APSYS_IDENTS";
const std::string Kunde::Cols::_APSYS_STATUS_OPEC = "APSYS_STATUS_OPEC";
const std::string Kunde::Cols::_APSYS_ERRI = "APSYS_ERRI";
const std::string Kunde::Cols::_NATIONALITAET2_CD = "NATIONALITAET2_CD";
const std::string Kunde::Cols::_NATIONALITAET3_CD = "NATIONALITAET3_CD";
const std::string Kunde::Cols::_VERMOEGENSURSPRUNG2_CD = "VERMOEGENSURSPRUNG2_CD";
const std::string Kunde::Cols::_VERMOEGENSURSPRUNG2 = "VERMOEGENSURSPRUNG2";
const std::string Kunde::Cols::_APPROVAL_STEP1_CD = "APPROVAL_STEP1_CD";
const std::string Kunde::Cols::_APPROVAL_STEP1_USER = "APPROVAL_STEP1_USER";
const std::string Kunde::Cols::_APPROVAL_STEP1_DATE = "APPROVAL_STEP1_DATE";
const std::string Kunde::Cols::_APPROVAL_STEP2_CD = "APPROVAL_STEP2_CD";
const std::string Kunde::Cols::_APPROVAL_STEP2_USER = "APPROVAL_STEP2_USER";
const std::string Kunde::Cols::_APPROVAL_STEP2_DATE = "APPROVAL_STEP2_DATE";
const std::string Kunde::Cols::_APPROVAL_STEP3_CD = "APPROVAL_STEP3_CD";
const std::string Kunde::Cols::_APPROVAL_STEP3_USER = "APPROVAL_STEP3_USER";
const std::string Kunde::Cols::_APPROVAL_STEP3_DATE = "APPROVAL_STEP3_DATE";
const std::string Kunde::Cols::_APPROVAL_STEP4_CD = "APPROVAL_STEP4_CD";
const std::string Kunde::Cols::_APPROVAL_STEP4_USER = "APPROVAL_STEP4_USER";
const std::string Kunde::Cols::_APPROVAL_STEP4_DATE = "APPROVAL_STEP4_DATE";
const std::string Kunde::Cols::_APPROVAL_STEP5_CD = "APPROVAL_STEP5_CD";
const std::string Kunde::Cols::_APPROVAL_STEP5_USER = "APPROVAL_STEP5_USER";
const std::string Kunde::Cols::_APPROVAL_STEP5_DATE = "APPROVAL_STEP5_DATE";
const std::string Kunde::Cols::_APPROVAL_STEP1_BEM = "APPROVAL_STEP1_BEM";
const std::string Kunde::Cols::_APPROVAL_STEP2_BEM = "APPROVAL_STEP2_BEM";
const std::string Kunde::Cols::_APPROVAL_STEP3_BEM = "APPROVAL_STEP3_BEM";
const std::string Kunde::Cols::_APPROVAL_STEP4_BEM = "APPROVAL_STEP4_BEM";
const std::string Kunde::Cols::_APPROVAL_STEP5_BEM = "APPROVAL_STEP5_BEM";
const std::string Kunde::Cols::_APPROVAL_STEP1_ASSES_CD = "APPROVAL_STEP1_ASSES_CD";
const std::string Kunde::Cols::_APPROVAL_STEP2_ASSES_CD = "APPROVAL_STEP2_ASSES_CD";
const std::string Kunde::Cols::_APPROVAL_STEP3_ASSES_CD = "APPROVAL_STEP3_ASSES_CD";
const std::string Kunde::Cols::_APPROVAL_STEP4_ASSES_CD = "APPROVAL_STEP4_ASSES_CD";
const std::string Kunde::Cols::_APPROVAL_STEP5_ASSES_CD = "APPROVAL_STEP5_ASSES_CD";
const std::string Kunde::Cols::_APPROVAL_STATUS_CD = "APPROVAL_STATUS_CD";
const std::string Kunde::Cols::_CLIENT_STATUS_CD = "CLIENT_STATUS_CD";
const std::string Kunde::Cols::_DISCHARGE_ORDERS_CD = "DISCHARGE_ORDERS_CD";
const std::string Kunde::Cols::_PRINT_SUMMARY_HOLDMAIL_ONLY_CD = "PRINT_SUMMARY_HOLDMAIL_ONLY_CD";
const std::string Kunde::Cols::_EBANKING_CONTRACT_CD = "EBANKING_CONTRACT_CD";
const std::string Kunde::Cols::_EBANKING_CONTRACT_LANGUAGE_CD = "EBANKING_CONTRACT_LANGUAGE_CD";
const std::string Kunde::Cols::_APSYS_DTECHDIARYL = "APSYS_DTECHDIARYL";
const std::string Kunde::Cols::_APSYS_MOTDIARYS = "APSYS_MOTDIARYS";
const std::string Kunde::Cols::_APSYS_IDTYPCLIIRSS = "APSYS_IDTYPCLIIRSS";
const std::string Kunde::Cols::_APSYS_IDRCIQIS = "APSYS_IDRCIQIS";
const std::string Kunde::Cols::_APSYS_IDRCIFATCAS = "APSYS_IDRCIFATCAS";
const std::string Kunde::Cols::_MAILING_TARIF_TYPE_CD = "MAILING_TARIF_TYPE_CD";
const std::string Kunde::Cols::_REGISTERED_CD = "REGISTERED_CD";
const std::string Kunde::Cols::_REGISTERED_MAIL_CD = "REGISTERED_MAIL_CD";
const std::string Kunde::Cols::_APSYS_NBPERSCPARTIEL = "APSYS_NBPERSCPARTIEL";
const std::string Kunde::Cols::_ASSET_VALUE_TIER_CD = "ASSET_VALUE_TIER_CD";
const std::string Kunde::Cols::_RELATIONSHIP_TYPE_AML_CD = "RELATIONSHIP_TYPE_AML_CD";
const std::string Kunde::Cols::_CB_ASSET_VALUE_TIER_CD = "CB_ASSET_VALUE_TIER_CD";
const std::string Kunde::Cols::_APPROVAL_SCORE = "APPROVAL_SCORE";
const std::string Kunde::Cols::_APPROVAL_SCORE_STEPS = "APPROVAL_SCORE_STEPS";
const std::string Kunde::Cols::_APSYS_DTDEBPARTL = "APSYS_DTDEBPARTL";
const std::string Kunde::Cols::_APSYS_DTFINPARTL = "APSYS_DTFINPARTL";
const std::string Kunde::Cols::_APSYS_CDMOTIFCLOS = "APSYS_CDMOTIFCLOS";
const std::string Kunde::Cols::_APSYS_CDNATURECPARTIEEMIRC = "APSYS_CDNATURECPARTIEEMIRC";
const std::string Kunde::Cols::_APSYS_FLAGOTHEREMIRC = "APSYS_FLAGOTHEREMIRC";
const std::string Kunde::Cols::_APSYS_CDINDUSEMIRS = "APSYS_CDINDUSEMIRS";
const std::string Kunde::Cols::_OPENED_IN_APSYS_DATE = "OPENED_IN_APSYS_DATE";
const std::string Kunde::Cols::_APSYS_CDNATURECPARTIEFMIAC = "APSYS_CDNATURECPARTIEFMIAC";
const std::string Kunde::Cols::_EBANKING_CLOSED_CD = "EBANKING_CLOSED_CD";
const std::string Kunde::Cols::_EBANKING_CLOSINGDATE = "EBANKING_CLOSINGDATE";
const std::string Kunde::Cols::_KYC_REVIEW_PROCESS_START_DATE = "KYC_REVIEW_PROCESS_START_DATE";
const std::string Kunde::Cols::_REMARKS = "REMARKS";
const std::string Kunde::Cols::_TRANSACTION_BL_COUNTRY_CD = "TRANSACTION_BL_COUNTRY_CD";
const std::string Kunde::Cols::_CLIENTGROUP_CD = "CLIENTGROUP_CD";
const std::string Kunde::Cols::_RISKINDEX_CALC = "RISKINDEX_CALC";
const std::string Kunde::Cols::_LAST_CALC_CRI_MUTDATUM = "LAST_CALC_CRI_MUTDATUM";
const std::string Kunde::Cols::_RISIKOKATEGORIE_CALC_CD = "RISIKOKATEGORIE_CALC_CD";
const std::string Kunde::Cols::_RISKINDEX_GROUP = "RISKINDEX_GROUP";
const std::string Kunde::Cols::_EST_AMOUNT_REM_WITH_MUTDATUM = "EST_AMOUNT_REM_WITH_MUTDATUM";
const std::string Kunde::Cols::_GESAMTVERMOEGEN_MUTDATUM = "GESAMTVERMOEGEN_MUTDATUM";
const std::string Kunde::Cols::_TRANSACT_BL_COUNTRY_MUTDATUM = "TRANSACT_BL_COUNTRY_MUTDATUM";
const std::string Kunde::Cols::_ACCOUNTPURPOSE_MUTDATUM = "ACCOUNTPURPOSE_MUTDATUM";
const std::string Kunde::Cols::_APSYS_FLAGDELDATAPERSI = "APSYS_FLAGDELDATAPERSI";
const std::string Kunde::Cols::_APSYS_DTWAITDELDATAPERSL = "APSYS_DTWAITDELDATAPERSL";
const std::string Kunde::Cols::_NAME_ENC = "NAME_ENC";
const std::string Kunde::Cols::_IN_APSYS_TEMP_ENTSPERREN_CD = "IN_APSYS_TEMP_ENTSPERREN_CD";
const std::string Kunde::Cols::_IN_APSYS_TEMP_ENTSP_USERID = "IN_APSYS_TEMP_ENTSP_USERID";
const std::string Kunde::Cols::_IN_APSYS_TEMP_ENTSP_DATUM = "IN_APSYS_TEMP_ENTSP_DATUM";
const std::string Kunde::Cols::_APSYS_CDREGS = "APSYS_CDREGS";
const std::string Kunde::Cols::_RETENTION_ON_HOLD = "RETENTION_ON_HOLD";
const std::string Kunde::Cols::_RETENTION_ON_HOLD_DATE = "RETENTION_ON_HOLD_DATE";
const std::string Kunde::Cols::_RETENTION_ON_HOLD_REASON = "RETENTION_ON_HOLD_REASON";
const std::string Kunde::Cols::_LOGICAL_ERASURE = "LOGICAL_ERASURE";
const std::string Kunde::Cols::_LOGICAL_ERASURE_DATE = "LOGICAL_ERASURE_DATE";
const std::string Kunde::Cols::_LOGICAL_ERASURE_REASON = "LOGICAL_ERASURE_REASON";
const std::string Kunde::Cols::_COMPLIANCE_MIN_RISK_CATEGORY = "COMPLIANCE_MIN_RISK_CATEGORY";
const std::string Kunde::Cols::_COMPLIANCE_MIN_RISK_COMMENT = "COMPLIANCE_MIN_RISK_COMMENT";
const std::string Kunde::Cols::_CLIENT_STRUCTURE_CD = "CLIENT_STRUCTURE_CD";
const std::string Kunde::Cols::_CLIENT_SUBSTRUCTURE_CD = "CLIENT_SUBSTRUCTURE_CD";
const std::string Kunde::primaryKeyName = "KUNDENID";
const bool Kunde::hasPrimaryKey = true;
const std::string Kunde::tableName = "KUNDE";

const std::vector<typename Kunde::MetaData> Kunde::metaData_={
{"KUNDENID","double","double",8,0,1,1},
{"BEZEICHNUNG","std::string","varchar(30)",30,0,0,0},
{"KUNDESEIT","::trantor::Date","datetime",0,0,0,0},
{"VERTRAGSPARTEI_CD","std::string","decimal(2,0)",0,0,0,0},
{"LOESCH_CD","std::string","varchar(1)",1,0,0,0},
{"LOESCHDATUM","::trantor::Date","datetime",0,0,0,0},
{"CRTDATUM","::trantor::Date","datetime",0,0,0,0},
{"CRTUSER","std::string","varchar(30)",30,0,0,0},
{"MUTDATUM","::trantor::Date","datetime",0,0,0,0},
{"MUTUSER","std::string","varchar(30)",30,0,0,0},
{"PSEUDOACCOUNT_CD","std::string","varchar(1)",1,0,0,0},
{"KUNDEBESUCH","::trantor::Date","datetime",0,0,0,0},
{"BEZEICHNUNGVERTRAG","std::string","varchar(160)",160,0,0,0},
{"PSEUDONYM","std::string","varchar(30)",30,0,0,0},
{"RECHTSDOMIZIL_CD","std::string","varchar(3)",3,0,0,0},
{"KORRESPONDENZSPRACH_CD","std::string","decimal(2,0)",0,0,0,0},
{"MIT_PROFIL_CD","std::string","varchar(1)",1,0,0,0},
{"GEMEINSCHAFTSKONTO_CD","std::string","varchar(1)",1,0,0,0},
{"PIN","std::string","varchar(30)",30,0,0,0},
{"VERWENDUNGSZWECK","std::string","varchar(700)",700,0,0,0},
{"IDENTIFIKATIONSART_CD","std::string","varchar(3)",3,0,0,0},
{"VERMOEGENSURSPRUNG_CD","std::string","decimal(2,0)",0,0,0,0},
{"VERMOEGENSURSPRUNG","std::string","varchar(1000)",1000,0,0,0},
{"GELDVONKONTO","std::string","varchar(30)",30,0,0,0},
{"BISHERIGEBETREUUNG","std::string","varchar(30)",30,0,0,0},
{"BISHERIGEBETREUUNGSEIT","::trantor::Date","datetime",0,0,0,0},
{"MANUALOPEN_CD","std::string","varchar(1)",1,0,0,0},
{"EIN_VERMOEGEN_CD","std::string","decimal(2,0)",0,0,0,0},
{"REGIONZAHLUNG_CD","std::string","varchar(5)",5,0,0,0},
{"EIN_VERMOEGENART_CD","std::string","decimal(2,0)",0,0,0,0},
{"SPEZ_WUENSCHE_CD","std::string","decimal(2,0)",0,0,0,0},
{"MANAGER_CD","std::string","varchar(8)",8,0,0,0},
{"RISKINDEX","double","double",8,0,0,0},
{"RISKINDEX_GUELTISEIT","::trantor::Date","datetime",0,0,0,0},
{"RISKINDEX_LETZTEBERECHNUNG","::trantor::Date","datetime",0,0,0,0},
{"KONTOEROEFFNUNGSART_CD","std::string","varchar(3)",3,0,0,0},
{"RISKINDEXBERECHNEN_CD","std::string","varchar(1)",1,0,0,0},
{"KUNDENNATUR_CD","std::string","varchar(1)",1,0,0,0},
{"RISIKOKATEGORIE_CD","std::string","varchar(3)",3,0,0,0},
{"PEP_CD","std::string","varchar(1)",1,0,0,0},
{"SPEZIALKATEGORIE_CD","std::string","varchar(1)",1,0,0,0},
{"NATURE_CD","std::string","varchar(1)",1,0,0,0},
{"NAME","std::string","varchar(60)",60,0,0,0},
{"LEDIGERNAME","std::string","varchar(60)",60,0,0,0},
{"VORNAME","std::string","varchar(30)",30,0,0,0},
{"CDPARTC","std::string","varchar(1)",1,0,0,0},
{"NATIONALITAET_CD","std::string","varchar(3)",3,0,0,0},
{"RISIKOLAND_CD","std::string","varchar(3)",3,0,0,0},
{"PERSOENLICHBEKANNT_CD","std::string","varchar(1)",1,0,0,0},
{"RISIKOTAETIGKEIT_CD","std::string","varchar(1)",1,0,0,0},
{"STEUERDOMIZIL_CD","std::string","varchar(3)",3,0,0,0},
{"EU_TAXSTATUS_CD","std::string","varchar(1)",1,0,0,0},
{"TIN","std::string","varchar(30)",30,0,0,0},
{"APSYS_CDROLPERSI","std::string","varchar(1)",1,0,0,0},
{"VERTRAGSPRACH_CD","std::string","decimal(2,0)",0,0,0,0},
{"VERMOEGENSKATEGORIE_IHAG_CD","std::string","decimal(2,0)",0,0,0,0},
{"APSYS_INTISHS","std::string","varchar(30)",30,0,0,0},
{"APSYS_INTILGS","std::string","varchar(60)",60,0,0,0},
{"GESAMTVERMOEGEN_CD","double","double",8,0,0,0},
{"COMPLIANCE_OK_CD","std::string","varchar(1)",1,0,0,0},
{"COMPLIANCE_OK_BEMERKUNG","std::string","varchar(2000)",2000,0,0,0},
{"COMPLIANCE_OK_DATUM","::trantor::Date","datetime",0,0,0,0},
{"COMPLIANCE_OK_USERID","std::string","varchar(30)",30,0,0,0},
{"EIN_VERMOEGEN","double","double",8,0,0,0},
{"SEGMENTIERUNG_CD","double","double",8,0,0,0},
{"AKTID","double","double",8,0,0,0},
{"VALIDID","double","double",8,0,0,0},
{"VALID_CD","std::string","varchar(1)",1,0,0,0},
{"VALIDUSER","std::string","varchar(30)",30,0,0,0},
{"ENC_SALT","std::string","varbinary(32)",0,0,0,0},
{"BEZEICHNUNG_ENC","std::string","varbinary(32)",0,0,0,0},
{"APSYS_CDMOTIFPARTS","std::string","varchar(3)",3,0,0,0},
{"APSYS_CDINDUS0S","std::string","varchar(4)",4,0,0,0},
{"APSYS_FLAGPREAVISEXEC","std::string","varchar(1)",1,0,0,0},
{"APSYS_CDAVIOBISPECC","std::string","varchar(1)",1,0,0,0},
{"APSYS_FLAGHISPERC","std::string","varchar(1)",1,0,0,0},
{"APSYS_REPAMANUC","std::string","varchar(1)",1,0,0,0},
{"APSYS_PERDEVCALC","std::string","varchar(1)",1,0,0,0},
{"APSYS_FLAGUKTAXC","std::string","varchar(1)",1,0,0,0},
{"APSYS_CDNOGAS","std::string","varchar(6)",6,0,0,0},
{"APSYS_STATFISCC","std::string","varchar(1)",1,0,0,0},
{"APSYS_FLAGFWTI","std::string","varchar(1)",1,0,0,0},
{"APSYS_FLAGFWTUKNRSDI","std::string","varchar(1)",1,0,0,0},
{"APSYS_FLAGFWTTAXSPEGEI","std::string","varchar(1)",1,0,0,0},
{"APSYS_CDFWTOPTREGULFISCANCC","std::string","varchar(1)",1,0,0,0},
{"APSYS_CDFWTSTATREGULFISCANCC","std::string","varchar(1)",1,0,0,0},
{"APSYS_CDFWTOPTREGULFISCFUTC","std::string","varchar(1)",1,0,0,0},
{"STEUERLAND_ABGST_CD","std::string","varchar(3)",3,0,0,0},
{"APSYS_CDNATURES","std::string","varchar(2)",2,0,0,0},
{"APSYS_SHNAS","std::string","varchar(13)",13,0,0,0},
{"APSYS_CDPYHQDOMIS","std::string","varchar(3)",3,0,0,0},
{"APSYS_CDPERMI","double","double",8,0,0,0},
{"APSYS_IDRCIS","std::string","varchar(3)",3,0,0,0},
{"APSYS_FLAGISTTC","std::string","varchar(1)",1,0,0,0},
{"APSYS_DEVEVALS","std::string","varchar(3)",3,0,0,0},
{"APSYS_IDSTRUCS","std::string","varchar(3)",3,0,0,0},
{"APSYS_SUIVIAGTS","std::string","varchar(8)",8,0,0,0},
{"APSYS_CDINDUSCSSFS","std::string","varchar(6)",6,0,0,0},
{"APSYS_CDINDUSBLUXS","std::string","varchar(5)",5,0,0,0},
{"APSYS_CDINDUSSBUBA","std::string","varchar(5)",5,0,0,0},
{"APSYS_CDINDUSSBNS","std::string","varchar(4)",4,0,0,0},
{"APSYS_GRMTEVALS","std::string","varchar(3)",3,0,0,0},
{"APSYS_IDPOCS","std::string","varchar(3)",3,0,0,0},
{"APSYS_INFO","std::string","varchar(60)",60,0,0,0},
{"APSYS_IDENTS","std::string","varchar(3)",3,0,0,0},
{"APSYS_STATUS_OPEC","std::string","varchar(2)",2,0,0,0},
{"APSYS_ERRI","double","double",8,0,0,0},
{"NATIONALITAET2_CD","std::string","varchar(3)",3,0,0,0},
{"NATIONALITAET3_CD","std::string","varchar(3)",3,0,0,0},
{"VERMOEGENSURSPRUNG2_CD","std::string","decimal(2,0)",0,0,0,0},
{"VERMOEGENSURSPRUNG2","std::string","varchar(1000)",1000,0,0,0},
{"APPROVAL_STEP1_CD","std::string","varchar(1)",1,0,0,0},
{"APPROVAL_STEP1_USER","std::string","varchar(30)",30,0,0,0},
{"APPROVAL_STEP1_DATE","::trantor::Date","datetime",0,0,0,0},
{"APPROVAL_STEP2_CD","std::string","varchar(1)",1,0,0,0},
{"APPROVAL_STEP2_USER","std::string","varchar(30)",30,0,0,0},
{"APPROVAL_STEP2_DATE","::trantor::Date","datetime",0,0,0,0},
{"APPROVAL_STEP3_CD","std::string","varchar(1)",1,0,0,0},
{"APPROVAL_STEP3_USER","std::string","varchar(30)",30,0,0,0},
{"APPROVAL_STEP3_DATE","::trantor::Date","datetime",0,0,0,0},
{"APPROVAL_STEP4_CD","std::string","varchar(1)",1,0,0,0},
{"APPROVAL_STEP4_USER","std::string","varchar(30)",30,0,0,0},
{"APPROVAL_STEP4_DATE","::trantor::Date","datetime",0,0,0,0},
{"APPROVAL_STEP5_CD","std::string","varchar(1)",1,0,0,0},
{"APPROVAL_STEP5_USER","std::string","varchar(30)",30,0,0,0},
{"APPROVAL_STEP5_DATE","::trantor::Date","datetime",0,0,0,0},
{"APPROVAL_STEP1_BEM","std::string","varchar(512)",512,0,0,0},
{"APPROVAL_STEP2_BEM","std::string","varchar(512)",512,0,0,0},
{"APPROVAL_STEP3_BEM","std::string","varchar(512)",512,0,0,0},
{"APPROVAL_STEP4_BEM","std::string","varchar(512)",512,0,0,0},
{"APPROVAL_STEP5_BEM","std::string","varchar(512)",512,0,0,0},
{"APPROVAL_STEP1_ASSES_CD","double","double",8,0,0,0},
{"APPROVAL_STEP2_ASSES_CD","double","double",8,0,0,0},
{"APPROVAL_STEP3_ASSES_CD","double","double",8,0,0,0},
{"APPROVAL_STEP4_ASSES_CD","double","double",8,0,0,0},
{"APPROVAL_STEP5_ASSES_CD","double","double",8,0,0,0},
{"APPROVAL_STATUS_CD","double","double",8,0,0,0},
{"CLIENT_STATUS_CD","std::string","varchar(1)",1,0,0,0},
{"DISCHARGE_ORDERS_CD","std::string","varchar(1)",1,0,0,0},
{"PRINT_SUMMARY_HOLDMAIL_ONLY_CD","std::string","varchar(1)",1,0,0,0},
{"EBANKING_CONTRACT_CD","std::string","varchar(1)",1,0,0,0},
{"EBANKING_CONTRACT_LANGUAGE_CD","std::string","decimal(2,0)",0,0,0,0},
{"APSYS_DTECHDIARYL","::trantor::Date","datetime",0,0,0,0},
{"APSYS_MOTDIARYS","std::string","varchar(30)",30,0,0,0},
{"APSYS_IDTYPCLIIRSS","std::string","varchar(2)",2,0,0,0},
{"APSYS_IDRCIQIS","std::string","varchar(2)",2,0,0,0},
{"APSYS_IDRCIFATCAS","std::string","varchar(2)",2,0,0,0},
{"MAILING_TARIF_TYPE_CD","double","double",8,0,0,0},
{"REGISTERED_CD","std::string","varchar(1)",1,0,0,0},
{"REGISTERED_MAIL_CD","std::string","varchar(1)",1,0,0,0},
{"APSYS_NBPERSCPARTIEL","double","double",8,0,0,0},
{"ASSET_VALUE_TIER_CD","std::string","varchar(1)",1,0,0,0},
{"RELATIONSHIP_TYPE_AML_CD","std::string","varchar(10)",10,0,0,0},
{"CB_ASSET_VALUE_TIER_CD","std::string","varchar(1)",1,0,0,0},
{"APPROVAL_SCORE","double","double",8,0,0,0},
{"APPROVAL_SCORE_STEPS","double","double",8,0,0,0},
{"APSYS_DTDEBPARTL","::trantor::Date","datetime",0,0,0,0},
{"APSYS_DTFINPARTL","::trantor::Date","datetime",0,0,0,0},
{"APSYS_CDMOTIFCLOS","std::string","varchar(3)",3,0,0,0},
{"APSYS_CDNATURECPARTIEEMIRC","std::string","varchar(1)",1,0,0,0},
{"APSYS_FLAGOTHEREMIRC","std::string","varchar(1)",1,0,0,0},
{"APSYS_CDINDUSEMIRS","std::string","varchar(2)",2,0,0,0},
{"OPENED_IN_APSYS_DATE","::trantor::Date","datetime",0,0,0,0},
{"APSYS_CDNATURECPARTIEFMIAC","std::string","varchar(1)",1,0,0,0},
{"EBANKING_CLOSED_CD","std::string","varchar(1)",1,0,0,0},
{"EBANKING_CLOSINGDATE","::trantor::Date","datetime",0,0,0,0},
{"KYC_REVIEW_PROCESS_START_DATE","::trantor::Date","datetime",0,0,0,0},
{"REMARKS","std::string","varchar(200)",200,0,0,0},
{"TRANSACTION_BL_COUNTRY_CD","double","double",8,0,0,0},
{"CLIENTGROUP_CD","double","double",8,0,0,0},
{"RISKINDEX_CALC","double","double",8,0,0,0},
{"LAST_CALC_CRI_MUTDATUM","::trantor::Date","datetime",0,0,0,0},
{"RISIKOKATEGORIE_CALC_CD","std::string","varchar(3)",3,0,0,0},
{"RISKINDEX_GROUP","double","double",8,0,0,0},
{"EST_AMOUNT_REM_WITH_MUTDATUM","::trantor::Date","datetime",0,0,0,0},
{"GESAMTVERMOEGEN_MUTDATUM","::trantor::Date","datetime",0,0,0,0},
{"TRANSACT_BL_COUNTRY_MUTDATUM","::trantor::Date","datetime",0,0,0,0},
{"ACCOUNTPURPOSE_MUTDATUM","::trantor::Date","datetime",0,0,0,0},
{"APSYS_FLAGDELDATAPERSI","std::string","varchar(1)",1,0,0,0},
{"APSYS_DTWAITDELDATAPERSL","::trantor::Date","datetime",0,0,0,0},
{"NAME_ENC","std::string","varbinary(96)",0,0,0,0},
{"IN_APSYS_TEMP_ENTSPERREN_CD","std::string","varchar(1)",1,0,0,0},
{"IN_APSYS_TEMP_ENTSP_USERID","std::string","varchar(30)",30,0,0,0},
{"IN_APSYS_TEMP_ENTSP_DATUM","::trantor::Date","datetime",0,0,0,0},
{"APSYS_CDREGS","std::string","varchar(3)",3,0,0,0},
{"RETENTION_ON_HOLD","std::string","varchar(1)",1,0,0,0},
{"RETENTION_ON_HOLD_DATE","::trantor::Date","datetime",0,0,0,0},
{"RETENTION_ON_HOLD_REASON","std::string","varchar(2000)",2000,0,0,0},
{"LOGICAL_ERASURE","std::string","varchar(1)",1,0,0,0},
{"LOGICAL_ERASURE_DATE","::trantor::Date","datetime",0,0,0,0},
{"LOGICAL_ERASURE_REASON","std::string","varchar(2000)",2000,0,0,0},
{"COMPLIANCE_MIN_RISK_CATEGORY","std::string","varchar(30)",30,0,0,0},
{"COMPLIANCE_MIN_RISK_COMMENT","std::string","longtext",0,0,0,0},
{"CLIENT_STRUCTURE_CD","std::string","decimal(4,0)",0,0,0,0},
{"CLIENT_SUBSTRUCTURE_CD","std::string","decimal(4,0)",0,0,0,0}
};
const std::string &Kunde::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Kunde::Kunde(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["KUNDENID"].isNull())
        {
            kundenid_=std::make_shared<double>(r["KUNDENID"].as<double>());
        }
        if(!r["BEZEICHNUNG"].isNull())
        {
            bezeichnung_=std::make_shared<std::string>(r["BEZEICHNUNG"].as<std::string>());
        }
        if(!r["KUNDESEIT"].isNull())
        {
            auto timeStr = r["KUNDESEIT"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                kundeseit_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["VERTRAGSPARTEI_CD"].isNull())
        {
            vertragsparteiCd_=std::make_shared<std::string>(r["VERTRAGSPARTEI_CD"].as<std::string>());
        }
        if(!r["LOESCH_CD"].isNull())
        {
            loeschCd_=std::make_shared<std::string>(r["LOESCH_CD"].as<std::string>());
        }
        if(!r["LOESCHDATUM"].isNull())
        {
            auto timeStr = r["LOESCHDATUM"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                loeschdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["CRTDATUM"].isNull())
        {
            auto timeStr = r["CRTDATUM"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                crtdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["CRTUSER"].isNull())
        {
            crtuser_=std::make_shared<std::string>(r["CRTUSER"].as<std::string>());
        }
        if(!r["MUTDATUM"].isNull())
        {
            auto timeStr = r["MUTDATUM"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                mutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["MUTUSER"].isNull())
        {
            mutuser_=std::make_shared<std::string>(r["MUTUSER"].as<std::string>());
        }
        if(!r["PSEUDOACCOUNT_CD"].isNull())
        {
            pseudoaccountCd_=std::make_shared<std::string>(r["PSEUDOACCOUNT_CD"].as<std::string>());
        }
        if(!r["KUNDEBESUCH"].isNull())
        {
            auto timeStr = r["KUNDEBESUCH"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                kundebesuch_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["BEZEICHNUNGVERTRAG"].isNull())
        {
            bezeichnungvertrag_=std::make_shared<std::string>(r["BEZEICHNUNGVERTRAG"].as<std::string>());
        }
        if(!r["PSEUDONYM"].isNull())
        {
            pseudonym_=std::make_shared<std::string>(r["PSEUDONYM"].as<std::string>());
        }
        if(!r["RECHTSDOMIZIL_CD"].isNull())
        {
            rechtsdomizilCd_=std::make_shared<std::string>(r["RECHTSDOMIZIL_CD"].as<std::string>());
        }
        if(!r["KORRESPONDENZSPRACH_CD"].isNull())
        {
            korrespondenzsprachCd_=std::make_shared<std::string>(r["KORRESPONDENZSPRACH_CD"].as<std::string>());
        }
        if(!r["MIT_PROFIL_CD"].isNull())
        {
            mitProfilCd_=std::make_shared<std::string>(r["MIT_PROFIL_CD"].as<std::string>());
        }
        if(!r["GEMEINSCHAFTSKONTO_CD"].isNull())
        {
            gemeinschaftskontoCd_=std::make_shared<std::string>(r["GEMEINSCHAFTSKONTO_CD"].as<std::string>());
        }
        if(!r["PIN"].isNull())
        {
            pin_=std::make_shared<std::string>(r["PIN"].as<std::string>());
        }
        if(!r["VERWENDUNGSZWECK"].isNull())
        {
            verwendungszweck_=std::make_shared<std::string>(r["VERWENDUNGSZWECK"].as<std::string>());
        }
        if(!r["IDENTIFIKATIONSART_CD"].isNull())
        {
            identifikationsartCd_=std::make_shared<std::string>(r["IDENTIFIKATIONSART_CD"].as<std::string>());
        }
        if(!r["VERMOEGENSURSPRUNG_CD"].isNull())
        {
            vermoegensursprungCd_=std::make_shared<std::string>(r["VERMOEGENSURSPRUNG_CD"].as<std::string>());
        }
        if(!r["VERMOEGENSURSPRUNG"].isNull())
        {
            vermoegensursprung_=std::make_shared<std::string>(r["VERMOEGENSURSPRUNG"].as<std::string>());
        }
        if(!r["GELDVONKONTO"].isNull())
        {
            geldvonkonto_=std::make_shared<std::string>(r["GELDVONKONTO"].as<std::string>());
        }
        if(!r["BISHERIGEBETREUUNG"].isNull())
        {
            bisherigebetreuung_=std::make_shared<std::string>(r["BISHERIGEBETREUUNG"].as<std::string>());
        }
        if(!r["BISHERIGEBETREUUNGSEIT"].isNull())
        {
            auto timeStr = r["BISHERIGEBETREUUNGSEIT"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                bisherigebetreuungseit_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["MANUALOPEN_CD"].isNull())
        {
            manualopenCd_=std::make_shared<std::string>(r["MANUALOPEN_CD"].as<std::string>());
        }
        if(!r["EIN_VERMOEGEN_CD"].isNull())
        {
            einVermoegenCd_=std::make_shared<std::string>(r["EIN_VERMOEGEN_CD"].as<std::string>());
        }
        if(!r["REGIONZAHLUNG_CD"].isNull())
        {
            regionzahlungCd_=std::make_shared<std::string>(r["REGIONZAHLUNG_CD"].as<std::string>());
        }
        if(!r["EIN_VERMOEGENART_CD"].isNull())
        {
            einVermoegenartCd_=std::make_shared<std::string>(r["EIN_VERMOEGENART_CD"].as<std::string>());
        }
        if(!r["SPEZ_WUENSCHE_CD"].isNull())
        {
            spezWuenscheCd_=std::make_shared<std::string>(r["SPEZ_WUENSCHE_CD"].as<std::string>());
        }
        if(!r["MANAGER_CD"].isNull())
        {
            managerCd_=std::make_shared<std::string>(r["MANAGER_CD"].as<std::string>());
        }
        if(!r["RISKINDEX"].isNull())
        {
            riskindex_=std::make_shared<double>(r["RISKINDEX"].as<double>());
        }
        if(!r["RISKINDEX_GUELTISEIT"].isNull())
        {
            auto timeStr = r["RISKINDEX_GUELTISEIT"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                riskindexGueltiseit_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["RISKINDEX_LETZTEBERECHNUNG"].isNull())
        {
            auto timeStr = r["RISKINDEX_LETZTEBERECHNUNG"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                riskindexLetzteberechnung_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["KONTOEROEFFNUNGSART_CD"].isNull())
        {
            kontoeroeffnungsartCd_=std::make_shared<std::string>(r["KONTOEROEFFNUNGSART_CD"].as<std::string>());
        }
        if(!r["RISKINDEXBERECHNEN_CD"].isNull())
        {
            riskindexberechnenCd_=std::make_shared<std::string>(r["RISKINDEXBERECHNEN_CD"].as<std::string>());
        }
        if(!r["KUNDENNATUR_CD"].isNull())
        {
            kundennaturCd_=std::make_shared<std::string>(r["KUNDENNATUR_CD"].as<std::string>());
        }
        if(!r["RISIKOKATEGORIE_CD"].isNull())
        {
            risikokategorieCd_=std::make_shared<std::string>(r["RISIKOKATEGORIE_CD"].as<std::string>());
        }
        if(!r["PEP_CD"].isNull())
        {
            pepCd_=std::make_shared<std::string>(r["PEP_CD"].as<std::string>());
        }
        if(!r["SPEZIALKATEGORIE_CD"].isNull())
        {
            spezialkategorieCd_=std::make_shared<std::string>(r["SPEZIALKATEGORIE_CD"].as<std::string>());
        }
        if(!r["NATURE_CD"].isNull())
        {
            natureCd_=std::make_shared<std::string>(r["NATURE_CD"].as<std::string>());
        }
        if(!r["NAME"].isNull())
        {
            name_=std::make_shared<std::string>(r["NAME"].as<std::string>());
        }
        if(!r["LEDIGERNAME"].isNull())
        {
            ledigername_=std::make_shared<std::string>(r["LEDIGERNAME"].as<std::string>());
        }
        if(!r["VORNAME"].isNull())
        {
            vorname_=std::make_shared<std::string>(r["VORNAME"].as<std::string>());
        }
        if(!r["CDPARTC"].isNull())
        {
            cdpartc_=std::make_shared<std::string>(r["CDPARTC"].as<std::string>());
        }
        if(!r["NATIONALITAET_CD"].isNull())
        {
            nationalitaetCd_=std::make_shared<std::string>(r["NATIONALITAET_CD"].as<std::string>());
        }
        if(!r["RISIKOLAND_CD"].isNull())
        {
            risikolandCd_=std::make_shared<std::string>(r["RISIKOLAND_CD"].as<std::string>());
        }
        if(!r["PERSOENLICHBEKANNT_CD"].isNull())
        {
            persoenlichbekanntCd_=std::make_shared<std::string>(r["PERSOENLICHBEKANNT_CD"].as<std::string>());
        }
        if(!r["RISIKOTAETIGKEIT_CD"].isNull())
        {
            risikotaetigkeitCd_=std::make_shared<std::string>(r["RISIKOTAETIGKEIT_CD"].as<std::string>());
        }
        if(!r["STEUERDOMIZIL_CD"].isNull())
        {
            steuerdomizilCd_=std::make_shared<std::string>(r["STEUERDOMIZIL_CD"].as<std::string>());
        }
        if(!r["EU_TAXSTATUS_CD"].isNull())
        {
            euTaxstatusCd_=std::make_shared<std::string>(r["EU_TAXSTATUS_CD"].as<std::string>());
        }
        if(!r["TIN"].isNull())
        {
            tin_=std::make_shared<std::string>(r["TIN"].as<std::string>());
        }
        if(!r["APSYS_CDROLPERSI"].isNull())
        {
            apsysCdrolpersi_=std::make_shared<std::string>(r["APSYS_CDROLPERSI"].as<std::string>());
        }
        if(!r["VERTRAGSPRACH_CD"].isNull())
        {
            vertragsprachCd_=std::make_shared<std::string>(r["VERTRAGSPRACH_CD"].as<std::string>());
        }
        if(!r["VERMOEGENSKATEGORIE_IHAG_CD"].isNull())
        {
            vermoegenskategorieIhagCd_=std::make_shared<std::string>(r["VERMOEGENSKATEGORIE_IHAG_CD"].as<std::string>());
        }
        if(!r["APSYS_INTISHS"].isNull())
        {
            apsysIntishs_=std::make_shared<std::string>(r["APSYS_INTISHS"].as<std::string>());
        }
        if(!r["APSYS_INTILGS"].isNull())
        {
            apsysIntilgs_=std::make_shared<std::string>(r["APSYS_INTILGS"].as<std::string>());
        }
        if(!r["GESAMTVERMOEGEN_CD"].isNull())
        {
            gesamtvermoegenCd_=std::make_shared<double>(r["GESAMTVERMOEGEN_CD"].as<double>());
        }
        if(!r["COMPLIANCE_OK_CD"].isNull())
        {
            complianceOkCd_=std::make_shared<std::string>(r["COMPLIANCE_OK_CD"].as<std::string>());
        }
        if(!r["COMPLIANCE_OK_BEMERKUNG"].isNull())
        {
            complianceOkBemerkung_=std::make_shared<std::string>(r["COMPLIANCE_OK_BEMERKUNG"].as<std::string>());
        }
        if(!r["COMPLIANCE_OK_DATUM"].isNull())
        {
            auto timeStr = r["COMPLIANCE_OK_DATUM"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                complianceOkDatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["COMPLIANCE_OK_USERID"].isNull())
        {
            complianceOkUserid_=std::make_shared<std::string>(r["COMPLIANCE_OK_USERID"].as<std::string>());
        }
        if(!r["EIN_VERMOEGEN"].isNull())
        {
            einVermoegen_=std::make_shared<double>(r["EIN_VERMOEGEN"].as<double>());
        }
        if(!r["SEGMENTIERUNG_CD"].isNull())
        {
            segmentierungCd_=std::make_shared<double>(r["SEGMENTIERUNG_CD"].as<double>());
        }
        if(!r["AKTID"].isNull())
        {
            aktid_=std::make_shared<double>(r["AKTID"].as<double>());
        }
        if(!r["VALIDID"].isNull())
        {
            validid_=std::make_shared<double>(r["VALIDID"].as<double>());
        }
        if(!r["VALID_CD"].isNull())
        {
            validCd_=std::make_shared<std::string>(r["VALID_CD"].as<std::string>());
        }
        if(!r["VALIDUSER"].isNull())
        {
            validuser_=std::make_shared<std::string>(r["VALIDUSER"].as<std::string>());
        }
        if(!r["ENC_SALT"].isNull())
        {
            encSalt_=std::make_shared<std::string>(r["ENC_SALT"].as<std::string>());
        }
        if(!r["BEZEICHNUNG_ENC"].isNull())
        {
            bezeichnungEnc_=std::make_shared<std::string>(r["BEZEICHNUNG_ENC"].as<std::string>());
        }
        if(!r["APSYS_CDMOTIFPARTS"].isNull())
        {
            apsysCdmotifparts_=std::make_shared<std::string>(r["APSYS_CDMOTIFPARTS"].as<std::string>());
        }
        if(!r["APSYS_CDINDUS0S"].isNull())
        {
            apsysCdindus0s_=std::make_shared<std::string>(r["APSYS_CDINDUS0S"].as<std::string>());
        }
        if(!r["APSYS_FLAGPREAVISEXEC"].isNull())
        {
            apsysFlagpreavisexec_=std::make_shared<std::string>(r["APSYS_FLAGPREAVISEXEC"].as<std::string>());
        }
        if(!r["APSYS_CDAVIOBISPECC"].isNull())
        {
            apsysCdaviobispecc_=std::make_shared<std::string>(r["APSYS_CDAVIOBISPECC"].as<std::string>());
        }
        if(!r["APSYS_FLAGHISPERC"].isNull())
        {
            apsysFlaghisperc_=std::make_shared<std::string>(r["APSYS_FLAGHISPERC"].as<std::string>());
        }
        if(!r["APSYS_REPAMANUC"].isNull())
        {
            apsysRepamanuc_=std::make_shared<std::string>(r["APSYS_REPAMANUC"].as<std::string>());
        }
        if(!r["APSYS_PERDEVCALC"].isNull())
        {
            apsysPerdevcalc_=std::make_shared<std::string>(r["APSYS_PERDEVCALC"].as<std::string>());
        }
        if(!r["APSYS_FLAGUKTAXC"].isNull())
        {
            apsysFlaguktaxc_=std::make_shared<std::string>(r["APSYS_FLAGUKTAXC"].as<std::string>());
        }
        if(!r["APSYS_CDNOGAS"].isNull())
        {
            apsysCdnogas_=std::make_shared<std::string>(r["APSYS_CDNOGAS"].as<std::string>());
        }
        if(!r["APSYS_STATFISCC"].isNull())
        {
            apsysStatfiscc_=std::make_shared<std::string>(r["APSYS_STATFISCC"].as<std::string>());
        }
        if(!r["APSYS_FLAGFWTI"].isNull())
        {
            apsysFlagfwti_=std::make_shared<std::string>(r["APSYS_FLAGFWTI"].as<std::string>());
        }
        if(!r["APSYS_FLAGFWTUKNRSDI"].isNull())
        {
            apsysFlagfwtuknrsdi_=std::make_shared<std::string>(r["APSYS_FLAGFWTUKNRSDI"].as<std::string>());
        }
        if(!r["APSYS_FLAGFWTTAXSPEGEI"].isNull())
        {
            apsysFlagfwttaxspegei_=std::make_shared<std::string>(r["APSYS_FLAGFWTTAXSPEGEI"].as<std::string>());
        }
        if(!r["APSYS_CDFWTOPTREGULFISCANCC"].isNull())
        {
            apsysCdfwtoptregulfiscancc_=std::make_shared<std::string>(r["APSYS_CDFWTOPTREGULFISCANCC"].as<std::string>());
        }
        if(!r["APSYS_CDFWTSTATREGULFISCANCC"].isNull())
        {
            apsysCdfwtstatregulfiscancc_=std::make_shared<std::string>(r["APSYS_CDFWTSTATREGULFISCANCC"].as<std::string>());
        }
        if(!r["APSYS_CDFWTOPTREGULFISCFUTC"].isNull())
        {
            apsysCdfwtoptregulfiscfutc_=std::make_shared<std::string>(r["APSYS_CDFWTOPTREGULFISCFUTC"].as<std::string>());
        }
        if(!r["STEUERLAND_ABGST_CD"].isNull())
        {
            steuerlandAbgstCd_=std::make_shared<std::string>(r["STEUERLAND_ABGST_CD"].as<std::string>());
        }
        if(!r["APSYS_CDNATURES"].isNull())
        {
            apsysCdnatures_=std::make_shared<std::string>(r["APSYS_CDNATURES"].as<std::string>());
        }
        if(!r["APSYS_SHNAS"].isNull())
        {
            apsysShnas_=std::make_shared<std::string>(r["APSYS_SHNAS"].as<std::string>());
        }
        if(!r["APSYS_CDPYHQDOMIS"].isNull())
        {
            apsysCdpyhqdomis_=std::make_shared<std::string>(r["APSYS_CDPYHQDOMIS"].as<std::string>());
        }
        if(!r["APSYS_CDPERMI"].isNull())
        {
            apsysCdpermi_=std::make_shared<double>(r["APSYS_CDPERMI"].as<double>());
        }
        if(!r["APSYS_IDRCIS"].isNull())
        {
            apsysIdrcis_=std::make_shared<std::string>(r["APSYS_IDRCIS"].as<std::string>());
        }
        if(!r["APSYS_FLAGISTTC"].isNull())
        {
            apsysFlagisttc_=std::make_shared<std::string>(r["APSYS_FLAGISTTC"].as<std::string>());
        }
        if(!r["APSYS_DEVEVALS"].isNull())
        {
            apsysDevevals_=std::make_shared<std::string>(r["APSYS_DEVEVALS"].as<std::string>());
        }
        if(!r["APSYS_IDSTRUCS"].isNull())
        {
            apsysIdstrucs_=std::make_shared<std::string>(r["APSYS_IDSTRUCS"].as<std::string>());
        }
        if(!r["APSYS_SUIVIAGTS"].isNull())
        {
            apsysSuiviagts_=std::make_shared<std::string>(r["APSYS_SUIVIAGTS"].as<std::string>());
        }
        if(!r["APSYS_CDINDUSCSSFS"].isNull())
        {
            apsysCdinduscssfs_=std::make_shared<std::string>(r["APSYS_CDINDUSCSSFS"].as<std::string>());
        }
        if(!r["APSYS_CDINDUSBLUXS"].isNull())
        {
            apsysCdindusbluxs_=std::make_shared<std::string>(r["APSYS_CDINDUSBLUXS"].as<std::string>());
        }
        if(!r["APSYS_CDINDUSSBUBA"].isNull())
        {
            apsysCdindussbuba_=std::make_shared<std::string>(r["APSYS_CDINDUSSBUBA"].as<std::string>());
        }
        if(!r["APSYS_CDINDUSSBNS"].isNull())
        {
            apsysCdindussbns_=std::make_shared<std::string>(r["APSYS_CDINDUSSBNS"].as<std::string>());
        }
        if(!r["APSYS_GRMTEVALS"].isNull())
        {
            apsysGrmtevals_=std::make_shared<std::string>(r["APSYS_GRMTEVALS"].as<std::string>());
        }
        if(!r["APSYS_IDPOCS"].isNull())
        {
            apsysIdpocs_=std::make_shared<std::string>(r["APSYS_IDPOCS"].as<std::string>());
        }
        if(!r["APSYS_INFO"].isNull())
        {
            apsysInfo_=std::make_shared<std::string>(r["APSYS_INFO"].as<std::string>());
        }
        if(!r["APSYS_IDENTS"].isNull())
        {
            apsysIdents_=std::make_shared<std::string>(r["APSYS_IDENTS"].as<std::string>());
        }
        if(!r["APSYS_STATUS_OPEC"].isNull())
        {
            apsysStatusOpec_=std::make_shared<std::string>(r["APSYS_STATUS_OPEC"].as<std::string>());
        }
        if(!r["APSYS_ERRI"].isNull())
        {
            apsysErri_=std::make_shared<double>(r["APSYS_ERRI"].as<double>());
        }
        if(!r["NATIONALITAET2_CD"].isNull())
        {
            nationalitaet2Cd_=std::make_shared<std::string>(r["NATIONALITAET2_CD"].as<std::string>());
        }
        if(!r["NATIONALITAET3_CD"].isNull())
        {
            nationalitaet3Cd_=std::make_shared<std::string>(r["NATIONALITAET3_CD"].as<std::string>());
        }
        if(!r["VERMOEGENSURSPRUNG2_CD"].isNull())
        {
            vermoegensursprung2Cd_=std::make_shared<std::string>(r["VERMOEGENSURSPRUNG2_CD"].as<std::string>());
        }
        if(!r["VERMOEGENSURSPRUNG2"].isNull())
        {
            vermoegensursprung2_=std::make_shared<std::string>(r["VERMOEGENSURSPRUNG2"].as<std::string>());
        }
        if(!r["APPROVAL_STEP1_CD"].isNull())
        {
            approvalStep1Cd_=std::make_shared<std::string>(r["APPROVAL_STEP1_CD"].as<std::string>());
        }
        if(!r["APPROVAL_STEP1_USER"].isNull())
        {
            approvalStep1User_=std::make_shared<std::string>(r["APPROVAL_STEP1_USER"].as<std::string>());
        }
        if(!r["APPROVAL_STEP1_DATE"].isNull())
        {
            auto timeStr = r["APPROVAL_STEP1_DATE"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep1Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["APPROVAL_STEP2_CD"].isNull())
        {
            approvalStep2Cd_=std::make_shared<std::string>(r["APPROVAL_STEP2_CD"].as<std::string>());
        }
        if(!r["APPROVAL_STEP2_USER"].isNull())
        {
            approvalStep2User_=std::make_shared<std::string>(r["APPROVAL_STEP2_USER"].as<std::string>());
        }
        if(!r["APPROVAL_STEP2_DATE"].isNull())
        {
            auto timeStr = r["APPROVAL_STEP2_DATE"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep2Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["APPROVAL_STEP3_CD"].isNull())
        {
            approvalStep3Cd_=std::make_shared<std::string>(r["APPROVAL_STEP3_CD"].as<std::string>());
        }
        if(!r["APPROVAL_STEP3_USER"].isNull())
        {
            approvalStep3User_=std::make_shared<std::string>(r["APPROVAL_STEP3_USER"].as<std::string>());
        }
        if(!r["APPROVAL_STEP3_DATE"].isNull())
        {
            auto timeStr = r["APPROVAL_STEP3_DATE"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep3Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["APPROVAL_STEP4_CD"].isNull())
        {
            approvalStep4Cd_=std::make_shared<std::string>(r["APPROVAL_STEP4_CD"].as<std::string>());
        }
        if(!r["APPROVAL_STEP4_USER"].isNull())
        {
            approvalStep4User_=std::make_shared<std::string>(r["APPROVAL_STEP4_USER"].as<std::string>());
        }
        if(!r["APPROVAL_STEP4_DATE"].isNull())
        {
            auto timeStr = r["APPROVAL_STEP4_DATE"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep4Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["APPROVAL_STEP5_CD"].isNull())
        {
            approvalStep5Cd_=std::make_shared<std::string>(r["APPROVAL_STEP5_CD"].as<std::string>());
        }
        if(!r["APPROVAL_STEP5_USER"].isNull())
        {
            approvalStep5User_=std::make_shared<std::string>(r["APPROVAL_STEP5_USER"].as<std::string>());
        }
        if(!r["APPROVAL_STEP5_DATE"].isNull())
        {
            auto timeStr = r["APPROVAL_STEP5_DATE"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep5Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["APPROVAL_STEP1_BEM"].isNull())
        {
            approvalStep1Bem_=std::make_shared<std::string>(r["APPROVAL_STEP1_BEM"].as<std::string>());
        }
        if(!r["APPROVAL_STEP2_BEM"].isNull())
        {
            approvalStep2Bem_=std::make_shared<std::string>(r["APPROVAL_STEP2_BEM"].as<std::string>());
        }
        if(!r["APPROVAL_STEP3_BEM"].isNull())
        {
            approvalStep3Bem_=std::make_shared<std::string>(r["APPROVAL_STEP3_BEM"].as<std::string>());
        }
        if(!r["APPROVAL_STEP4_BEM"].isNull())
        {
            approvalStep4Bem_=std::make_shared<std::string>(r["APPROVAL_STEP4_BEM"].as<std::string>());
        }
        if(!r["APPROVAL_STEP5_BEM"].isNull())
        {
            approvalStep5Bem_=std::make_shared<std::string>(r["APPROVAL_STEP5_BEM"].as<std::string>());
        }
        if(!r["APPROVAL_STEP1_ASSES_CD"].isNull())
        {
            approvalStep1AssesCd_=std::make_shared<double>(r["APPROVAL_STEP1_ASSES_CD"].as<double>());
        }
        if(!r["APPROVAL_STEP2_ASSES_CD"].isNull())
        {
            approvalStep2AssesCd_=std::make_shared<double>(r["APPROVAL_STEP2_ASSES_CD"].as<double>());
        }
        if(!r["APPROVAL_STEP3_ASSES_CD"].isNull())
        {
            approvalStep3AssesCd_=std::make_shared<double>(r["APPROVAL_STEP3_ASSES_CD"].as<double>());
        }
        if(!r["APPROVAL_STEP4_ASSES_CD"].isNull())
        {
            approvalStep4AssesCd_=std::make_shared<double>(r["APPROVAL_STEP4_ASSES_CD"].as<double>());
        }
        if(!r["APPROVAL_STEP5_ASSES_CD"].isNull())
        {
            approvalStep5AssesCd_=std::make_shared<double>(r["APPROVAL_STEP5_ASSES_CD"].as<double>());
        }
        if(!r["APPROVAL_STATUS_CD"].isNull())
        {
            approvalStatusCd_=std::make_shared<double>(r["APPROVAL_STATUS_CD"].as<double>());
        }
        if(!r["CLIENT_STATUS_CD"].isNull())
        {
            clientStatusCd_=std::make_shared<std::string>(r["CLIENT_STATUS_CD"].as<std::string>());
        }
        if(!r["DISCHARGE_ORDERS_CD"].isNull())
        {
            dischargeOrdersCd_=std::make_shared<std::string>(r["DISCHARGE_ORDERS_CD"].as<std::string>());
        }
        if(!r["PRINT_SUMMARY_HOLDMAIL_ONLY_CD"].isNull())
        {
            printSummaryHoldmailOnlyCd_=std::make_shared<std::string>(r["PRINT_SUMMARY_HOLDMAIL_ONLY_CD"].as<std::string>());
        }
        if(!r["EBANKING_CONTRACT_CD"].isNull())
        {
            ebankingContractCd_=std::make_shared<std::string>(r["EBANKING_CONTRACT_CD"].as<std::string>());
        }
        if(!r["EBANKING_CONTRACT_LANGUAGE_CD"].isNull())
        {
            ebankingContractLanguageCd_=std::make_shared<std::string>(r["EBANKING_CONTRACT_LANGUAGE_CD"].as<std::string>());
        }
        if(!r["APSYS_DTECHDIARYL"].isNull())
        {
            auto timeStr = r["APSYS_DTECHDIARYL"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtechdiaryl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["APSYS_MOTDIARYS"].isNull())
        {
            apsysMotdiarys_=std::make_shared<std::string>(r["APSYS_MOTDIARYS"].as<std::string>());
        }
        if(!r["APSYS_IDTYPCLIIRSS"].isNull())
        {
            apsysIdtypcliirss_=std::make_shared<std::string>(r["APSYS_IDTYPCLIIRSS"].as<std::string>());
        }
        if(!r["APSYS_IDRCIQIS"].isNull())
        {
            apsysIdrciqis_=std::make_shared<std::string>(r["APSYS_IDRCIQIS"].as<std::string>());
        }
        if(!r["APSYS_IDRCIFATCAS"].isNull())
        {
            apsysIdrcifatcas_=std::make_shared<std::string>(r["APSYS_IDRCIFATCAS"].as<std::string>());
        }
        if(!r["MAILING_TARIF_TYPE_CD"].isNull())
        {
            mailingTarifTypeCd_=std::make_shared<double>(r["MAILING_TARIF_TYPE_CD"].as<double>());
        }
        if(!r["REGISTERED_CD"].isNull())
        {
            registeredCd_=std::make_shared<std::string>(r["REGISTERED_CD"].as<std::string>());
        }
        if(!r["REGISTERED_MAIL_CD"].isNull())
        {
            registeredMailCd_=std::make_shared<std::string>(r["REGISTERED_MAIL_CD"].as<std::string>());
        }
        if(!r["APSYS_NBPERSCPARTIEL"].isNull())
        {
            apsysNbperscpartiel_=std::make_shared<double>(r["APSYS_NBPERSCPARTIEL"].as<double>());
        }
        if(!r["ASSET_VALUE_TIER_CD"].isNull())
        {
            assetValueTierCd_=std::make_shared<std::string>(r["ASSET_VALUE_TIER_CD"].as<std::string>());
        }
        if(!r["RELATIONSHIP_TYPE_AML_CD"].isNull())
        {
            relationshipTypeAmlCd_=std::make_shared<std::string>(r["RELATIONSHIP_TYPE_AML_CD"].as<std::string>());
        }
        if(!r["CB_ASSET_VALUE_TIER_CD"].isNull())
        {
            cbAssetValueTierCd_=std::make_shared<std::string>(r["CB_ASSET_VALUE_TIER_CD"].as<std::string>());
        }
        if(!r["APPROVAL_SCORE"].isNull())
        {
            approvalScore_=std::make_shared<double>(r["APPROVAL_SCORE"].as<double>());
        }
        if(!r["APPROVAL_SCORE_STEPS"].isNull())
        {
            approvalScoreSteps_=std::make_shared<double>(r["APPROVAL_SCORE_STEPS"].as<double>());
        }
        if(!r["APSYS_DTDEBPARTL"].isNull())
        {
            auto timeStr = r["APSYS_DTDEBPARTL"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtdebpartl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["APSYS_DTFINPARTL"].isNull())
        {
            auto timeStr = r["APSYS_DTFINPARTL"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtfinpartl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["APSYS_CDMOTIFCLOS"].isNull())
        {
            apsysCdmotifclos_=std::make_shared<std::string>(r["APSYS_CDMOTIFCLOS"].as<std::string>());
        }
        if(!r["APSYS_CDNATURECPARTIEEMIRC"].isNull())
        {
            apsysCdnaturecpartieemirc_=std::make_shared<std::string>(r["APSYS_CDNATURECPARTIEEMIRC"].as<std::string>());
        }
        if(!r["APSYS_FLAGOTHEREMIRC"].isNull())
        {
            apsysFlagotheremirc_=std::make_shared<std::string>(r["APSYS_FLAGOTHEREMIRC"].as<std::string>());
        }
        if(!r["APSYS_CDINDUSEMIRS"].isNull())
        {
            apsysCdindusemirs_=std::make_shared<std::string>(r["APSYS_CDINDUSEMIRS"].as<std::string>());
        }
        if(!r["OPENED_IN_APSYS_DATE"].isNull())
        {
            auto timeStr = r["OPENED_IN_APSYS_DATE"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                openedInApsysDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["APSYS_CDNATURECPARTIEFMIAC"].isNull())
        {
            apsysCdnaturecpartiefmiac_=std::make_shared<std::string>(r["APSYS_CDNATURECPARTIEFMIAC"].as<std::string>());
        }
        if(!r["EBANKING_CLOSED_CD"].isNull())
        {
            ebankingClosedCd_=std::make_shared<std::string>(r["EBANKING_CLOSED_CD"].as<std::string>());
        }
        if(!r["EBANKING_CLOSINGDATE"].isNull())
        {
            auto timeStr = r["EBANKING_CLOSINGDATE"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                ebankingClosingdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["KYC_REVIEW_PROCESS_START_DATE"].isNull())
        {
            auto timeStr = r["KYC_REVIEW_PROCESS_START_DATE"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                kycReviewProcessStartDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["REMARKS"].isNull())
        {
            remarks_=std::make_shared<std::string>(r["REMARKS"].as<std::string>());
        }
        if(!r["TRANSACTION_BL_COUNTRY_CD"].isNull())
        {
            transactionBlCountryCd_=std::make_shared<double>(r["TRANSACTION_BL_COUNTRY_CD"].as<double>());
        }
        if(!r["CLIENTGROUP_CD"].isNull())
        {
            clientgroupCd_=std::make_shared<double>(r["CLIENTGROUP_CD"].as<double>());
        }
        if(!r["RISKINDEX_CALC"].isNull())
        {
            riskindexCalc_=std::make_shared<double>(r["RISKINDEX_CALC"].as<double>());
        }
        if(!r["LAST_CALC_CRI_MUTDATUM"].isNull())
        {
            auto timeStr = r["LAST_CALC_CRI_MUTDATUM"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                lastCalcCriMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["RISIKOKATEGORIE_CALC_CD"].isNull())
        {
            risikokategorieCalcCd_=std::make_shared<std::string>(r["RISIKOKATEGORIE_CALC_CD"].as<std::string>());
        }
        if(!r["RISKINDEX_GROUP"].isNull())
        {
            riskindexGroup_=std::make_shared<double>(r["RISKINDEX_GROUP"].as<double>());
        }
        if(!r["EST_AMOUNT_REM_WITH_MUTDATUM"].isNull())
        {
            auto timeStr = r["EST_AMOUNT_REM_WITH_MUTDATUM"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                estAmountRemWithMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["GESAMTVERMOEGEN_MUTDATUM"].isNull())
        {
            auto timeStr = r["GESAMTVERMOEGEN_MUTDATUM"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                gesamtvermoegenMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["TRANSACT_BL_COUNTRY_MUTDATUM"].isNull())
        {
            auto timeStr = r["TRANSACT_BL_COUNTRY_MUTDATUM"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                transactBlCountryMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["ACCOUNTPURPOSE_MUTDATUM"].isNull())
        {
            auto timeStr = r["ACCOUNTPURPOSE_MUTDATUM"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                accountpurposeMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["APSYS_FLAGDELDATAPERSI"].isNull())
        {
            apsysFlagdeldatapersi_=std::make_shared<std::string>(r["APSYS_FLAGDELDATAPERSI"].as<std::string>());
        }
        if(!r["APSYS_DTWAITDELDATAPERSL"].isNull())
        {
            auto timeStr = r["APSYS_DTWAITDELDATAPERSL"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtwaitdeldatapersl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["NAME_ENC"].isNull())
        {
            nameEnc_=std::make_shared<std::string>(r["NAME_ENC"].as<std::string>());
        }
        if(!r["IN_APSYS_TEMP_ENTSPERREN_CD"].isNull())
        {
            inApsysTempEntsperrenCd_=std::make_shared<std::string>(r["IN_APSYS_TEMP_ENTSPERREN_CD"].as<std::string>());
        }
        if(!r["IN_APSYS_TEMP_ENTSP_USERID"].isNull())
        {
            inApsysTempEntspUserid_=std::make_shared<std::string>(r["IN_APSYS_TEMP_ENTSP_USERID"].as<std::string>());
        }
        if(!r["IN_APSYS_TEMP_ENTSP_DATUM"].isNull())
        {
            auto timeStr = r["IN_APSYS_TEMP_ENTSP_DATUM"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                inApsysTempEntspDatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["APSYS_CDREGS"].isNull())
        {
            apsysCdregs_=std::make_shared<std::string>(r["APSYS_CDREGS"].as<std::string>());
        }
        if(!r["RETENTION_ON_HOLD"].isNull())
        {
            retentionOnHold_=std::make_shared<std::string>(r["RETENTION_ON_HOLD"].as<std::string>());
        }
        if(!r["RETENTION_ON_HOLD_DATE"].isNull())
        {
            auto timeStr = r["RETENTION_ON_HOLD_DATE"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                retentionOnHoldDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["RETENTION_ON_HOLD_REASON"].isNull())
        {
            retentionOnHoldReason_=std::make_shared<std::string>(r["RETENTION_ON_HOLD_REASON"].as<std::string>());
        }
        if(!r["LOGICAL_ERASURE"].isNull())
        {
            logicalErasure_=std::make_shared<std::string>(r["LOGICAL_ERASURE"].as<std::string>());
        }
        if(!r["LOGICAL_ERASURE_DATE"].isNull())
        {
            auto timeStr = r["LOGICAL_ERASURE_DATE"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                logicalErasureDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["LOGICAL_ERASURE_REASON"].isNull())
        {
            logicalErasureReason_=std::make_shared<std::string>(r["LOGICAL_ERASURE_REASON"].as<std::string>());
        }
        if(!r["COMPLIANCE_MIN_RISK_CATEGORY"].isNull())
        {
            complianceMinRiskCategory_=std::make_shared<std::string>(r["COMPLIANCE_MIN_RISK_CATEGORY"].as<std::string>());
        }
        if(!r["COMPLIANCE_MIN_RISK_COMMENT"].isNull())
        {
            complianceMinRiskComment_=std::make_shared<std::string>(r["COMPLIANCE_MIN_RISK_COMMENT"].as<std::string>());
        }
        if(!r["CLIENT_STRUCTURE_CD"].isNull())
        {
            clientStructureCd_=std::make_shared<std::string>(r["CLIENT_STRUCTURE_CD"].as<std::string>());
        }
        if(!r["CLIENT_SUBSTRUCTURE_CD"].isNull())
        {
            clientSubstructureCd_=std::make_shared<std::string>(r["CLIENT_SUBSTRUCTURE_CD"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 195 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            kundenid_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            bezeichnung_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                kundeseit_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            vertragsparteiCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            loeschCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                loeschdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                crtdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            crtuser_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                mutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            mutuser_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            pseudoaccountCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                kundebesuch_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            bezeichnungvertrag_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            pseudonym_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            rechtsdomizilCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            korrespondenzsprachCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            mitProfilCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            gemeinschaftskontoCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            pin_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            verwendungszweck_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            identifikationsartCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 21;
        if(!r[index].isNull())
        {
            vermoegensursprungCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 22;
        if(!r[index].isNull())
        {
            vermoegensursprung_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 23;
        if(!r[index].isNull())
        {
            geldvonkonto_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 24;
        if(!r[index].isNull())
        {
            bisherigebetreuung_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 25;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                bisherigebetreuungseit_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 26;
        if(!r[index].isNull())
        {
            manualopenCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 27;
        if(!r[index].isNull())
        {
            einVermoegenCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 28;
        if(!r[index].isNull())
        {
            regionzahlungCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 29;
        if(!r[index].isNull())
        {
            einVermoegenartCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 30;
        if(!r[index].isNull())
        {
            spezWuenscheCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 31;
        if(!r[index].isNull())
        {
            managerCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 32;
        if(!r[index].isNull())
        {
            riskindex_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 33;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                riskindexGueltiseit_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 34;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                riskindexLetzteberechnung_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 35;
        if(!r[index].isNull())
        {
            kontoeroeffnungsartCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 36;
        if(!r[index].isNull())
        {
            riskindexberechnenCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 37;
        if(!r[index].isNull())
        {
            kundennaturCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 38;
        if(!r[index].isNull())
        {
            risikokategorieCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 39;
        if(!r[index].isNull())
        {
            pepCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 40;
        if(!r[index].isNull())
        {
            spezialkategorieCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 41;
        if(!r[index].isNull())
        {
            natureCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 42;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 43;
        if(!r[index].isNull())
        {
            ledigername_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 44;
        if(!r[index].isNull())
        {
            vorname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 45;
        if(!r[index].isNull())
        {
            cdpartc_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 46;
        if(!r[index].isNull())
        {
            nationalitaetCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 47;
        if(!r[index].isNull())
        {
            risikolandCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 48;
        if(!r[index].isNull())
        {
            persoenlichbekanntCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 49;
        if(!r[index].isNull())
        {
            risikotaetigkeitCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 50;
        if(!r[index].isNull())
        {
            steuerdomizilCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 51;
        if(!r[index].isNull())
        {
            euTaxstatusCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 52;
        if(!r[index].isNull())
        {
            tin_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 53;
        if(!r[index].isNull())
        {
            apsysCdrolpersi_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 54;
        if(!r[index].isNull())
        {
            vertragsprachCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 55;
        if(!r[index].isNull())
        {
            vermoegenskategorieIhagCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 56;
        if(!r[index].isNull())
        {
            apsysIntishs_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 57;
        if(!r[index].isNull())
        {
            apsysIntilgs_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 58;
        if(!r[index].isNull())
        {
            gesamtvermoegenCd_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 59;
        if(!r[index].isNull())
        {
            complianceOkCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 60;
        if(!r[index].isNull())
        {
            complianceOkBemerkung_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 61;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                complianceOkDatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 62;
        if(!r[index].isNull())
        {
            complianceOkUserid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 63;
        if(!r[index].isNull())
        {
            einVermoegen_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 64;
        if(!r[index].isNull())
        {
            segmentierungCd_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 65;
        if(!r[index].isNull())
        {
            aktid_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 66;
        if(!r[index].isNull())
        {
            validid_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 67;
        if(!r[index].isNull())
        {
            validCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 68;
        if(!r[index].isNull())
        {
            validuser_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 69;
        if(!r[index].isNull())
        {
            encSalt_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 70;
        if(!r[index].isNull())
        {
            bezeichnungEnc_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 71;
        if(!r[index].isNull())
        {
            apsysCdmotifparts_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 72;
        if(!r[index].isNull())
        {
            apsysCdindus0s_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 73;
        if(!r[index].isNull())
        {
            apsysFlagpreavisexec_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 74;
        if(!r[index].isNull())
        {
            apsysCdaviobispecc_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 75;
        if(!r[index].isNull())
        {
            apsysFlaghisperc_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 76;
        if(!r[index].isNull())
        {
            apsysRepamanuc_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 77;
        if(!r[index].isNull())
        {
            apsysPerdevcalc_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 78;
        if(!r[index].isNull())
        {
            apsysFlaguktaxc_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 79;
        if(!r[index].isNull())
        {
            apsysCdnogas_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 80;
        if(!r[index].isNull())
        {
            apsysStatfiscc_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 81;
        if(!r[index].isNull())
        {
            apsysFlagfwti_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 82;
        if(!r[index].isNull())
        {
            apsysFlagfwtuknrsdi_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 83;
        if(!r[index].isNull())
        {
            apsysFlagfwttaxspegei_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 84;
        if(!r[index].isNull())
        {
            apsysCdfwtoptregulfiscancc_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 85;
        if(!r[index].isNull())
        {
            apsysCdfwtstatregulfiscancc_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 86;
        if(!r[index].isNull())
        {
            apsysCdfwtoptregulfiscfutc_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 87;
        if(!r[index].isNull())
        {
            steuerlandAbgstCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 88;
        if(!r[index].isNull())
        {
            apsysCdnatures_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 89;
        if(!r[index].isNull())
        {
            apsysShnas_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 90;
        if(!r[index].isNull())
        {
            apsysCdpyhqdomis_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 91;
        if(!r[index].isNull())
        {
            apsysCdpermi_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 92;
        if(!r[index].isNull())
        {
            apsysIdrcis_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 93;
        if(!r[index].isNull())
        {
            apsysFlagisttc_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 94;
        if(!r[index].isNull())
        {
            apsysDevevals_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 95;
        if(!r[index].isNull())
        {
            apsysIdstrucs_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 96;
        if(!r[index].isNull())
        {
            apsysSuiviagts_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 97;
        if(!r[index].isNull())
        {
            apsysCdinduscssfs_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 98;
        if(!r[index].isNull())
        {
            apsysCdindusbluxs_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 99;
        if(!r[index].isNull())
        {
            apsysCdindussbuba_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 100;
        if(!r[index].isNull())
        {
            apsysCdindussbns_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 101;
        if(!r[index].isNull())
        {
            apsysGrmtevals_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 102;
        if(!r[index].isNull())
        {
            apsysIdpocs_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 103;
        if(!r[index].isNull())
        {
            apsysInfo_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 104;
        if(!r[index].isNull())
        {
            apsysIdents_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 105;
        if(!r[index].isNull())
        {
            apsysStatusOpec_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 106;
        if(!r[index].isNull())
        {
            apsysErri_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 107;
        if(!r[index].isNull())
        {
            nationalitaet2Cd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 108;
        if(!r[index].isNull())
        {
            nationalitaet3Cd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 109;
        if(!r[index].isNull())
        {
            vermoegensursprung2Cd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 110;
        if(!r[index].isNull())
        {
            vermoegensursprung2_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 111;
        if(!r[index].isNull())
        {
            approvalStep1Cd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 112;
        if(!r[index].isNull())
        {
            approvalStep1User_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 113;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep1Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 114;
        if(!r[index].isNull())
        {
            approvalStep2Cd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 115;
        if(!r[index].isNull())
        {
            approvalStep2User_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 116;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep2Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 117;
        if(!r[index].isNull())
        {
            approvalStep3Cd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 118;
        if(!r[index].isNull())
        {
            approvalStep3User_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 119;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep3Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 120;
        if(!r[index].isNull())
        {
            approvalStep4Cd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 121;
        if(!r[index].isNull())
        {
            approvalStep4User_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 122;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep4Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 123;
        if(!r[index].isNull())
        {
            approvalStep5Cd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 124;
        if(!r[index].isNull())
        {
            approvalStep5User_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 125;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep5Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 126;
        if(!r[index].isNull())
        {
            approvalStep1Bem_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 127;
        if(!r[index].isNull())
        {
            approvalStep2Bem_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 128;
        if(!r[index].isNull())
        {
            approvalStep3Bem_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 129;
        if(!r[index].isNull())
        {
            approvalStep4Bem_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 130;
        if(!r[index].isNull())
        {
            approvalStep5Bem_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 131;
        if(!r[index].isNull())
        {
            approvalStep1AssesCd_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 132;
        if(!r[index].isNull())
        {
            approvalStep2AssesCd_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 133;
        if(!r[index].isNull())
        {
            approvalStep3AssesCd_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 134;
        if(!r[index].isNull())
        {
            approvalStep4AssesCd_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 135;
        if(!r[index].isNull())
        {
            approvalStep5AssesCd_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 136;
        if(!r[index].isNull())
        {
            approvalStatusCd_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 137;
        if(!r[index].isNull())
        {
            clientStatusCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 138;
        if(!r[index].isNull())
        {
            dischargeOrdersCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 139;
        if(!r[index].isNull())
        {
            printSummaryHoldmailOnlyCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 140;
        if(!r[index].isNull())
        {
            ebankingContractCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 141;
        if(!r[index].isNull())
        {
            ebankingContractLanguageCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 142;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtechdiaryl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 143;
        if(!r[index].isNull())
        {
            apsysMotdiarys_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 144;
        if(!r[index].isNull())
        {
            apsysIdtypcliirss_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 145;
        if(!r[index].isNull())
        {
            apsysIdrciqis_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 146;
        if(!r[index].isNull())
        {
            apsysIdrcifatcas_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 147;
        if(!r[index].isNull())
        {
            mailingTarifTypeCd_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 148;
        if(!r[index].isNull())
        {
            registeredCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 149;
        if(!r[index].isNull())
        {
            registeredMailCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 150;
        if(!r[index].isNull())
        {
            apsysNbperscpartiel_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 151;
        if(!r[index].isNull())
        {
            assetValueTierCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 152;
        if(!r[index].isNull())
        {
            relationshipTypeAmlCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 153;
        if(!r[index].isNull())
        {
            cbAssetValueTierCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 154;
        if(!r[index].isNull())
        {
            approvalScore_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 155;
        if(!r[index].isNull())
        {
            approvalScoreSteps_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 156;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtdebpartl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 157;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtfinpartl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 158;
        if(!r[index].isNull())
        {
            apsysCdmotifclos_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 159;
        if(!r[index].isNull())
        {
            apsysCdnaturecpartieemirc_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 160;
        if(!r[index].isNull())
        {
            apsysFlagotheremirc_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 161;
        if(!r[index].isNull())
        {
            apsysCdindusemirs_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 162;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                openedInApsysDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 163;
        if(!r[index].isNull())
        {
            apsysCdnaturecpartiefmiac_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 164;
        if(!r[index].isNull())
        {
            ebankingClosedCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 165;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                ebankingClosingdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 166;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                kycReviewProcessStartDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 167;
        if(!r[index].isNull())
        {
            remarks_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 168;
        if(!r[index].isNull())
        {
            transactionBlCountryCd_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 169;
        if(!r[index].isNull())
        {
            clientgroupCd_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 170;
        if(!r[index].isNull())
        {
            riskindexCalc_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 171;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                lastCalcCriMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 172;
        if(!r[index].isNull())
        {
            risikokategorieCalcCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 173;
        if(!r[index].isNull())
        {
            riskindexGroup_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 174;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                estAmountRemWithMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 175;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                gesamtvermoegenMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 176;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                transactBlCountryMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 177;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                accountpurposeMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 178;
        if(!r[index].isNull())
        {
            apsysFlagdeldatapersi_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 179;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtwaitdeldatapersl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 180;
        if(!r[index].isNull())
        {
            nameEnc_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 181;
        if(!r[index].isNull())
        {
            inApsysTempEntsperrenCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 182;
        if(!r[index].isNull())
        {
            inApsysTempEntspUserid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 183;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                inApsysTempEntspDatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 184;
        if(!r[index].isNull())
        {
            apsysCdregs_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 185;
        if(!r[index].isNull())
        {
            retentionOnHold_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 186;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                retentionOnHoldDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 187;
        if(!r[index].isNull())
        {
            retentionOnHoldReason_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 188;
        if(!r[index].isNull())
        {
            logicalErasure_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 189;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                logicalErasureDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 190;
        if(!r[index].isNull())
        {
            logicalErasureReason_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 191;
        if(!r[index].isNull())
        {
            complianceMinRiskCategory_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 192;
        if(!r[index].isNull())
        {
            complianceMinRiskComment_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 193;
        if(!r[index].isNull())
        {
            clientStructureCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 194;
        if(!r[index].isNull())
        {
            clientSubstructureCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Kunde::Kunde(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 195)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            kundenid_=std::make_shared<double>(pJson[pMasqueradingVector[0]].asDouble());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            bezeichnung_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                kundeseit_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            vertragsparteiCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            loeschCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                loeschdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                crtdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            crtuser_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                mutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            mutuser_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            pseudoaccountCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                kundebesuch_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            bezeichnungvertrag_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            pseudonym_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            rechtsdomizilCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            korrespondenzsprachCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            mitProfilCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            gemeinschaftskontoCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            pin_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            verwendungszweck_=std::make_shared<std::string>(pJson[pMasqueradingVector[19]].asString());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            identifikationsartCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            vermoegensursprungCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[21]].asString());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            vermoegensursprung_=std::make_shared<std::string>(pJson[pMasqueradingVector[22]].asString());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            geldvonkonto_=std::make_shared<std::string>(pJson[pMasqueradingVector[23]].asString());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            bisherigebetreuung_=std::make_shared<std::string>(pJson[pMasqueradingVector[24]].asString());
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[25]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                bisherigebetreuungseit_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        dirtyFlag_[26] = true;
        if(!pJson[pMasqueradingVector[26]].isNull())
        {
            manualopenCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[26]].asString());
        }
    }
    if(!pMasqueradingVector[27].empty() && pJson.isMember(pMasqueradingVector[27]))
    {
        dirtyFlag_[27] = true;
        if(!pJson[pMasqueradingVector[27]].isNull())
        {
            einVermoegenCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[27]].asString());
        }
    }
    if(!pMasqueradingVector[28].empty() && pJson.isMember(pMasqueradingVector[28]))
    {
        dirtyFlag_[28] = true;
        if(!pJson[pMasqueradingVector[28]].isNull())
        {
            regionzahlungCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[28]].asString());
        }
    }
    if(!pMasqueradingVector[29].empty() && pJson.isMember(pMasqueradingVector[29]))
    {
        dirtyFlag_[29] = true;
        if(!pJson[pMasqueradingVector[29]].isNull())
        {
            einVermoegenartCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[29]].asString());
        }
    }
    if(!pMasqueradingVector[30].empty() && pJson.isMember(pMasqueradingVector[30]))
    {
        dirtyFlag_[30] = true;
        if(!pJson[pMasqueradingVector[30]].isNull())
        {
            spezWuenscheCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[30]].asString());
        }
    }
    if(!pMasqueradingVector[31].empty() && pJson.isMember(pMasqueradingVector[31]))
    {
        dirtyFlag_[31] = true;
        if(!pJson[pMasqueradingVector[31]].isNull())
        {
            managerCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[31]].asString());
        }
    }
    if(!pMasqueradingVector[32].empty() && pJson.isMember(pMasqueradingVector[32]))
    {
        dirtyFlag_[32] = true;
        if(!pJson[pMasqueradingVector[32]].isNull())
        {
            riskindex_=std::make_shared<double>(pJson[pMasqueradingVector[32]].asDouble());
        }
    }
    if(!pMasqueradingVector[33].empty() && pJson.isMember(pMasqueradingVector[33]))
    {
        dirtyFlag_[33] = true;
        if(!pJson[pMasqueradingVector[33]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[33]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                riskindexGueltiseit_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[34].empty() && pJson.isMember(pMasqueradingVector[34]))
    {
        dirtyFlag_[34] = true;
        if(!pJson[pMasqueradingVector[34]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[34]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                riskindexLetzteberechnung_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[35].empty() && pJson.isMember(pMasqueradingVector[35]))
    {
        dirtyFlag_[35] = true;
        if(!pJson[pMasqueradingVector[35]].isNull())
        {
            kontoeroeffnungsartCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[35]].asString());
        }
    }
    if(!pMasqueradingVector[36].empty() && pJson.isMember(pMasqueradingVector[36]))
    {
        dirtyFlag_[36] = true;
        if(!pJson[pMasqueradingVector[36]].isNull())
        {
            riskindexberechnenCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[36]].asString());
        }
    }
    if(!pMasqueradingVector[37].empty() && pJson.isMember(pMasqueradingVector[37]))
    {
        dirtyFlag_[37] = true;
        if(!pJson[pMasqueradingVector[37]].isNull())
        {
            kundennaturCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[37]].asString());
        }
    }
    if(!pMasqueradingVector[38].empty() && pJson.isMember(pMasqueradingVector[38]))
    {
        dirtyFlag_[38] = true;
        if(!pJson[pMasqueradingVector[38]].isNull())
        {
            risikokategorieCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[38]].asString());
        }
    }
    if(!pMasqueradingVector[39].empty() && pJson.isMember(pMasqueradingVector[39]))
    {
        dirtyFlag_[39] = true;
        if(!pJson[pMasqueradingVector[39]].isNull())
        {
            pepCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[39]].asString());
        }
    }
    if(!pMasqueradingVector[40].empty() && pJson.isMember(pMasqueradingVector[40]))
    {
        dirtyFlag_[40] = true;
        if(!pJson[pMasqueradingVector[40]].isNull())
        {
            spezialkategorieCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[40]].asString());
        }
    }
    if(!pMasqueradingVector[41].empty() && pJson.isMember(pMasqueradingVector[41]))
    {
        dirtyFlag_[41] = true;
        if(!pJson[pMasqueradingVector[41]].isNull())
        {
            natureCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[41]].asString());
        }
    }
    if(!pMasqueradingVector[42].empty() && pJson.isMember(pMasqueradingVector[42]))
    {
        dirtyFlag_[42] = true;
        if(!pJson[pMasqueradingVector[42]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[42]].asString());
        }
    }
    if(!pMasqueradingVector[43].empty() && pJson.isMember(pMasqueradingVector[43]))
    {
        dirtyFlag_[43] = true;
        if(!pJson[pMasqueradingVector[43]].isNull())
        {
            ledigername_=std::make_shared<std::string>(pJson[pMasqueradingVector[43]].asString());
        }
    }
    if(!pMasqueradingVector[44].empty() && pJson.isMember(pMasqueradingVector[44]))
    {
        dirtyFlag_[44] = true;
        if(!pJson[pMasqueradingVector[44]].isNull())
        {
            vorname_=std::make_shared<std::string>(pJson[pMasqueradingVector[44]].asString());
        }
    }
    if(!pMasqueradingVector[45].empty() && pJson.isMember(pMasqueradingVector[45]))
    {
        dirtyFlag_[45] = true;
        if(!pJson[pMasqueradingVector[45]].isNull())
        {
            cdpartc_=std::make_shared<std::string>(pJson[pMasqueradingVector[45]].asString());
        }
    }
    if(!pMasqueradingVector[46].empty() && pJson.isMember(pMasqueradingVector[46]))
    {
        dirtyFlag_[46] = true;
        if(!pJson[pMasqueradingVector[46]].isNull())
        {
            nationalitaetCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[46]].asString());
        }
    }
    if(!pMasqueradingVector[47].empty() && pJson.isMember(pMasqueradingVector[47]))
    {
        dirtyFlag_[47] = true;
        if(!pJson[pMasqueradingVector[47]].isNull())
        {
            risikolandCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[47]].asString());
        }
    }
    if(!pMasqueradingVector[48].empty() && pJson.isMember(pMasqueradingVector[48]))
    {
        dirtyFlag_[48] = true;
        if(!pJson[pMasqueradingVector[48]].isNull())
        {
            persoenlichbekanntCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[48]].asString());
        }
    }
    if(!pMasqueradingVector[49].empty() && pJson.isMember(pMasqueradingVector[49]))
    {
        dirtyFlag_[49] = true;
        if(!pJson[pMasqueradingVector[49]].isNull())
        {
            risikotaetigkeitCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[49]].asString());
        }
    }
    if(!pMasqueradingVector[50].empty() && pJson.isMember(pMasqueradingVector[50]))
    {
        dirtyFlag_[50] = true;
        if(!pJson[pMasqueradingVector[50]].isNull())
        {
            steuerdomizilCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[50]].asString());
        }
    }
    if(!pMasqueradingVector[51].empty() && pJson.isMember(pMasqueradingVector[51]))
    {
        dirtyFlag_[51] = true;
        if(!pJson[pMasqueradingVector[51]].isNull())
        {
            euTaxstatusCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[51]].asString());
        }
    }
    if(!pMasqueradingVector[52].empty() && pJson.isMember(pMasqueradingVector[52]))
    {
        dirtyFlag_[52] = true;
        if(!pJson[pMasqueradingVector[52]].isNull())
        {
            tin_=std::make_shared<std::string>(pJson[pMasqueradingVector[52]].asString());
        }
    }
    if(!pMasqueradingVector[53].empty() && pJson.isMember(pMasqueradingVector[53]))
    {
        dirtyFlag_[53] = true;
        if(!pJson[pMasqueradingVector[53]].isNull())
        {
            apsysCdrolpersi_=std::make_shared<std::string>(pJson[pMasqueradingVector[53]].asString());
        }
    }
    if(!pMasqueradingVector[54].empty() && pJson.isMember(pMasqueradingVector[54]))
    {
        dirtyFlag_[54] = true;
        if(!pJson[pMasqueradingVector[54]].isNull())
        {
            vertragsprachCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[54]].asString());
        }
    }
    if(!pMasqueradingVector[55].empty() && pJson.isMember(pMasqueradingVector[55]))
    {
        dirtyFlag_[55] = true;
        if(!pJson[pMasqueradingVector[55]].isNull())
        {
            vermoegenskategorieIhagCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[55]].asString());
        }
    }
    if(!pMasqueradingVector[56].empty() && pJson.isMember(pMasqueradingVector[56]))
    {
        dirtyFlag_[56] = true;
        if(!pJson[pMasqueradingVector[56]].isNull())
        {
            apsysIntishs_=std::make_shared<std::string>(pJson[pMasqueradingVector[56]].asString());
        }
    }
    if(!pMasqueradingVector[57].empty() && pJson.isMember(pMasqueradingVector[57]))
    {
        dirtyFlag_[57] = true;
        if(!pJson[pMasqueradingVector[57]].isNull())
        {
            apsysIntilgs_=std::make_shared<std::string>(pJson[pMasqueradingVector[57]].asString());
        }
    }
    if(!pMasqueradingVector[58].empty() && pJson.isMember(pMasqueradingVector[58]))
    {
        dirtyFlag_[58] = true;
        if(!pJson[pMasqueradingVector[58]].isNull())
        {
            gesamtvermoegenCd_=std::make_shared<double>(pJson[pMasqueradingVector[58]].asDouble());
        }
    }
    if(!pMasqueradingVector[59].empty() && pJson.isMember(pMasqueradingVector[59]))
    {
        dirtyFlag_[59] = true;
        if(!pJson[pMasqueradingVector[59]].isNull())
        {
            complianceOkCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[59]].asString());
        }
    }
    if(!pMasqueradingVector[60].empty() && pJson.isMember(pMasqueradingVector[60]))
    {
        dirtyFlag_[60] = true;
        if(!pJson[pMasqueradingVector[60]].isNull())
        {
            complianceOkBemerkung_=std::make_shared<std::string>(pJson[pMasqueradingVector[60]].asString());
        }
    }
    if(!pMasqueradingVector[61].empty() && pJson.isMember(pMasqueradingVector[61]))
    {
        dirtyFlag_[61] = true;
        if(!pJson[pMasqueradingVector[61]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[61]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                complianceOkDatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[62].empty() && pJson.isMember(pMasqueradingVector[62]))
    {
        dirtyFlag_[62] = true;
        if(!pJson[pMasqueradingVector[62]].isNull())
        {
            complianceOkUserid_=std::make_shared<std::string>(pJson[pMasqueradingVector[62]].asString());
        }
    }
    if(!pMasqueradingVector[63].empty() && pJson.isMember(pMasqueradingVector[63]))
    {
        dirtyFlag_[63] = true;
        if(!pJson[pMasqueradingVector[63]].isNull())
        {
            einVermoegen_=std::make_shared<double>(pJson[pMasqueradingVector[63]].asDouble());
        }
    }
    if(!pMasqueradingVector[64].empty() && pJson.isMember(pMasqueradingVector[64]))
    {
        dirtyFlag_[64] = true;
        if(!pJson[pMasqueradingVector[64]].isNull())
        {
            segmentierungCd_=std::make_shared<double>(pJson[pMasqueradingVector[64]].asDouble());
        }
    }
    if(!pMasqueradingVector[65].empty() && pJson.isMember(pMasqueradingVector[65]))
    {
        dirtyFlag_[65] = true;
        if(!pJson[pMasqueradingVector[65]].isNull())
        {
            aktid_=std::make_shared<double>(pJson[pMasqueradingVector[65]].asDouble());
        }
    }
    if(!pMasqueradingVector[66].empty() && pJson.isMember(pMasqueradingVector[66]))
    {
        dirtyFlag_[66] = true;
        if(!pJson[pMasqueradingVector[66]].isNull())
        {
            validid_=std::make_shared<double>(pJson[pMasqueradingVector[66]].asDouble());
        }
    }
    if(!pMasqueradingVector[67].empty() && pJson.isMember(pMasqueradingVector[67]))
    {
        dirtyFlag_[67] = true;
        if(!pJson[pMasqueradingVector[67]].isNull())
        {
            validCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[67]].asString());
        }
    }
    if(!pMasqueradingVector[68].empty() && pJson.isMember(pMasqueradingVector[68]))
    {
        dirtyFlag_[68] = true;
        if(!pJson[pMasqueradingVector[68]].isNull())
        {
            validuser_=std::make_shared<std::string>(pJson[pMasqueradingVector[68]].asString());
        }
    }
    if(!pMasqueradingVector[69].empty() && pJson.isMember(pMasqueradingVector[69]))
    {
        dirtyFlag_[69] = true;
        if(!pJson[pMasqueradingVector[69]].isNull())
        {
            encSalt_=std::make_shared<std::string>(pJson[pMasqueradingVector[69]].asString());
        }
    }
    if(!pMasqueradingVector[70].empty() && pJson.isMember(pMasqueradingVector[70]))
    {
        dirtyFlag_[70] = true;
        if(!pJson[pMasqueradingVector[70]].isNull())
        {
            bezeichnungEnc_=std::make_shared<std::string>(pJson[pMasqueradingVector[70]].asString());
        }
    }
    if(!pMasqueradingVector[71].empty() && pJson.isMember(pMasqueradingVector[71]))
    {
        dirtyFlag_[71] = true;
        if(!pJson[pMasqueradingVector[71]].isNull())
        {
            apsysCdmotifparts_=std::make_shared<std::string>(pJson[pMasqueradingVector[71]].asString());
        }
    }
    if(!pMasqueradingVector[72].empty() && pJson.isMember(pMasqueradingVector[72]))
    {
        dirtyFlag_[72] = true;
        if(!pJson[pMasqueradingVector[72]].isNull())
        {
            apsysCdindus0s_=std::make_shared<std::string>(pJson[pMasqueradingVector[72]].asString());
        }
    }
    if(!pMasqueradingVector[73].empty() && pJson.isMember(pMasqueradingVector[73]))
    {
        dirtyFlag_[73] = true;
        if(!pJson[pMasqueradingVector[73]].isNull())
        {
            apsysFlagpreavisexec_=std::make_shared<std::string>(pJson[pMasqueradingVector[73]].asString());
        }
    }
    if(!pMasqueradingVector[74].empty() && pJson.isMember(pMasqueradingVector[74]))
    {
        dirtyFlag_[74] = true;
        if(!pJson[pMasqueradingVector[74]].isNull())
        {
            apsysCdaviobispecc_=std::make_shared<std::string>(pJson[pMasqueradingVector[74]].asString());
        }
    }
    if(!pMasqueradingVector[75].empty() && pJson.isMember(pMasqueradingVector[75]))
    {
        dirtyFlag_[75] = true;
        if(!pJson[pMasqueradingVector[75]].isNull())
        {
            apsysFlaghisperc_=std::make_shared<std::string>(pJson[pMasqueradingVector[75]].asString());
        }
    }
    if(!pMasqueradingVector[76].empty() && pJson.isMember(pMasqueradingVector[76]))
    {
        dirtyFlag_[76] = true;
        if(!pJson[pMasqueradingVector[76]].isNull())
        {
            apsysRepamanuc_=std::make_shared<std::string>(pJson[pMasqueradingVector[76]].asString());
        }
    }
    if(!pMasqueradingVector[77].empty() && pJson.isMember(pMasqueradingVector[77]))
    {
        dirtyFlag_[77] = true;
        if(!pJson[pMasqueradingVector[77]].isNull())
        {
            apsysPerdevcalc_=std::make_shared<std::string>(pJson[pMasqueradingVector[77]].asString());
        }
    }
    if(!pMasqueradingVector[78].empty() && pJson.isMember(pMasqueradingVector[78]))
    {
        dirtyFlag_[78] = true;
        if(!pJson[pMasqueradingVector[78]].isNull())
        {
            apsysFlaguktaxc_=std::make_shared<std::string>(pJson[pMasqueradingVector[78]].asString());
        }
    }
    if(!pMasqueradingVector[79].empty() && pJson.isMember(pMasqueradingVector[79]))
    {
        dirtyFlag_[79] = true;
        if(!pJson[pMasqueradingVector[79]].isNull())
        {
            apsysCdnogas_=std::make_shared<std::string>(pJson[pMasqueradingVector[79]].asString());
        }
    }
    if(!pMasqueradingVector[80].empty() && pJson.isMember(pMasqueradingVector[80]))
    {
        dirtyFlag_[80] = true;
        if(!pJson[pMasqueradingVector[80]].isNull())
        {
            apsysStatfiscc_=std::make_shared<std::string>(pJson[pMasqueradingVector[80]].asString());
        }
    }
    if(!pMasqueradingVector[81].empty() && pJson.isMember(pMasqueradingVector[81]))
    {
        dirtyFlag_[81] = true;
        if(!pJson[pMasqueradingVector[81]].isNull())
        {
            apsysFlagfwti_=std::make_shared<std::string>(pJson[pMasqueradingVector[81]].asString());
        }
    }
    if(!pMasqueradingVector[82].empty() && pJson.isMember(pMasqueradingVector[82]))
    {
        dirtyFlag_[82] = true;
        if(!pJson[pMasqueradingVector[82]].isNull())
        {
            apsysFlagfwtuknrsdi_=std::make_shared<std::string>(pJson[pMasqueradingVector[82]].asString());
        }
    }
    if(!pMasqueradingVector[83].empty() && pJson.isMember(pMasqueradingVector[83]))
    {
        dirtyFlag_[83] = true;
        if(!pJson[pMasqueradingVector[83]].isNull())
        {
            apsysFlagfwttaxspegei_=std::make_shared<std::string>(pJson[pMasqueradingVector[83]].asString());
        }
    }
    if(!pMasqueradingVector[84].empty() && pJson.isMember(pMasqueradingVector[84]))
    {
        dirtyFlag_[84] = true;
        if(!pJson[pMasqueradingVector[84]].isNull())
        {
            apsysCdfwtoptregulfiscancc_=std::make_shared<std::string>(pJson[pMasqueradingVector[84]].asString());
        }
    }
    if(!pMasqueradingVector[85].empty() && pJson.isMember(pMasqueradingVector[85]))
    {
        dirtyFlag_[85] = true;
        if(!pJson[pMasqueradingVector[85]].isNull())
        {
            apsysCdfwtstatregulfiscancc_=std::make_shared<std::string>(pJson[pMasqueradingVector[85]].asString());
        }
    }
    if(!pMasqueradingVector[86].empty() && pJson.isMember(pMasqueradingVector[86]))
    {
        dirtyFlag_[86] = true;
        if(!pJson[pMasqueradingVector[86]].isNull())
        {
            apsysCdfwtoptregulfiscfutc_=std::make_shared<std::string>(pJson[pMasqueradingVector[86]].asString());
        }
    }
    if(!pMasqueradingVector[87].empty() && pJson.isMember(pMasqueradingVector[87]))
    {
        dirtyFlag_[87] = true;
        if(!pJson[pMasqueradingVector[87]].isNull())
        {
            steuerlandAbgstCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[87]].asString());
        }
    }
    if(!pMasqueradingVector[88].empty() && pJson.isMember(pMasqueradingVector[88]))
    {
        dirtyFlag_[88] = true;
        if(!pJson[pMasqueradingVector[88]].isNull())
        {
            apsysCdnatures_=std::make_shared<std::string>(pJson[pMasqueradingVector[88]].asString());
        }
    }
    if(!pMasqueradingVector[89].empty() && pJson.isMember(pMasqueradingVector[89]))
    {
        dirtyFlag_[89] = true;
        if(!pJson[pMasqueradingVector[89]].isNull())
        {
            apsysShnas_=std::make_shared<std::string>(pJson[pMasqueradingVector[89]].asString());
        }
    }
    if(!pMasqueradingVector[90].empty() && pJson.isMember(pMasqueradingVector[90]))
    {
        dirtyFlag_[90] = true;
        if(!pJson[pMasqueradingVector[90]].isNull())
        {
            apsysCdpyhqdomis_=std::make_shared<std::string>(pJson[pMasqueradingVector[90]].asString());
        }
    }
    if(!pMasqueradingVector[91].empty() && pJson.isMember(pMasqueradingVector[91]))
    {
        dirtyFlag_[91] = true;
        if(!pJson[pMasqueradingVector[91]].isNull())
        {
            apsysCdpermi_=std::make_shared<double>(pJson[pMasqueradingVector[91]].asDouble());
        }
    }
    if(!pMasqueradingVector[92].empty() && pJson.isMember(pMasqueradingVector[92]))
    {
        dirtyFlag_[92] = true;
        if(!pJson[pMasqueradingVector[92]].isNull())
        {
            apsysIdrcis_=std::make_shared<std::string>(pJson[pMasqueradingVector[92]].asString());
        }
    }
    if(!pMasqueradingVector[93].empty() && pJson.isMember(pMasqueradingVector[93]))
    {
        dirtyFlag_[93] = true;
        if(!pJson[pMasqueradingVector[93]].isNull())
        {
            apsysFlagisttc_=std::make_shared<std::string>(pJson[pMasqueradingVector[93]].asString());
        }
    }
    if(!pMasqueradingVector[94].empty() && pJson.isMember(pMasqueradingVector[94]))
    {
        dirtyFlag_[94] = true;
        if(!pJson[pMasqueradingVector[94]].isNull())
        {
            apsysDevevals_=std::make_shared<std::string>(pJson[pMasqueradingVector[94]].asString());
        }
    }
    if(!pMasqueradingVector[95].empty() && pJson.isMember(pMasqueradingVector[95]))
    {
        dirtyFlag_[95] = true;
        if(!pJson[pMasqueradingVector[95]].isNull())
        {
            apsysIdstrucs_=std::make_shared<std::string>(pJson[pMasqueradingVector[95]].asString());
        }
    }
    if(!pMasqueradingVector[96].empty() && pJson.isMember(pMasqueradingVector[96]))
    {
        dirtyFlag_[96] = true;
        if(!pJson[pMasqueradingVector[96]].isNull())
        {
            apsysSuiviagts_=std::make_shared<std::string>(pJson[pMasqueradingVector[96]].asString());
        }
    }
    if(!pMasqueradingVector[97].empty() && pJson.isMember(pMasqueradingVector[97]))
    {
        dirtyFlag_[97] = true;
        if(!pJson[pMasqueradingVector[97]].isNull())
        {
            apsysCdinduscssfs_=std::make_shared<std::string>(pJson[pMasqueradingVector[97]].asString());
        }
    }
    if(!pMasqueradingVector[98].empty() && pJson.isMember(pMasqueradingVector[98]))
    {
        dirtyFlag_[98] = true;
        if(!pJson[pMasqueradingVector[98]].isNull())
        {
            apsysCdindusbluxs_=std::make_shared<std::string>(pJson[pMasqueradingVector[98]].asString());
        }
    }
    if(!pMasqueradingVector[99].empty() && pJson.isMember(pMasqueradingVector[99]))
    {
        dirtyFlag_[99] = true;
        if(!pJson[pMasqueradingVector[99]].isNull())
        {
            apsysCdindussbuba_=std::make_shared<std::string>(pJson[pMasqueradingVector[99]].asString());
        }
    }
    if(!pMasqueradingVector[100].empty() && pJson.isMember(pMasqueradingVector[100]))
    {
        dirtyFlag_[100] = true;
        if(!pJson[pMasqueradingVector[100]].isNull())
        {
            apsysCdindussbns_=std::make_shared<std::string>(pJson[pMasqueradingVector[100]].asString());
        }
    }
    if(!pMasqueradingVector[101].empty() && pJson.isMember(pMasqueradingVector[101]))
    {
        dirtyFlag_[101] = true;
        if(!pJson[pMasqueradingVector[101]].isNull())
        {
            apsysGrmtevals_=std::make_shared<std::string>(pJson[pMasqueradingVector[101]].asString());
        }
    }
    if(!pMasqueradingVector[102].empty() && pJson.isMember(pMasqueradingVector[102]))
    {
        dirtyFlag_[102] = true;
        if(!pJson[pMasqueradingVector[102]].isNull())
        {
            apsysIdpocs_=std::make_shared<std::string>(pJson[pMasqueradingVector[102]].asString());
        }
    }
    if(!pMasqueradingVector[103].empty() && pJson.isMember(pMasqueradingVector[103]))
    {
        dirtyFlag_[103] = true;
        if(!pJson[pMasqueradingVector[103]].isNull())
        {
            apsysInfo_=std::make_shared<std::string>(pJson[pMasqueradingVector[103]].asString());
        }
    }
    if(!pMasqueradingVector[104].empty() && pJson.isMember(pMasqueradingVector[104]))
    {
        dirtyFlag_[104] = true;
        if(!pJson[pMasqueradingVector[104]].isNull())
        {
            apsysIdents_=std::make_shared<std::string>(pJson[pMasqueradingVector[104]].asString());
        }
    }
    if(!pMasqueradingVector[105].empty() && pJson.isMember(pMasqueradingVector[105]))
    {
        dirtyFlag_[105] = true;
        if(!pJson[pMasqueradingVector[105]].isNull())
        {
            apsysStatusOpec_=std::make_shared<std::string>(pJson[pMasqueradingVector[105]].asString());
        }
    }
    if(!pMasqueradingVector[106].empty() && pJson.isMember(pMasqueradingVector[106]))
    {
        dirtyFlag_[106] = true;
        if(!pJson[pMasqueradingVector[106]].isNull())
        {
            apsysErri_=std::make_shared<double>(pJson[pMasqueradingVector[106]].asDouble());
        }
    }
    if(!pMasqueradingVector[107].empty() && pJson.isMember(pMasqueradingVector[107]))
    {
        dirtyFlag_[107] = true;
        if(!pJson[pMasqueradingVector[107]].isNull())
        {
            nationalitaet2Cd_=std::make_shared<std::string>(pJson[pMasqueradingVector[107]].asString());
        }
    }
    if(!pMasqueradingVector[108].empty() && pJson.isMember(pMasqueradingVector[108]))
    {
        dirtyFlag_[108] = true;
        if(!pJson[pMasqueradingVector[108]].isNull())
        {
            nationalitaet3Cd_=std::make_shared<std::string>(pJson[pMasqueradingVector[108]].asString());
        }
    }
    if(!pMasqueradingVector[109].empty() && pJson.isMember(pMasqueradingVector[109]))
    {
        dirtyFlag_[109] = true;
        if(!pJson[pMasqueradingVector[109]].isNull())
        {
            vermoegensursprung2Cd_=std::make_shared<std::string>(pJson[pMasqueradingVector[109]].asString());
        }
    }
    if(!pMasqueradingVector[110].empty() && pJson.isMember(pMasqueradingVector[110]))
    {
        dirtyFlag_[110] = true;
        if(!pJson[pMasqueradingVector[110]].isNull())
        {
            vermoegensursprung2_=std::make_shared<std::string>(pJson[pMasqueradingVector[110]].asString());
        }
    }
    if(!pMasqueradingVector[111].empty() && pJson.isMember(pMasqueradingVector[111]))
    {
        dirtyFlag_[111] = true;
        if(!pJson[pMasqueradingVector[111]].isNull())
        {
            approvalStep1Cd_=std::make_shared<std::string>(pJson[pMasqueradingVector[111]].asString());
        }
    }
    if(!pMasqueradingVector[112].empty() && pJson.isMember(pMasqueradingVector[112]))
    {
        dirtyFlag_[112] = true;
        if(!pJson[pMasqueradingVector[112]].isNull())
        {
            approvalStep1User_=std::make_shared<std::string>(pJson[pMasqueradingVector[112]].asString());
        }
    }
    if(!pMasqueradingVector[113].empty() && pJson.isMember(pMasqueradingVector[113]))
    {
        dirtyFlag_[113] = true;
        if(!pJson[pMasqueradingVector[113]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[113]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep1Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[114].empty() && pJson.isMember(pMasqueradingVector[114]))
    {
        dirtyFlag_[114] = true;
        if(!pJson[pMasqueradingVector[114]].isNull())
        {
            approvalStep2Cd_=std::make_shared<std::string>(pJson[pMasqueradingVector[114]].asString());
        }
    }
    if(!pMasqueradingVector[115].empty() && pJson.isMember(pMasqueradingVector[115]))
    {
        dirtyFlag_[115] = true;
        if(!pJson[pMasqueradingVector[115]].isNull())
        {
            approvalStep2User_=std::make_shared<std::string>(pJson[pMasqueradingVector[115]].asString());
        }
    }
    if(!pMasqueradingVector[116].empty() && pJson.isMember(pMasqueradingVector[116]))
    {
        dirtyFlag_[116] = true;
        if(!pJson[pMasqueradingVector[116]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[116]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep2Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[117].empty() && pJson.isMember(pMasqueradingVector[117]))
    {
        dirtyFlag_[117] = true;
        if(!pJson[pMasqueradingVector[117]].isNull())
        {
            approvalStep3Cd_=std::make_shared<std::string>(pJson[pMasqueradingVector[117]].asString());
        }
    }
    if(!pMasqueradingVector[118].empty() && pJson.isMember(pMasqueradingVector[118]))
    {
        dirtyFlag_[118] = true;
        if(!pJson[pMasqueradingVector[118]].isNull())
        {
            approvalStep3User_=std::make_shared<std::string>(pJson[pMasqueradingVector[118]].asString());
        }
    }
    if(!pMasqueradingVector[119].empty() && pJson.isMember(pMasqueradingVector[119]))
    {
        dirtyFlag_[119] = true;
        if(!pJson[pMasqueradingVector[119]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[119]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep3Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[120].empty() && pJson.isMember(pMasqueradingVector[120]))
    {
        dirtyFlag_[120] = true;
        if(!pJson[pMasqueradingVector[120]].isNull())
        {
            approvalStep4Cd_=std::make_shared<std::string>(pJson[pMasqueradingVector[120]].asString());
        }
    }
    if(!pMasqueradingVector[121].empty() && pJson.isMember(pMasqueradingVector[121]))
    {
        dirtyFlag_[121] = true;
        if(!pJson[pMasqueradingVector[121]].isNull())
        {
            approvalStep4User_=std::make_shared<std::string>(pJson[pMasqueradingVector[121]].asString());
        }
    }
    if(!pMasqueradingVector[122].empty() && pJson.isMember(pMasqueradingVector[122]))
    {
        dirtyFlag_[122] = true;
        if(!pJson[pMasqueradingVector[122]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[122]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep4Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[123].empty() && pJson.isMember(pMasqueradingVector[123]))
    {
        dirtyFlag_[123] = true;
        if(!pJson[pMasqueradingVector[123]].isNull())
        {
            approvalStep5Cd_=std::make_shared<std::string>(pJson[pMasqueradingVector[123]].asString());
        }
    }
    if(!pMasqueradingVector[124].empty() && pJson.isMember(pMasqueradingVector[124]))
    {
        dirtyFlag_[124] = true;
        if(!pJson[pMasqueradingVector[124]].isNull())
        {
            approvalStep5User_=std::make_shared<std::string>(pJson[pMasqueradingVector[124]].asString());
        }
    }
    if(!pMasqueradingVector[125].empty() && pJson.isMember(pMasqueradingVector[125]))
    {
        dirtyFlag_[125] = true;
        if(!pJson[pMasqueradingVector[125]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[125]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep5Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[126].empty() && pJson.isMember(pMasqueradingVector[126]))
    {
        dirtyFlag_[126] = true;
        if(!pJson[pMasqueradingVector[126]].isNull())
        {
            approvalStep1Bem_=std::make_shared<std::string>(pJson[pMasqueradingVector[126]].asString());
        }
    }
    if(!pMasqueradingVector[127].empty() && pJson.isMember(pMasqueradingVector[127]))
    {
        dirtyFlag_[127] = true;
        if(!pJson[pMasqueradingVector[127]].isNull())
        {
            approvalStep2Bem_=std::make_shared<std::string>(pJson[pMasqueradingVector[127]].asString());
        }
    }
    if(!pMasqueradingVector[128].empty() && pJson.isMember(pMasqueradingVector[128]))
    {
        dirtyFlag_[128] = true;
        if(!pJson[pMasqueradingVector[128]].isNull())
        {
            approvalStep3Bem_=std::make_shared<std::string>(pJson[pMasqueradingVector[128]].asString());
        }
    }
    if(!pMasqueradingVector[129].empty() && pJson.isMember(pMasqueradingVector[129]))
    {
        dirtyFlag_[129] = true;
        if(!pJson[pMasqueradingVector[129]].isNull())
        {
            approvalStep4Bem_=std::make_shared<std::string>(pJson[pMasqueradingVector[129]].asString());
        }
    }
    if(!pMasqueradingVector[130].empty() && pJson.isMember(pMasqueradingVector[130]))
    {
        dirtyFlag_[130] = true;
        if(!pJson[pMasqueradingVector[130]].isNull())
        {
            approvalStep5Bem_=std::make_shared<std::string>(pJson[pMasqueradingVector[130]].asString());
        }
    }
    if(!pMasqueradingVector[131].empty() && pJson.isMember(pMasqueradingVector[131]))
    {
        dirtyFlag_[131] = true;
        if(!pJson[pMasqueradingVector[131]].isNull())
        {
            approvalStep1AssesCd_=std::make_shared<double>(pJson[pMasqueradingVector[131]].asDouble());
        }
    }
    if(!pMasqueradingVector[132].empty() && pJson.isMember(pMasqueradingVector[132]))
    {
        dirtyFlag_[132] = true;
        if(!pJson[pMasqueradingVector[132]].isNull())
        {
            approvalStep2AssesCd_=std::make_shared<double>(pJson[pMasqueradingVector[132]].asDouble());
        }
    }
    if(!pMasqueradingVector[133].empty() && pJson.isMember(pMasqueradingVector[133]))
    {
        dirtyFlag_[133] = true;
        if(!pJson[pMasqueradingVector[133]].isNull())
        {
            approvalStep3AssesCd_=std::make_shared<double>(pJson[pMasqueradingVector[133]].asDouble());
        }
    }
    if(!pMasqueradingVector[134].empty() && pJson.isMember(pMasqueradingVector[134]))
    {
        dirtyFlag_[134] = true;
        if(!pJson[pMasqueradingVector[134]].isNull())
        {
            approvalStep4AssesCd_=std::make_shared<double>(pJson[pMasqueradingVector[134]].asDouble());
        }
    }
    if(!pMasqueradingVector[135].empty() && pJson.isMember(pMasqueradingVector[135]))
    {
        dirtyFlag_[135] = true;
        if(!pJson[pMasqueradingVector[135]].isNull())
        {
            approvalStep5AssesCd_=std::make_shared<double>(pJson[pMasqueradingVector[135]].asDouble());
        }
    }
    if(!pMasqueradingVector[136].empty() && pJson.isMember(pMasqueradingVector[136]))
    {
        dirtyFlag_[136] = true;
        if(!pJson[pMasqueradingVector[136]].isNull())
        {
            approvalStatusCd_=std::make_shared<double>(pJson[pMasqueradingVector[136]].asDouble());
        }
    }
    if(!pMasqueradingVector[137].empty() && pJson.isMember(pMasqueradingVector[137]))
    {
        dirtyFlag_[137] = true;
        if(!pJson[pMasqueradingVector[137]].isNull())
        {
            clientStatusCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[137]].asString());
        }
    }
    if(!pMasqueradingVector[138].empty() && pJson.isMember(pMasqueradingVector[138]))
    {
        dirtyFlag_[138] = true;
        if(!pJson[pMasqueradingVector[138]].isNull())
        {
            dischargeOrdersCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[138]].asString());
        }
    }
    if(!pMasqueradingVector[139].empty() && pJson.isMember(pMasqueradingVector[139]))
    {
        dirtyFlag_[139] = true;
        if(!pJson[pMasqueradingVector[139]].isNull())
        {
            printSummaryHoldmailOnlyCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[139]].asString());
        }
    }
    if(!pMasqueradingVector[140].empty() && pJson.isMember(pMasqueradingVector[140]))
    {
        dirtyFlag_[140] = true;
        if(!pJson[pMasqueradingVector[140]].isNull())
        {
            ebankingContractCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[140]].asString());
        }
    }
    if(!pMasqueradingVector[141].empty() && pJson.isMember(pMasqueradingVector[141]))
    {
        dirtyFlag_[141] = true;
        if(!pJson[pMasqueradingVector[141]].isNull())
        {
            ebankingContractLanguageCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[141]].asString());
        }
    }
    if(!pMasqueradingVector[142].empty() && pJson.isMember(pMasqueradingVector[142]))
    {
        dirtyFlag_[142] = true;
        if(!pJson[pMasqueradingVector[142]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[142]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtechdiaryl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[143].empty() && pJson.isMember(pMasqueradingVector[143]))
    {
        dirtyFlag_[143] = true;
        if(!pJson[pMasqueradingVector[143]].isNull())
        {
            apsysMotdiarys_=std::make_shared<std::string>(pJson[pMasqueradingVector[143]].asString());
        }
    }
    if(!pMasqueradingVector[144].empty() && pJson.isMember(pMasqueradingVector[144]))
    {
        dirtyFlag_[144] = true;
        if(!pJson[pMasqueradingVector[144]].isNull())
        {
            apsysIdtypcliirss_=std::make_shared<std::string>(pJson[pMasqueradingVector[144]].asString());
        }
    }
    if(!pMasqueradingVector[145].empty() && pJson.isMember(pMasqueradingVector[145]))
    {
        dirtyFlag_[145] = true;
        if(!pJson[pMasqueradingVector[145]].isNull())
        {
            apsysIdrciqis_=std::make_shared<std::string>(pJson[pMasqueradingVector[145]].asString());
        }
    }
    if(!pMasqueradingVector[146].empty() && pJson.isMember(pMasqueradingVector[146]))
    {
        dirtyFlag_[146] = true;
        if(!pJson[pMasqueradingVector[146]].isNull())
        {
            apsysIdrcifatcas_=std::make_shared<std::string>(pJson[pMasqueradingVector[146]].asString());
        }
    }
    if(!pMasqueradingVector[147].empty() && pJson.isMember(pMasqueradingVector[147]))
    {
        dirtyFlag_[147] = true;
        if(!pJson[pMasqueradingVector[147]].isNull())
        {
            mailingTarifTypeCd_=std::make_shared<double>(pJson[pMasqueradingVector[147]].asDouble());
        }
    }
    if(!pMasqueradingVector[148].empty() && pJson.isMember(pMasqueradingVector[148]))
    {
        dirtyFlag_[148] = true;
        if(!pJson[pMasqueradingVector[148]].isNull())
        {
            registeredCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[148]].asString());
        }
    }
    if(!pMasqueradingVector[149].empty() && pJson.isMember(pMasqueradingVector[149]))
    {
        dirtyFlag_[149] = true;
        if(!pJson[pMasqueradingVector[149]].isNull())
        {
            registeredMailCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[149]].asString());
        }
    }
    if(!pMasqueradingVector[150].empty() && pJson.isMember(pMasqueradingVector[150]))
    {
        dirtyFlag_[150] = true;
        if(!pJson[pMasqueradingVector[150]].isNull())
        {
            apsysNbperscpartiel_=std::make_shared<double>(pJson[pMasqueradingVector[150]].asDouble());
        }
    }
    if(!pMasqueradingVector[151].empty() && pJson.isMember(pMasqueradingVector[151]))
    {
        dirtyFlag_[151] = true;
        if(!pJson[pMasqueradingVector[151]].isNull())
        {
            assetValueTierCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[151]].asString());
        }
    }
    if(!pMasqueradingVector[152].empty() && pJson.isMember(pMasqueradingVector[152]))
    {
        dirtyFlag_[152] = true;
        if(!pJson[pMasqueradingVector[152]].isNull())
        {
            relationshipTypeAmlCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[152]].asString());
        }
    }
    if(!pMasqueradingVector[153].empty() && pJson.isMember(pMasqueradingVector[153]))
    {
        dirtyFlag_[153] = true;
        if(!pJson[pMasqueradingVector[153]].isNull())
        {
            cbAssetValueTierCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[153]].asString());
        }
    }
    if(!pMasqueradingVector[154].empty() && pJson.isMember(pMasqueradingVector[154]))
    {
        dirtyFlag_[154] = true;
        if(!pJson[pMasqueradingVector[154]].isNull())
        {
            approvalScore_=std::make_shared<double>(pJson[pMasqueradingVector[154]].asDouble());
        }
    }
    if(!pMasqueradingVector[155].empty() && pJson.isMember(pMasqueradingVector[155]))
    {
        dirtyFlag_[155] = true;
        if(!pJson[pMasqueradingVector[155]].isNull())
        {
            approvalScoreSteps_=std::make_shared<double>(pJson[pMasqueradingVector[155]].asDouble());
        }
    }
    if(!pMasqueradingVector[156].empty() && pJson.isMember(pMasqueradingVector[156]))
    {
        dirtyFlag_[156] = true;
        if(!pJson[pMasqueradingVector[156]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[156]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtdebpartl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[157].empty() && pJson.isMember(pMasqueradingVector[157]))
    {
        dirtyFlag_[157] = true;
        if(!pJson[pMasqueradingVector[157]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[157]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtfinpartl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[158].empty() && pJson.isMember(pMasqueradingVector[158]))
    {
        dirtyFlag_[158] = true;
        if(!pJson[pMasqueradingVector[158]].isNull())
        {
            apsysCdmotifclos_=std::make_shared<std::string>(pJson[pMasqueradingVector[158]].asString());
        }
    }
    if(!pMasqueradingVector[159].empty() && pJson.isMember(pMasqueradingVector[159]))
    {
        dirtyFlag_[159] = true;
        if(!pJson[pMasqueradingVector[159]].isNull())
        {
            apsysCdnaturecpartieemirc_=std::make_shared<std::string>(pJson[pMasqueradingVector[159]].asString());
        }
    }
    if(!pMasqueradingVector[160].empty() && pJson.isMember(pMasqueradingVector[160]))
    {
        dirtyFlag_[160] = true;
        if(!pJson[pMasqueradingVector[160]].isNull())
        {
            apsysFlagotheremirc_=std::make_shared<std::string>(pJson[pMasqueradingVector[160]].asString());
        }
    }
    if(!pMasqueradingVector[161].empty() && pJson.isMember(pMasqueradingVector[161]))
    {
        dirtyFlag_[161] = true;
        if(!pJson[pMasqueradingVector[161]].isNull())
        {
            apsysCdindusemirs_=std::make_shared<std::string>(pJson[pMasqueradingVector[161]].asString());
        }
    }
    if(!pMasqueradingVector[162].empty() && pJson.isMember(pMasqueradingVector[162]))
    {
        dirtyFlag_[162] = true;
        if(!pJson[pMasqueradingVector[162]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[162]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                openedInApsysDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[163].empty() && pJson.isMember(pMasqueradingVector[163]))
    {
        dirtyFlag_[163] = true;
        if(!pJson[pMasqueradingVector[163]].isNull())
        {
            apsysCdnaturecpartiefmiac_=std::make_shared<std::string>(pJson[pMasqueradingVector[163]].asString());
        }
    }
    if(!pMasqueradingVector[164].empty() && pJson.isMember(pMasqueradingVector[164]))
    {
        dirtyFlag_[164] = true;
        if(!pJson[pMasqueradingVector[164]].isNull())
        {
            ebankingClosedCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[164]].asString());
        }
    }
    if(!pMasqueradingVector[165].empty() && pJson.isMember(pMasqueradingVector[165]))
    {
        dirtyFlag_[165] = true;
        if(!pJson[pMasqueradingVector[165]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[165]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                ebankingClosingdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[166].empty() && pJson.isMember(pMasqueradingVector[166]))
    {
        dirtyFlag_[166] = true;
        if(!pJson[pMasqueradingVector[166]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[166]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                kycReviewProcessStartDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[167].empty() && pJson.isMember(pMasqueradingVector[167]))
    {
        dirtyFlag_[167] = true;
        if(!pJson[pMasqueradingVector[167]].isNull())
        {
            remarks_=std::make_shared<std::string>(pJson[pMasqueradingVector[167]].asString());
        }
    }
    if(!pMasqueradingVector[168].empty() && pJson.isMember(pMasqueradingVector[168]))
    {
        dirtyFlag_[168] = true;
        if(!pJson[pMasqueradingVector[168]].isNull())
        {
            transactionBlCountryCd_=std::make_shared<double>(pJson[pMasqueradingVector[168]].asDouble());
        }
    }
    if(!pMasqueradingVector[169].empty() && pJson.isMember(pMasqueradingVector[169]))
    {
        dirtyFlag_[169] = true;
        if(!pJson[pMasqueradingVector[169]].isNull())
        {
            clientgroupCd_=std::make_shared<double>(pJson[pMasqueradingVector[169]].asDouble());
        }
    }
    if(!pMasqueradingVector[170].empty() && pJson.isMember(pMasqueradingVector[170]))
    {
        dirtyFlag_[170] = true;
        if(!pJson[pMasqueradingVector[170]].isNull())
        {
            riskindexCalc_=std::make_shared<double>(pJson[pMasqueradingVector[170]].asDouble());
        }
    }
    if(!pMasqueradingVector[171].empty() && pJson.isMember(pMasqueradingVector[171]))
    {
        dirtyFlag_[171] = true;
        if(!pJson[pMasqueradingVector[171]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[171]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                lastCalcCriMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[172].empty() && pJson.isMember(pMasqueradingVector[172]))
    {
        dirtyFlag_[172] = true;
        if(!pJson[pMasqueradingVector[172]].isNull())
        {
            risikokategorieCalcCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[172]].asString());
        }
    }
    if(!pMasqueradingVector[173].empty() && pJson.isMember(pMasqueradingVector[173]))
    {
        dirtyFlag_[173] = true;
        if(!pJson[pMasqueradingVector[173]].isNull())
        {
            riskindexGroup_=std::make_shared<double>(pJson[pMasqueradingVector[173]].asDouble());
        }
    }
    if(!pMasqueradingVector[174].empty() && pJson.isMember(pMasqueradingVector[174]))
    {
        dirtyFlag_[174] = true;
        if(!pJson[pMasqueradingVector[174]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[174]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                estAmountRemWithMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[175].empty() && pJson.isMember(pMasqueradingVector[175]))
    {
        dirtyFlag_[175] = true;
        if(!pJson[pMasqueradingVector[175]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[175]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                gesamtvermoegenMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[176].empty() && pJson.isMember(pMasqueradingVector[176]))
    {
        dirtyFlag_[176] = true;
        if(!pJson[pMasqueradingVector[176]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[176]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                transactBlCountryMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[177].empty() && pJson.isMember(pMasqueradingVector[177]))
    {
        dirtyFlag_[177] = true;
        if(!pJson[pMasqueradingVector[177]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[177]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                accountpurposeMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[178].empty() && pJson.isMember(pMasqueradingVector[178]))
    {
        dirtyFlag_[178] = true;
        if(!pJson[pMasqueradingVector[178]].isNull())
        {
            apsysFlagdeldatapersi_=std::make_shared<std::string>(pJson[pMasqueradingVector[178]].asString());
        }
    }
    if(!pMasqueradingVector[179].empty() && pJson.isMember(pMasqueradingVector[179]))
    {
        dirtyFlag_[179] = true;
        if(!pJson[pMasqueradingVector[179]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[179]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtwaitdeldatapersl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[180].empty() && pJson.isMember(pMasqueradingVector[180]))
    {
        dirtyFlag_[180] = true;
        if(!pJson[pMasqueradingVector[180]].isNull())
        {
            nameEnc_=std::make_shared<std::string>(pJson[pMasqueradingVector[180]].asString());
        }
    }
    if(!pMasqueradingVector[181].empty() && pJson.isMember(pMasqueradingVector[181]))
    {
        dirtyFlag_[181] = true;
        if(!pJson[pMasqueradingVector[181]].isNull())
        {
            inApsysTempEntsperrenCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[181]].asString());
        }
    }
    if(!pMasqueradingVector[182].empty() && pJson.isMember(pMasqueradingVector[182]))
    {
        dirtyFlag_[182] = true;
        if(!pJson[pMasqueradingVector[182]].isNull())
        {
            inApsysTempEntspUserid_=std::make_shared<std::string>(pJson[pMasqueradingVector[182]].asString());
        }
    }
    if(!pMasqueradingVector[183].empty() && pJson.isMember(pMasqueradingVector[183]))
    {
        dirtyFlag_[183] = true;
        if(!pJson[pMasqueradingVector[183]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[183]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                inApsysTempEntspDatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[184].empty() && pJson.isMember(pMasqueradingVector[184]))
    {
        dirtyFlag_[184] = true;
        if(!pJson[pMasqueradingVector[184]].isNull())
        {
            apsysCdregs_=std::make_shared<std::string>(pJson[pMasqueradingVector[184]].asString());
        }
    }
    if(!pMasqueradingVector[185].empty() && pJson.isMember(pMasqueradingVector[185]))
    {
        dirtyFlag_[185] = true;
        if(!pJson[pMasqueradingVector[185]].isNull())
        {
            retentionOnHold_=std::make_shared<std::string>(pJson[pMasqueradingVector[185]].asString());
        }
    }
    if(!pMasqueradingVector[186].empty() && pJson.isMember(pMasqueradingVector[186]))
    {
        dirtyFlag_[186] = true;
        if(!pJson[pMasqueradingVector[186]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[186]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                retentionOnHoldDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[187].empty() && pJson.isMember(pMasqueradingVector[187]))
    {
        dirtyFlag_[187] = true;
        if(!pJson[pMasqueradingVector[187]].isNull())
        {
            retentionOnHoldReason_=std::make_shared<std::string>(pJson[pMasqueradingVector[187]].asString());
        }
    }
    if(!pMasqueradingVector[188].empty() && pJson.isMember(pMasqueradingVector[188]))
    {
        dirtyFlag_[188] = true;
        if(!pJson[pMasqueradingVector[188]].isNull())
        {
            logicalErasure_=std::make_shared<std::string>(pJson[pMasqueradingVector[188]].asString());
        }
    }
    if(!pMasqueradingVector[189].empty() && pJson.isMember(pMasqueradingVector[189]))
    {
        dirtyFlag_[189] = true;
        if(!pJson[pMasqueradingVector[189]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[189]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                logicalErasureDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[190].empty() && pJson.isMember(pMasqueradingVector[190]))
    {
        dirtyFlag_[190] = true;
        if(!pJson[pMasqueradingVector[190]].isNull())
        {
            logicalErasureReason_=std::make_shared<std::string>(pJson[pMasqueradingVector[190]].asString());
        }
    }
    if(!pMasqueradingVector[191].empty() && pJson.isMember(pMasqueradingVector[191]))
    {
        dirtyFlag_[191] = true;
        if(!pJson[pMasqueradingVector[191]].isNull())
        {
            complianceMinRiskCategory_=std::make_shared<std::string>(pJson[pMasqueradingVector[191]].asString());
        }
    }
    if(!pMasqueradingVector[192].empty() && pJson.isMember(pMasqueradingVector[192]))
    {
        dirtyFlag_[192] = true;
        if(!pJson[pMasqueradingVector[192]].isNull())
        {
            complianceMinRiskComment_=std::make_shared<std::string>(pJson[pMasqueradingVector[192]].asString());
        }
    }
    if(!pMasqueradingVector[193].empty() && pJson.isMember(pMasqueradingVector[193]))
    {
        dirtyFlag_[193] = true;
        if(!pJson[pMasqueradingVector[193]].isNull())
        {
            clientStructureCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[193]].asString());
        }
    }
    if(!pMasqueradingVector[194].empty() && pJson.isMember(pMasqueradingVector[194]))
    {
        dirtyFlag_[194] = true;
        if(!pJson[pMasqueradingVector[194]].isNull())
        {
            clientSubstructureCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[194]].asString());
        }
    }
}

Kunde::Kunde(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("KUNDENID"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["KUNDENID"].isNull())
        {
            kundenid_=std::make_shared<double>(pJson["KUNDENID"].asDouble());
        }
    }
    if(pJson.isMember("BEZEICHNUNG"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["BEZEICHNUNG"].isNull())
        {
            bezeichnung_=std::make_shared<std::string>(pJson["BEZEICHNUNG"].asString());
        }
    }
    if(pJson.isMember("KUNDESEIT"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["KUNDESEIT"].isNull())
        {
            auto timeStr = pJson["KUNDESEIT"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                kundeseit_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("VERTRAGSPARTEI_CD"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["VERTRAGSPARTEI_CD"].isNull())
        {
            vertragsparteiCd_=std::make_shared<std::string>(pJson["VERTRAGSPARTEI_CD"].asString());
        }
    }
    if(pJson.isMember("LOESCH_CD"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["LOESCH_CD"].isNull())
        {
            loeschCd_=std::make_shared<std::string>(pJson["LOESCH_CD"].asString());
        }
    }
    if(pJson.isMember("LOESCHDATUM"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["LOESCHDATUM"].isNull())
        {
            auto timeStr = pJson["LOESCHDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                loeschdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("CRTDATUM"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["CRTDATUM"].isNull())
        {
            auto timeStr = pJson["CRTDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                crtdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("CRTUSER"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["CRTUSER"].isNull())
        {
            crtuser_=std::make_shared<std::string>(pJson["CRTUSER"].asString());
        }
    }
    if(pJson.isMember("MUTDATUM"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["MUTDATUM"].isNull())
        {
            auto timeStr = pJson["MUTDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                mutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("MUTUSER"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["MUTUSER"].isNull())
        {
            mutuser_=std::make_shared<std::string>(pJson["MUTUSER"].asString());
        }
    }
    if(pJson.isMember("PSEUDOACCOUNT_CD"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["PSEUDOACCOUNT_CD"].isNull())
        {
            pseudoaccountCd_=std::make_shared<std::string>(pJson["PSEUDOACCOUNT_CD"].asString());
        }
    }
    if(pJson.isMember("KUNDEBESUCH"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["KUNDEBESUCH"].isNull())
        {
            auto timeStr = pJson["KUNDEBESUCH"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                kundebesuch_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("BEZEICHNUNGVERTRAG"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["BEZEICHNUNGVERTRAG"].isNull())
        {
            bezeichnungvertrag_=std::make_shared<std::string>(pJson["BEZEICHNUNGVERTRAG"].asString());
        }
    }
    if(pJson.isMember("PSEUDONYM"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["PSEUDONYM"].isNull())
        {
            pseudonym_=std::make_shared<std::string>(pJson["PSEUDONYM"].asString());
        }
    }
    if(pJson.isMember("RECHTSDOMIZIL_CD"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["RECHTSDOMIZIL_CD"].isNull())
        {
            rechtsdomizilCd_=std::make_shared<std::string>(pJson["RECHTSDOMIZIL_CD"].asString());
        }
    }
    if(pJson.isMember("KORRESPONDENZSPRACH_CD"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["KORRESPONDENZSPRACH_CD"].isNull())
        {
            korrespondenzsprachCd_=std::make_shared<std::string>(pJson["KORRESPONDENZSPRACH_CD"].asString());
        }
    }
    if(pJson.isMember("MIT_PROFIL_CD"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["MIT_PROFIL_CD"].isNull())
        {
            mitProfilCd_=std::make_shared<std::string>(pJson["MIT_PROFIL_CD"].asString());
        }
    }
    if(pJson.isMember("GEMEINSCHAFTSKONTO_CD"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["GEMEINSCHAFTSKONTO_CD"].isNull())
        {
            gemeinschaftskontoCd_=std::make_shared<std::string>(pJson["GEMEINSCHAFTSKONTO_CD"].asString());
        }
    }
    if(pJson.isMember("PIN"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["PIN"].isNull())
        {
            pin_=std::make_shared<std::string>(pJson["PIN"].asString());
        }
    }
    if(pJson.isMember("VERWENDUNGSZWECK"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["VERWENDUNGSZWECK"].isNull())
        {
            verwendungszweck_=std::make_shared<std::string>(pJson["VERWENDUNGSZWECK"].asString());
        }
    }
    if(pJson.isMember("IDENTIFIKATIONSART_CD"))
    {
        dirtyFlag_[20]=true;
        if(!pJson["IDENTIFIKATIONSART_CD"].isNull())
        {
            identifikationsartCd_=std::make_shared<std::string>(pJson["IDENTIFIKATIONSART_CD"]["IDENTIFIKATIONSART_CD"].asString());
        }
    }
    if(pJson.isMember("VERMOEGENSURSPRUNG_CD"))
    {
        dirtyFlag_[21]=true;
        if(!pJson["VERMOEGENSURSPRUNG_CD"].isNull())
        {
            vermoegensursprungCd_=std::make_shared<std::string>(pJson["VERMOEGENSURSPRUNG_CD"].asString());
        }
    }
    if(pJson.isMember("VERMOEGENSURSPRUNG"))
    {
        dirtyFlag_[22]=true;
        if(!pJson["VERMOEGENSURSPRUNG"].isNull())
        {
            vermoegensursprung_=std::make_shared<std::string>(pJson["VERMOEGENSURSPRUNG"].asString());
        }
    }
    if(pJson.isMember("GELDVONKONTO"))
    {
        dirtyFlag_[23]=true;
        if(!pJson["GELDVONKONTO"].isNull())
        {
            geldvonkonto_=std::make_shared<std::string>(pJson["GELDVONKONTO"].asString());
        }
    }
    if(pJson.isMember("BISHERIGEBETREUUNG"))
    {
        dirtyFlag_[24]=true;
        if(!pJson["BISHERIGEBETREUUNG"].isNull())
        {
            bisherigebetreuung_=std::make_shared<std::string>(pJson["BISHERIGEBETREUUNG"].asString());
        }
    }
    if(pJson.isMember("BISHERIGEBETREUUNGSEIT"))
    {
        dirtyFlag_[25]=true;
        if(!pJson["BISHERIGEBETREUUNGSEIT"].isNull())
        {
            auto timeStr = pJson["BISHERIGEBETREUUNGSEIT"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                bisherigebetreuungseit_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("MANUALOPEN_CD"))
    {
        dirtyFlag_[26]=true;
        if(!pJson["MANUALOPEN_CD"].isNull())
        {
            manualopenCd_=std::make_shared<std::string>(pJson["MANUALOPEN_CD"].asString());
        }
    }
    if(pJson.isMember("EIN_VERMOEGEN_CD"))
    {
        dirtyFlag_[27]=true;
        if(!pJson["EIN_VERMOEGEN_CD"].isNull())
        {
            einVermoegenCd_=std::make_shared<std::string>(pJson["EIN_VERMOEGEN_CD"].asString());
        }
    }
    if(pJson.isMember("REGIONZAHLUNG_CD"))
    {
        dirtyFlag_[28]=true;
        if(!pJson["REGIONZAHLUNG_CD"].isNull())
        {
            regionzahlungCd_=std::make_shared<std::string>(pJson["REGIONZAHLUNG_CD"].asString());
        }
    }
    if(pJson.isMember("EIN_VERMOEGENART_CD"))
    {
        dirtyFlag_[29]=true;
        if(!pJson["EIN_VERMOEGENART_CD"].isNull())
        {
            einVermoegenartCd_=std::make_shared<std::string>(pJson["EIN_VERMOEGENART_CD"].asString());
        }
    }
    if(pJson.isMember("SPEZ_WUENSCHE_CD"))
    {
        dirtyFlag_[30]=true;
        if(!pJson["SPEZ_WUENSCHE_CD"].isNull())
        {
            spezWuenscheCd_=std::make_shared<std::string>(pJson["SPEZ_WUENSCHE_CD"].asString());
        }
    }
    if(pJson.isMember("MANAGER_CD"))
    {
        dirtyFlag_[31]=true;
        if(!pJson["MANAGER_CD"].isNull())
        {
            managerCd_=std::make_shared<std::string>(pJson["MANAGER_CD"].asString());
        }
    }
    if(pJson.isMember("RISKINDEX"))
    {
        dirtyFlag_[32]=true;
        if(!pJson["RISKINDEX"].isNull())
        {
            riskindex_=std::make_shared<double>(pJson["RISKINDEX"].asDouble());
        }
    }
    if(pJson.isMember("RISKINDEX_GUELTISEIT"))
    {
        dirtyFlag_[33]=true;
        if(!pJson["RISKINDEX_GUELTISEIT"].isNull())
        {
            auto timeStr = pJson["RISKINDEX_GUELTISEIT"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                riskindexGueltiseit_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("RISKINDEX_LETZTEBERECHNUNG"))
    {
        dirtyFlag_[34]=true;
        if(!pJson["RISKINDEX_LETZTEBERECHNUNG"].isNull())
        {
            auto timeStr = pJson["RISKINDEX_LETZTEBERECHNUNG"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                riskindexLetzteberechnung_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("KONTOEROEFFNUNGSART_CD"))
    {
        dirtyFlag_[35]=true;
        if(!pJson["KONTOEROEFFNUNGSART_CD"].isNull())
        {
            kontoeroeffnungsartCd_=std::make_shared<std::string>(pJson["KONTOEROEFFNUNGSART_CD"].asString());
        }
    }
    if(pJson.isMember("RISKINDEXBERECHNEN_CD"))
    {
        dirtyFlag_[36]=true;
        if(!pJson["RISKINDEXBERECHNEN_CD"].isNull())
        {
            riskindexberechnenCd_=std::make_shared<std::string>(pJson["RISKINDEXBERECHNEN_CD"].asString());
        }
    }
    if(pJson.isMember("KUNDENNATUR_CD"))
    {
        dirtyFlag_[37]=true;
        if(!pJson["KUNDENNATUR_CD"].isNull())
        {
            kundennaturCd_=std::make_shared<std::string>(pJson["KUNDENNATUR_CD"].asString());
        }
    }
    if(pJson.isMember("RISIKOKATEGORIE_CD"))
    {
        dirtyFlag_[38]=true;
        if(!pJson["RISIKOKATEGORIE_CD"].isNull())
        {
            risikokategorieCd_=std::make_shared<std::string>(pJson["RISIKOKATEGORIE_CD"].asString());
        }
    }
    if(pJson.isMember("PEP_CD"))
    {
        dirtyFlag_[39]=true;
        if(!pJson["PEP_CD"].isNull())
        {
            pepCd_=std::make_shared<std::string>(pJson["PEP_CD"].asString());
        }
    }
    if(pJson.isMember("SPEZIALKATEGORIE_CD"))
    {
        dirtyFlag_[40]=true;
        if(!pJson["SPEZIALKATEGORIE_CD"].isNull())
        {
            spezialkategorieCd_=std::make_shared<std::string>(pJson["SPEZIALKATEGORIE_CD"].asString());
        }
    }
    if(pJson.isMember("NATURE_CD"))
    {
        dirtyFlag_[41]=true;
        if(!pJson["NATURE_CD"].isNull())
        {
            natureCd_=std::make_shared<std::string>(pJson["NATURE_CD"].asString());
        }
    }
    if(pJson.isMember("NAME"))
    {
        dirtyFlag_[42]=true;
        if(!pJson["NAME"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["NAME"].asString());
        }
    }
    if(pJson.isMember("LEDIGERNAME"))
    {
        dirtyFlag_[43]=true;
        if(!pJson["LEDIGERNAME"].isNull())
        {
            ledigername_=std::make_shared<std::string>(pJson["LEDIGERNAME"].asString());
        }
    }
    if(pJson.isMember("VORNAME"))
    {
        dirtyFlag_[44]=true;
        if(!pJson["VORNAME"].isNull())
        {
            vorname_=std::make_shared<std::string>(pJson["VORNAME"].asString());
        }
    }
    if(pJson.isMember("CDPARTC"))
    {
        dirtyFlag_[45]=true;
        if(!pJson["CDPARTC"].isNull())
        {
            cdpartc_=std::make_shared<std::string>(pJson["CDPARTC"].asString());
        }
    }
    if(pJson.isMember("NATIONALITAET_CD"))
    {
        dirtyFlag_[46]=true;
        if(!pJson["NATIONALITAET_CD"].isNull())
        {
            nationalitaetCd_=std::make_shared<std::string>(pJson["NATIONALITAET_CD"].asString());
        }
    }
    if(pJson.isMember("RISIKOLAND_CD"))
    {
        dirtyFlag_[47]=true;
        if(!pJson["RISIKOLAND_CD"].isNull())
        {
            risikolandCd_=std::make_shared<std::string>(pJson["RISIKOLAND_CD"].asString());
        }
    }
    if(pJson.isMember("PERSOENLICHBEKANNT_CD"))
    {
        dirtyFlag_[48]=true;
        if(!pJson["PERSOENLICHBEKANNT_CD"].isNull())
        {
            persoenlichbekanntCd_=std::make_shared<std::string>(pJson["PERSOENLICHBEKANNT_CD"].asString());
        }
    }
    if(pJson.isMember("RISIKOTAETIGKEIT_CD"))
    {
        dirtyFlag_[49]=true;
        if(!pJson["RISIKOTAETIGKEIT_CD"].isNull())
        {
            risikotaetigkeitCd_=std::make_shared<std::string>(pJson["RISIKOTAETIGKEIT_CD"].asString());
        }
    }
    if(pJson.isMember("STEUERDOMIZIL_CD"))
    {
        dirtyFlag_[50]=true;
        if(!pJson["STEUERDOMIZIL_CD"].isNull())
        {
            steuerdomizilCd_=std::make_shared<std::string>(pJson["STEUERDOMIZIL_CD"].asString());
        }
    }
    if(pJson.isMember("EU_TAXSTATUS_CD"))
    {
        dirtyFlag_[51]=true;
        if(!pJson["EU_TAXSTATUS_CD"].isNull())
        {
            euTaxstatusCd_=std::make_shared<std::string>(pJson["EU_TAXSTATUS_CD"].asString());
        }
    }
    if(pJson.isMember("TIN"))
    {
        dirtyFlag_[52]=true;
        if(!pJson["TIN"].isNull())
        {
            tin_=std::make_shared<std::string>(pJson["TIN"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDROLPERSI"))
    {
        dirtyFlag_[53]=true;
        if(!pJson["APSYS_CDROLPERSI"].isNull())
        {
            apsysCdrolpersi_=std::make_shared<std::string>(pJson["APSYS_CDROLPERSI"].asString());
        }
    }
    if(pJson.isMember("VERTRAGSPRACH_CD"))
    {
        dirtyFlag_[54]=true;
        if(!pJson["VERTRAGSPRACH_CD"].isNull())
        {
            vertragsprachCd_=std::make_shared<std::string>(pJson["VERTRAGSPRACH_CD"].asString());
        }
    }
    if(pJson.isMember("VERMOEGENSKATEGORIE_IHAG_CD"))
    {
        dirtyFlag_[55]=true;
        if(!pJson["VERMOEGENSKATEGORIE_IHAG_CD"].isNull())
        {
            vermoegenskategorieIhagCd_=std::make_shared<std::string>(pJson["VERMOEGENSKATEGORIE_IHAG_CD"].asString());
        }
    }
    if(pJson.isMember("APSYS_INTISHS"))
    {
        dirtyFlag_[56]=true;
        if(!pJson["APSYS_INTISHS"].isNull())
        {
            apsysIntishs_=std::make_shared<std::string>(pJson["APSYS_INTISHS"].asString());
        }
    }
    if(pJson.isMember("APSYS_INTILGS"))
    {
        dirtyFlag_[57]=true;
        if(!pJson["APSYS_INTILGS"].isNull())
        {
            apsysIntilgs_=std::make_shared<std::string>(pJson["APSYS_INTILGS"].asString());
        }
    }
    if(pJson.isMember("GESAMTVERMOEGEN_CD"))
    {
        dirtyFlag_[58]=true;
        if(!pJson["GESAMTVERMOEGEN_CD"].isNull())
        {
            gesamtvermoegenCd_=std::make_shared<double>(pJson["GESAMTVERMOEGEN_CD"].asDouble());
        }
    }
    if(pJson.isMember("COMPLIANCE_OK_CD"))
    {
        dirtyFlag_[59]=true;
        if(!pJson["COMPLIANCE_OK_CD"].isNull())
        {
            complianceOkCd_=std::make_shared<std::string>(pJson["COMPLIANCE_OK_CD"].asString());
        }
    }
    if(pJson.isMember("COMPLIANCE_OK_BEMERKUNG"))
    {
        dirtyFlag_[60]=true;
        if(!pJson["COMPLIANCE_OK_BEMERKUNG"].isNull())
        {
            complianceOkBemerkung_=std::make_shared<std::string>(pJson["COMPLIANCE_OK_BEMERKUNG"].asString());
        }
    }
    if(pJson.isMember("COMPLIANCE_OK_DATUM"))
    {
        dirtyFlag_[61]=true;
        if(!pJson["COMPLIANCE_OK_DATUM"].isNull())
        {
            auto timeStr = pJson["COMPLIANCE_OK_DATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                complianceOkDatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("COMPLIANCE_OK_USERID"))
    {
        dirtyFlag_[62]=true;
        if(!pJson["COMPLIANCE_OK_USERID"].isNull())
        {
            complianceOkUserid_=std::make_shared<std::string>(pJson["COMPLIANCE_OK_USERID"].asString());
        }
    }
    if(pJson.isMember("EIN_VERMOEGEN"))
    {
        dirtyFlag_[63]=true;
        if(!pJson["EIN_VERMOEGEN"].isNull())
        {
            einVermoegen_=std::make_shared<double>(pJson["EIN_VERMOEGEN"].asDouble());
        }
    }
    if(pJson.isMember("SEGMENTIERUNG_CD"))
    {
        dirtyFlag_[64]=true;
        if(!pJson["SEGMENTIERUNG_CD"].isNull())
        {
            segmentierungCd_=std::make_shared<double>(pJson["SEGMENTIERUNG_CD"].asDouble());
        }
    }
    if(pJson.isMember("AKTID"))
    {
        dirtyFlag_[65]=true;
        if(!pJson["AKTID"].isNull())
        {
            aktid_=std::make_shared<double>(pJson["AKTID"].asDouble());
        }
    }
    if(pJson.isMember("VALIDID"))
    {
        dirtyFlag_[66]=true;
        if(!pJson["VALIDID"].isNull())
        {
            validid_=std::make_shared<double>(pJson["VALIDID"].asDouble());
        }
    }
    if(pJson.isMember("VALID_CD"))
    {
        dirtyFlag_[67]=true;
        if(!pJson["VALID_CD"].isNull())
        {
            validCd_=std::make_shared<std::string>(pJson["VALID_CD"].asString());
        }
    }
    if(pJson.isMember("VALIDUSER"))
    {
        dirtyFlag_[68]=true;
        if(!pJson["VALIDUSER"].isNull())
        {
            validuser_=std::make_shared<std::string>(pJson["VALIDUSER"].asString());
        }
    }
    if(pJson.isMember("ENC_SALT"))
    {
        dirtyFlag_[69]=true;
        if(!pJson["ENC_SALT"].isNull())
        {
            encSalt_=std::make_shared<std::string>(pJson["ENC_SALT"].asString());
        }
    }
    if(pJson.isMember("BEZEICHNUNG_ENC"))
    {
        dirtyFlag_[70]=true;
        if(!pJson["BEZEICHNUNG_ENC"].isNull())
        {
            bezeichnungEnc_=std::make_shared<std::string>(pJson["BEZEICHNUNG_ENC"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDMOTIFPARTS"))
    {
        dirtyFlag_[71]=true;
        if(!pJson["APSYS_CDMOTIFPARTS"].isNull())
        {
            apsysCdmotifparts_=std::make_shared<std::string>(pJson["APSYS_CDMOTIFPARTS"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDINDUS0S"))
    {
        dirtyFlag_[72]=true;
        if(!pJson["APSYS_CDINDUS0S"].isNull())
        {
            apsysCdindus0s_=std::make_shared<std::string>(pJson["APSYS_CDINDUS0S"].asString());
        }
    }
    if(pJson.isMember("APSYS_FLAGPREAVISEXEC"))
    {
        dirtyFlag_[73]=true;
        if(!pJson["APSYS_FLAGPREAVISEXEC"].isNull())
        {
            apsysFlagpreavisexec_=std::make_shared<std::string>(pJson["APSYS_FLAGPREAVISEXEC"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDAVIOBISPECC"))
    {
        dirtyFlag_[74]=true;
        if(!pJson["APSYS_CDAVIOBISPECC"].isNull())
        {
            apsysCdaviobispecc_=std::make_shared<std::string>(pJson["APSYS_CDAVIOBISPECC"].asString());
        }
    }
    if(pJson.isMember("APSYS_FLAGHISPERC"))
    {
        dirtyFlag_[75]=true;
        if(!pJson["APSYS_FLAGHISPERC"].isNull())
        {
            apsysFlaghisperc_=std::make_shared<std::string>(pJson["APSYS_FLAGHISPERC"].asString());
        }
    }
    if(pJson.isMember("APSYS_REPAMANUC"))
    {
        dirtyFlag_[76]=true;
        if(!pJson["APSYS_REPAMANUC"].isNull())
        {
            apsysRepamanuc_=std::make_shared<std::string>(pJson["APSYS_REPAMANUC"].asString());
        }
    }
    if(pJson.isMember("APSYS_PERDEVCALC"))
    {
        dirtyFlag_[77]=true;
        if(!pJson["APSYS_PERDEVCALC"].isNull())
        {
            apsysPerdevcalc_=std::make_shared<std::string>(pJson["APSYS_PERDEVCALC"].asString());
        }
    }
    if(pJson.isMember("APSYS_FLAGUKTAXC"))
    {
        dirtyFlag_[78]=true;
        if(!pJson["APSYS_FLAGUKTAXC"].isNull())
        {
            apsysFlaguktaxc_=std::make_shared<std::string>(pJson["APSYS_FLAGUKTAXC"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDNOGAS"))
    {
        dirtyFlag_[79]=true;
        if(!pJson["APSYS_CDNOGAS"].isNull())
        {
            apsysCdnogas_=std::make_shared<std::string>(pJson["APSYS_CDNOGAS"].asString());
        }
    }
    if(pJson.isMember("APSYS_STATFISCC"))
    {
        dirtyFlag_[80]=true;
        if(!pJson["APSYS_STATFISCC"].isNull())
        {
            apsysStatfiscc_=std::make_shared<std::string>(pJson["APSYS_STATFISCC"].asString());
        }
    }
    if(pJson.isMember("APSYS_FLAGFWTI"))
    {
        dirtyFlag_[81]=true;
        if(!pJson["APSYS_FLAGFWTI"].isNull())
        {
            apsysFlagfwti_=std::make_shared<std::string>(pJson["APSYS_FLAGFWTI"].asString());
        }
    }
    if(pJson.isMember("APSYS_FLAGFWTUKNRSDI"))
    {
        dirtyFlag_[82]=true;
        if(!pJson["APSYS_FLAGFWTUKNRSDI"].isNull())
        {
            apsysFlagfwtuknrsdi_=std::make_shared<std::string>(pJson["APSYS_FLAGFWTUKNRSDI"].asString());
        }
    }
    if(pJson.isMember("APSYS_FLAGFWTTAXSPEGEI"))
    {
        dirtyFlag_[83]=true;
        if(!pJson["APSYS_FLAGFWTTAXSPEGEI"].isNull())
        {
            apsysFlagfwttaxspegei_=std::make_shared<std::string>(pJson["APSYS_FLAGFWTTAXSPEGEI"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDFWTOPTREGULFISCANCC"))
    {
        dirtyFlag_[84]=true;
        if(!pJson["APSYS_CDFWTOPTREGULFISCANCC"].isNull())
        {
            apsysCdfwtoptregulfiscancc_=std::make_shared<std::string>(pJson["APSYS_CDFWTOPTREGULFISCANCC"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDFWTSTATREGULFISCANCC"))
    {
        dirtyFlag_[85]=true;
        if(!pJson["APSYS_CDFWTSTATREGULFISCANCC"].isNull())
        {
            apsysCdfwtstatregulfiscancc_=std::make_shared<std::string>(pJson["APSYS_CDFWTSTATREGULFISCANCC"]["CDFWTOPTREGULFISCANCC_CD"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDFWTOPTREGULFISCFUTC"))
    {
        dirtyFlag_[86]=true;
        if(!pJson["APSYS_CDFWTOPTREGULFISCFUTC"].isNull())
        {
            apsysCdfwtoptregulfiscfutc_=std::make_shared<std::string>(pJson["APSYS_CDFWTOPTREGULFISCFUTC"].asString());
        }
    }
    if(pJson.isMember("STEUERLAND_ABGST_CD"))
    {
        dirtyFlag_[87]=true;
        if(!pJson["STEUERLAND_ABGST_CD"].isNull())
        {
            steuerlandAbgstCd_=std::make_shared<std::string>(pJson["STEUERLAND_ABGST_CD"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDNATURES"))
    {
        dirtyFlag_[88]=true;
        if(!pJson["APSYS_CDNATURES"].isNull())
        {
            apsysCdnatures_=std::make_shared<std::string>(pJson["APSYS_CDNATURES"].asString());
        }
    }
    if(pJson.isMember("APSYS_SHNAS"))
    {
        dirtyFlag_[89]=true;
        if(!pJson["APSYS_SHNAS"].isNull())
        {
            apsysShnas_=std::make_shared<std::string>(pJson["APSYS_SHNAS"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDPYHQDOMIS"))
    {
        dirtyFlag_[90]=true;
        if(!pJson["APSYS_CDPYHQDOMIS"].isNull())
        {
            apsysCdpyhqdomis_=std::make_shared<std::string>(pJson["APSYS_CDPYHQDOMIS"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDPERMI"))
    {
        dirtyFlag_[91]=true;
        if(!pJson["APSYS_CDPERMI"].isNull())
        {
            apsysCdpermi_=std::make_shared<double>(pJson["APSYS_CDPERMI"].asDouble());
        }
    }
    if(pJson.isMember("APSYS_IDRCIS"))
    {
        dirtyFlag_[92]=true;
        if(!pJson["APSYS_IDRCIS"].isNull())
        {
            apsysIdrcis_=std::make_shared<std::string>(pJson["APSYS_IDRCIS"].asString());
        }
    }
    if(pJson.isMember("APSYS_FLAGISTTC"))
    {
        dirtyFlag_[93]=true;
        if(!pJson["APSYS_FLAGISTTC"].isNull())
        {
            apsysFlagisttc_=std::make_shared<std::string>(pJson["APSYS_FLAGISTTC"].asString());
        }
    }
    if(pJson.isMember("APSYS_DEVEVALS"))
    {
        dirtyFlag_[94]=true;
        if(!pJson["APSYS_DEVEVALS"].isNull())
        {
            apsysDevevals_=std::make_shared<std::string>(pJson["APSYS_DEVEVALS"].asString());
        }
    }
    if(pJson.isMember("APSYS_IDSTRUCS"))
    {
        dirtyFlag_[95]=true;
        if(!pJson["APSYS_IDSTRUCS"].isNull())
        {
            apsysIdstrucs_=std::make_shared<std::string>(pJson["APSYS_IDSTRUCS"].asString());
        }
    }
    if(pJson.isMember("APSYS_SUIVIAGTS"))
    {
        dirtyFlag_[96]=true;
        if(!pJson["APSYS_SUIVIAGTS"].isNull())
        {
            apsysSuiviagts_=std::make_shared<std::string>(pJson["APSYS_SUIVIAGTS"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDINDUSCSSFS"))
    {
        dirtyFlag_[97]=true;
        if(!pJson["APSYS_CDINDUSCSSFS"].isNull())
        {
            apsysCdinduscssfs_=std::make_shared<std::string>(pJson["APSYS_CDINDUSCSSFS"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDINDUSBLUXS"))
    {
        dirtyFlag_[98]=true;
        if(!pJson["APSYS_CDINDUSBLUXS"].isNull())
        {
            apsysCdindusbluxs_=std::make_shared<std::string>(pJson["APSYS_CDINDUSBLUXS"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDINDUSSBUBA"))
    {
        dirtyFlag_[99]=true;
        if(!pJson["APSYS_CDINDUSSBUBA"].isNull())
        {
            apsysCdindussbuba_=std::make_shared<std::string>(pJson["APSYS_CDINDUSSBUBA"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDINDUSSBNS"))
    {
        dirtyFlag_[100]=true;
        if(!pJson["APSYS_CDINDUSSBNS"].isNull())
        {
            apsysCdindussbns_=std::make_shared<std::string>(pJson["APSYS_CDINDUSSBNS"].asString());
        }
    }
    if(pJson.isMember("APSYS_GRMTEVALS"))
    {
        dirtyFlag_[101]=true;
        if(!pJson["APSYS_GRMTEVALS"].isNull())
        {
            apsysGrmtevals_=std::make_shared<std::string>(pJson["APSYS_GRMTEVALS"].asString());
        }
    }
    if(pJson.isMember("APSYS_IDPOCS"))
    {
        dirtyFlag_[102]=true;
        if(!pJson["APSYS_IDPOCS"].isNull())
        {
            apsysIdpocs_=std::make_shared<std::string>(pJson["APSYS_IDPOCS"].asString());
        }
    }
    if(pJson.isMember("APSYS_INFO"))
    {
        dirtyFlag_[103]=true;
        if(!pJson["APSYS_INFO"].isNull())
        {
            apsysInfo_=std::make_shared<std::string>(pJson["APSYS_INFO"].asString());
        }
    }
    if(pJson.isMember("APSYS_IDENTS"))
    {
        dirtyFlag_[104]=true;
        if(!pJson["APSYS_IDENTS"].isNull())
        {
            apsysIdents_=std::make_shared<std::string>(pJson["APSYS_IDENTS"].asString());
        }
    }
    if(pJson.isMember("APSYS_STATUS_OPEC"))
    {
        dirtyFlag_[105]=true;
        if(!pJson["APSYS_STATUS_OPEC"].isNull())
        {
            apsysStatusOpec_=std::make_shared<std::string>(pJson["APSYS_STATUS_OPEC"].asString());
        }
    }
    if(pJson.isMember("APSYS_ERRI"))
    {
        dirtyFlag_[106]=true;
        if(!pJson["APSYS_ERRI"].isNull())
        {
            apsysErri_=std::make_shared<double>(pJson["APSYS_ERRI"].asDouble());
        }
    }
    if(pJson.isMember("NATIONALITAET2_CD"))
    {
        dirtyFlag_[107]=true;
        if(!pJson["NATIONALITAET2_CD"].isNull())
        {
            nationalitaet2Cd_=std::make_shared<std::string>(pJson["NATIONALITAET2_CD"].asString());
        }
    }
    if(pJson.isMember("NATIONALITAET3_CD"))
    {
        dirtyFlag_[108]=true;
        if(!pJson["NATIONALITAET3_CD"].isNull())
        {
            nationalitaet3Cd_=std::make_shared<std::string>(pJson["NATIONALITAET3_CD"].asString());
        }
    }
    if(pJson.isMember("VERMOEGENSURSPRUNG2_CD"))
    {
        dirtyFlag_[109]=true;
        if(!pJson["VERMOEGENSURSPRUNG2_CD"].isNull())
        {
            vermoegensursprung2Cd_=std::make_shared<std::string>(pJson["VERMOEGENSURSPRUNG2_CD"].asString());
        }
    }
    if(pJson.isMember("VERMOEGENSURSPRUNG2"))
    {
        dirtyFlag_[110]=true;
        if(!pJson["VERMOEGENSURSPRUNG2"].isNull())
        {
            vermoegensursprung2_=std::make_shared<std::string>(pJson["VERMOEGENSURSPRUNG2"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP1_CD"))
    {
        dirtyFlag_[111]=true;
        if(!pJson["APPROVAL_STEP1_CD"].isNull())
        {
            approvalStep1Cd_=std::make_shared<std::string>(pJson["APPROVAL_STEP1_CD"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP1_USER"))
    {
        dirtyFlag_[112]=true;
        if(!pJson["APPROVAL_STEP1_USER"].isNull())
        {
            approvalStep1User_=std::make_shared<std::string>(pJson["APPROVAL_STEP1_USER"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP1_DATE"))
    {
        dirtyFlag_[113]=true;
        if(!pJson["APPROVAL_STEP1_DATE"].isNull())
        {
            auto timeStr = pJson["APPROVAL_STEP1_DATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep1Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APPROVAL_STEP2_CD"))
    {
        dirtyFlag_[114]=true;
        if(!pJson["APPROVAL_STEP2_CD"].isNull())
        {
            approvalStep2Cd_=std::make_shared<std::string>(pJson["APPROVAL_STEP2_CD"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP2_USER"))
    {
        dirtyFlag_[115]=true;
        if(!pJson["APPROVAL_STEP2_USER"].isNull())
        {
            approvalStep2User_=std::make_shared<std::string>(pJson["APPROVAL_STEP2_USER"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP2_DATE"))
    {
        dirtyFlag_[116]=true;
        if(!pJson["APPROVAL_STEP2_DATE"].isNull())
        {
            auto timeStr = pJson["APPROVAL_STEP2_DATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep2Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APPROVAL_STEP3_CD"))
    {
        dirtyFlag_[117]=true;
        if(!pJson["APPROVAL_STEP3_CD"].isNull())
        {
            approvalStep3Cd_=std::make_shared<std::string>(pJson["APPROVAL_STEP3_CD"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP3_USER"))
    {
        dirtyFlag_[118]=true;
        if(!pJson["APPROVAL_STEP3_USER"].isNull())
        {
            approvalStep3User_=std::make_shared<std::string>(pJson["APPROVAL_STEP3_USER"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP3_DATE"))
    {
        dirtyFlag_[119]=true;
        if(!pJson["APPROVAL_STEP3_DATE"].isNull())
        {
            auto timeStr = pJson["APPROVAL_STEP3_DATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep3Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APPROVAL_STEP4_CD"))
    {
        dirtyFlag_[120]=true;
        if(!pJson["APPROVAL_STEP4_CD"].isNull())
        {
            approvalStep4Cd_=std::make_shared<std::string>(pJson["APPROVAL_STEP4_CD"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP4_USER"))
    {
        dirtyFlag_[121]=true;
        if(!pJson["APPROVAL_STEP4_USER"].isNull())
        {
            approvalStep4User_=std::make_shared<std::string>(pJson["APPROVAL_STEP4_USER"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP4_DATE"))
    {
        dirtyFlag_[122]=true;
        if(!pJson["APPROVAL_STEP4_DATE"].isNull())
        {
            auto timeStr = pJson["APPROVAL_STEP4_DATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep4Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APPROVAL_STEP5_CD"))
    {
        dirtyFlag_[123]=true;
        if(!pJson["APPROVAL_STEP5_CD"].isNull())
        {
            approvalStep5Cd_=std::make_shared<std::string>(pJson["APPROVAL_STEP5_CD"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP5_USER"))
    {
        dirtyFlag_[124]=true;
        if(!pJson["APPROVAL_STEP5_USER"].isNull())
        {
            approvalStep5User_=std::make_shared<std::string>(pJson["APPROVAL_STEP5_USER"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP5_DATE"))
    {
        dirtyFlag_[125]=true;
        if(!pJson["APPROVAL_STEP5_DATE"].isNull())
        {
            auto timeStr = pJson["APPROVAL_STEP5_DATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep5Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APPROVAL_STEP1_BEM"))
    {
        dirtyFlag_[126]=true;
        if(!pJson["APPROVAL_STEP1_BEM"].isNull())
        {
            approvalStep1Bem_=std::make_shared<std::string>(pJson["APPROVAL_STEP1_BEM"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP2_BEM"))
    {
        dirtyFlag_[127]=true;
        if(!pJson["APPROVAL_STEP2_BEM"].isNull())
        {
            approvalStep2Bem_=std::make_shared<std::string>(pJson["APPROVAL_STEP2_BEM"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP3_BEM"))
    {
        dirtyFlag_[128]=true;
        if(!pJson["APPROVAL_STEP3_BEM"].isNull())
        {
            approvalStep3Bem_=std::make_shared<std::string>(pJson["APPROVAL_STEP3_BEM"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP4_BEM"))
    {
        dirtyFlag_[129]=true;
        if(!pJson["APPROVAL_STEP4_BEM"].isNull())
        {
            approvalStep4Bem_=std::make_shared<std::string>(pJson["APPROVAL_STEP4_BEM"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP5_BEM"))
    {
        dirtyFlag_[130]=true;
        if(!pJson["APPROVAL_STEP5_BEM"].isNull())
        {
            approvalStep5Bem_=std::make_shared<std::string>(pJson["APPROVAL_STEP5_BEM"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP1_ASSES_CD"))
    {
        dirtyFlag_[131]=true;
        if(!pJson["APPROVAL_STEP1_ASSES_CD"].isNull())
        {
            approvalStep1AssesCd_=std::make_shared<double>(pJson["APPROVAL_STEP1_ASSES_CD"].asDouble());
        }
    }
    if(pJson.isMember("APPROVAL_STEP2_ASSES_CD"))
    {
        dirtyFlag_[132]=true;
        if(!pJson["APPROVAL_STEP2_ASSES_CD"].isNull())
        {
            approvalStep2AssesCd_=std::make_shared<double>(pJson["APPROVAL_STEP2_ASSES_CD"].asDouble());
        }
    }
    if(pJson.isMember("APPROVAL_STEP3_ASSES_CD"))
    {
        dirtyFlag_[133]=true;
        if(!pJson["APPROVAL_STEP3_ASSES_CD"].isNull())
        {
            approvalStep3AssesCd_=std::make_shared<double>(pJson["APPROVAL_STEP3_ASSES_CD"].asDouble());
        }
    }
    if(pJson.isMember("APPROVAL_STEP4_ASSES_CD"))
    {
        dirtyFlag_[134]=true;
        if(!pJson["APPROVAL_STEP4_ASSES_CD"].isNull())
        {
            approvalStep4AssesCd_=std::make_shared<double>(pJson["APPROVAL_STEP4_ASSES_CD"].asDouble());
        }
    }
    if(pJson.isMember("APPROVAL_STEP5_ASSES_CD"))
    {
        dirtyFlag_[135]=true;
        if(!pJson["APPROVAL_STEP5_ASSES_CD"].isNull())
        {
            approvalStep5AssesCd_=std::make_shared<double>(pJson["APPROVAL_STEP5_ASSES_CD"].asDouble());
        }
    }
    if(pJson.isMember("APPROVAL_STATUS_CD"))
    {
        dirtyFlag_[136]=true;
        if(!pJson["APPROVAL_STATUS_CD"].isNull())
        {
            approvalStatusCd_=std::make_shared<double>(pJson["APPROVAL_STATUS_CD"].asDouble());
        }
    }
    if(pJson.isMember("CLIENT_STATUS_CD"))
    {
        dirtyFlag_[137]=true;
        if(!pJson["CLIENT_STATUS_CD"].isNull())
        {
            clientStatusCd_=std::make_shared<std::string>(pJson["CLIENT_STATUS_CD"].asString());
        }
    }
    if(pJson.isMember("DISCHARGE_ORDERS_CD"))
    {
        dirtyFlag_[138]=true;
        if(!pJson["DISCHARGE_ORDERS_CD"].isNull())
        {
            dischargeOrdersCd_=std::make_shared<std::string>(pJson["DISCHARGE_ORDERS_CD"].asString());
        }
    }
    if(pJson.isMember("PRINT_SUMMARY_HOLDMAIL_ONLY_CD"))
    {
        dirtyFlag_[139]=true;
        if(!pJson["PRINT_SUMMARY_HOLDMAIL_ONLY_CD"].isNull())
        {
            printSummaryHoldmailOnlyCd_=std::make_shared<std::string>(pJson["PRINT_SUMMARY_HOLDMAIL_ONLY_CD"].asString());
        }
    }
    if(pJson.isMember("EBANKING_CONTRACT_CD"))
    {
        dirtyFlag_[140]=true;
        if(!pJson["EBANKING_CONTRACT_CD"].isNull())
        {
            ebankingContractCd_=std::make_shared<std::string>(pJson["EBANKING_CONTRACT_CD"].asString());
        }
    }
    if(pJson.isMember("EBANKING_CONTRACT_LANGUAGE_CD"))
    {
        dirtyFlag_[141]=true;
        if(!pJson["EBANKING_CONTRACT_LANGUAGE_CD"].isNull())
        {
            ebankingContractLanguageCd_=std::make_shared<std::string>(pJson["EBANKING_CONTRACT_LANGUAGE_CD"].asString());
        }
    }
    if(pJson.isMember("APSYS_DTECHDIARYL"))
    {
        dirtyFlag_[142]=true;
        if(!pJson["APSYS_DTECHDIARYL"].isNull())
        {
            auto timeStr = pJson["APSYS_DTECHDIARYL"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtechdiaryl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APSYS_MOTDIARYS"))
    {
        dirtyFlag_[143]=true;
        if(!pJson["APSYS_MOTDIARYS"].isNull())
        {
            apsysMotdiarys_=std::make_shared<std::string>(pJson["APSYS_MOTDIARYS"].asString());
        }
    }
    if(pJson.isMember("APSYS_IDTYPCLIIRSS"))
    {
        dirtyFlag_[144]=true;
        if(!pJson["APSYS_IDTYPCLIIRSS"].isNull())
        {
            apsysIdtypcliirss_=std::make_shared<std::string>(pJson["APSYS_IDTYPCLIIRSS"].asString());
        }
    }
    if(pJson.isMember("APSYS_IDRCIQIS"))
    {
        dirtyFlag_[145]=true;
        if(!pJson["APSYS_IDRCIQIS"].isNull())
        {
            apsysIdrciqis_=std::make_shared<std::string>(pJson["APSYS_IDRCIQIS"].asString());
        }
    }
    if(pJson.isMember("APSYS_IDRCIFATCAS"))
    {
        dirtyFlag_[146]=true;
        if(!pJson["APSYS_IDRCIFATCAS"].isNull())
        {
            apsysIdrcifatcas_=std::make_shared<std::string>(pJson["APSYS_IDRCIFATCAS"].asString());
        }
    }
    if(pJson.isMember("MAILING_TARIF_TYPE_CD"))
    {
        dirtyFlag_[147]=true;
        if(!pJson["MAILING_TARIF_TYPE_CD"].isNull())
        {
            mailingTarifTypeCd_=std::make_shared<double>(pJson["MAILING_TARIF_TYPE_CD"].asDouble());
        }
    }
    if(pJson.isMember("REGISTERED_CD"))
    {
        dirtyFlag_[148]=true;
        if(!pJson["REGISTERED_CD"].isNull())
        {
            registeredCd_=std::make_shared<std::string>(pJson["REGISTERED_CD"].asString());
        }
    }
    if(pJson.isMember("REGISTERED_MAIL_CD"))
    {
        dirtyFlag_[149]=true;
        if(!pJson["REGISTERED_MAIL_CD"].isNull())
        {
            registeredMailCd_=std::make_shared<std::string>(pJson["REGISTERED_MAIL_CD"].asString());
        }
    }
    if(pJson.isMember("APSYS_NBPERSCPARTIEL"))
    {
        dirtyFlag_[150]=true;
        if(!pJson["APSYS_NBPERSCPARTIEL"].isNull())
        {
            apsysNbperscpartiel_=std::make_shared<double>(pJson["APSYS_NBPERSCPARTIEL"].asDouble());
        }
    }
    if(pJson.isMember("ASSET_VALUE_TIER_CD"))
    {
        dirtyFlag_[151]=true;
        if(!pJson["ASSET_VALUE_TIER_CD"].isNull())
        {
            assetValueTierCd_=std::make_shared<std::string>(pJson["ASSET_VALUE_TIER_CD"].asString());
        }
    }
    if(pJson.isMember("RELATIONSHIP_TYPE_AML_CD"))
    {
        dirtyFlag_[152]=true;
        if(!pJson["RELATIONSHIP_TYPE_AML_CD"].isNull())
        {
            relationshipTypeAmlCd_=std::make_shared<std::string>(pJson["RELATIONSHIP_TYPE_AML_CD"].asString());
        }
    }
    if(pJson.isMember("CB_ASSET_VALUE_TIER_CD"))
    {
        dirtyFlag_[153]=true;
        if(!pJson["CB_ASSET_VALUE_TIER_CD"].isNull())
        {
            cbAssetValueTierCd_=std::make_shared<std::string>(pJson["CB_ASSET_VALUE_TIER_CD"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_SCORE"))
    {
        dirtyFlag_[154]=true;
        if(!pJson["APPROVAL_SCORE"].isNull())
        {
            approvalScore_=std::make_shared<double>(pJson["APPROVAL_SCORE"].asDouble());
        }
    }
    if(pJson.isMember("APPROVAL_SCORE_STEPS"))
    {
        dirtyFlag_[155]=true;
        if(!pJson["APPROVAL_SCORE_STEPS"].isNull())
        {
            approvalScoreSteps_=std::make_shared<double>(pJson["APPROVAL_SCORE_STEPS"].asDouble());
        }
    }
    if(pJson.isMember("APSYS_DTDEBPARTL"))
    {
        dirtyFlag_[156]=true;
        if(!pJson["APSYS_DTDEBPARTL"].isNull())
        {
            auto timeStr = pJson["APSYS_DTDEBPARTL"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtdebpartl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APSYS_DTFINPARTL"))
    {
        dirtyFlag_[157]=true;
        if(!pJson["APSYS_DTFINPARTL"].isNull())
        {
            auto timeStr = pJson["APSYS_DTFINPARTL"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtfinpartl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APSYS_CDMOTIFCLOS"))
    {
        dirtyFlag_[158]=true;
        if(!pJson["APSYS_CDMOTIFCLOS"].isNull())
        {
            apsysCdmotifclos_=std::make_shared<std::string>(pJson["APSYS_CDMOTIFCLOS"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDNATURECPARTIEEMIRC"))
    {
        dirtyFlag_[159]=true;
        if(!pJson["APSYS_CDNATURECPARTIEEMIRC"].isNull())
        {
            apsysCdnaturecpartieemirc_=std::make_shared<std::string>(pJson["APSYS_CDNATURECPARTIEEMIRC"].asString());
        }
    }
    if(pJson.isMember("APSYS_FLAGOTHEREMIRC"))
    {
        dirtyFlag_[160]=true;
        if(!pJson["APSYS_FLAGOTHEREMIRC"].isNull())
        {
            apsysFlagotheremirc_=std::make_shared<std::string>(pJson["APSYS_FLAGOTHEREMIRC"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDINDUSEMIRS"))
    {
        dirtyFlag_[161]=true;
        if(!pJson["APSYS_CDINDUSEMIRS"].isNull())
        {
            apsysCdindusemirs_=std::make_shared<std::string>(pJson["APSYS_CDINDUSEMIRS"].asString());
        }
    }
    if(pJson.isMember("OPENED_IN_APSYS_DATE"))
    {
        dirtyFlag_[162]=true;
        if(!pJson["OPENED_IN_APSYS_DATE"].isNull())
        {
            auto timeStr = pJson["OPENED_IN_APSYS_DATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                openedInApsysDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APSYS_CDNATURECPARTIEFMIAC"))
    {
        dirtyFlag_[163]=true;
        if(!pJson["APSYS_CDNATURECPARTIEFMIAC"].isNull())
        {
            apsysCdnaturecpartiefmiac_=std::make_shared<std::string>(pJson["APSYS_CDNATURECPARTIEFMIAC"].asString());
        }
    }
    if(pJson.isMember("EBANKING_CLOSED_CD"))
    {
        dirtyFlag_[164]=true;
        if(!pJson["EBANKING_CLOSED_CD"].isNull())
        {
            ebankingClosedCd_=std::make_shared<std::string>(pJson["EBANKING_CLOSED_CD"].asString());
        }
    }
    if(pJson.isMember("EBANKING_CLOSINGDATE"))
    {
        dirtyFlag_[165]=true;
        if(!pJson["EBANKING_CLOSINGDATE"].isNull())
        {
            auto timeStr = pJson["EBANKING_CLOSINGDATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                ebankingClosingdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("KYC_REVIEW_PROCESS_START_DATE"))
    {
        dirtyFlag_[166]=true;
        if(!pJson["KYC_REVIEW_PROCESS_START_DATE"].isNull())
        {
            auto timeStr = pJson["KYC_REVIEW_PROCESS_START_DATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                kycReviewProcessStartDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("REMARKS"))
    {
        dirtyFlag_[167]=true;
        if(!pJson["REMARKS"].isNull())
        {
            remarks_=std::make_shared<std::string>(pJson["REMARKS"].asString());
        }
    }
    if(pJson.isMember("TRANSACTION_BL_COUNTRY_CD"))
    {
        dirtyFlag_[168]=true;
        if(!pJson["TRANSACTION_BL_COUNTRY_CD"].isNull())
        {
            transactionBlCountryCd_=std::make_shared<double>(pJson["TRANSACTION_BL_COUNTRY_CD"].asDouble());
        }
    }
    if(pJson.isMember("CLIENTGROUP_CD"))
    {
        dirtyFlag_[169]=true;
        if(!pJson["CLIENTGROUP_CD"].isNull())
        {
            clientgroupCd_=std::make_shared<double>(pJson["CLIENTGROUP_CD"].asDouble());
        }
    }
    if(pJson.isMember("RISKINDEX_CALC"))
    {
        dirtyFlag_[170]=true;
        if(!pJson["RISKINDEX_CALC"].isNull())
        {
            riskindexCalc_=std::make_shared<double>(pJson["RISKINDEX_CALC"].asDouble());
        }
    }
    if(pJson.isMember("LAST_CALC_CRI_MUTDATUM"))
    {
        dirtyFlag_[171]=true;
        if(!pJson["LAST_CALC_CRI_MUTDATUM"].isNull())
        {
            auto timeStr = pJson["LAST_CALC_CRI_MUTDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                lastCalcCriMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("RISIKOKATEGORIE_CALC_CD"))
    {
        dirtyFlag_[172]=true;
        if(!pJson["RISIKOKATEGORIE_CALC_CD"].isNull())
        {
            risikokategorieCalcCd_=std::make_shared<std::string>(pJson["RISIKOKATEGORIE_CALC_CD"].asString());
        }
    }
    if(pJson.isMember("RISKINDEX_GROUP"))
    {
        dirtyFlag_[173]=true;
        if(!pJson["RISKINDEX_GROUP"].isNull())
        {
            riskindexGroup_=std::make_shared<double>(pJson["RISKINDEX_GROUP"].asDouble());
        }
    }
    if(pJson.isMember("EST_AMOUNT_REM_WITH_MUTDATUM"))
    {
        dirtyFlag_[174]=true;
        if(!pJson["EST_AMOUNT_REM_WITH_MUTDATUM"].isNull())
        {
            auto timeStr = pJson["EST_AMOUNT_REM_WITH_MUTDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                estAmountRemWithMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("GESAMTVERMOEGEN_MUTDATUM"))
    {
        dirtyFlag_[175]=true;
        if(!pJson["GESAMTVERMOEGEN_MUTDATUM"].isNull())
        {
            auto timeStr = pJson["GESAMTVERMOEGEN_MUTDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                gesamtvermoegenMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("TRANSACT_BL_COUNTRY_MUTDATUM"))
    {
        dirtyFlag_[176]=true;
        if(!pJson["TRANSACT_BL_COUNTRY_MUTDATUM"].isNull())
        {
            auto timeStr = pJson["TRANSACT_BL_COUNTRY_MUTDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                transactBlCountryMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("ACCOUNTPURPOSE_MUTDATUM"))
    {
        dirtyFlag_[177]=true;
        if(!pJson["ACCOUNTPURPOSE_MUTDATUM"].isNull())
        {
            auto timeStr = pJson["ACCOUNTPURPOSE_MUTDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                accountpurposeMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APSYS_FLAGDELDATAPERSI"))
    {
        dirtyFlag_[178]=true;
        if(!pJson["APSYS_FLAGDELDATAPERSI"].isNull())
        {
            apsysFlagdeldatapersi_=std::make_shared<std::string>(pJson["APSYS_FLAGDELDATAPERSI"].asString());
        }
    }
    if(pJson.isMember("APSYS_DTWAITDELDATAPERSL"))
    {
        dirtyFlag_[179]=true;
        if(!pJson["APSYS_DTWAITDELDATAPERSL"].isNull())
        {
            auto timeStr = pJson["APSYS_DTWAITDELDATAPERSL"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtwaitdeldatapersl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("NAME_ENC"))
    {
        dirtyFlag_[180]=true;
        if(!pJson["NAME_ENC"].isNull())
        {
            nameEnc_=std::make_shared<std::string>(pJson["NAME_ENC"].asString());
        }
    }
    if(pJson.isMember("IN_APSYS_TEMP_ENTSPERREN_CD"))
    {
        dirtyFlag_[181]=true;
        if(!pJson["IN_APSYS_TEMP_ENTSPERREN_CD"].isNull())
        {
            inApsysTempEntsperrenCd_=std::make_shared<std::string>(pJson["IN_APSYS_TEMP_ENTSPERREN_CD"].asString());
        }
    }
    if(pJson.isMember("IN_APSYS_TEMP_ENTSP_USERID"))
    {
        dirtyFlag_[182]=true;
        if(!pJson["IN_APSYS_TEMP_ENTSP_USERID"].isNull())
        {
            inApsysTempEntspUserid_=std::make_shared<std::string>(pJson["IN_APSYS_TEMP_ENTSP_USERID"].asString());
        }
    }
    if(pJson.isMember("IN_APSYS_TEMP_ENTSP_DATUM"))
    {
        dirtyFlag_[183]=true;
        if(!pJson["IN_APSYS_TEMP_ENTSP_DATUM"].isNull())
        {
            auto timeStr = pJson["IN_APSYS_TEMP_ENTSP_DATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                inApsysTempEntspDatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APSYS_CDREGS"))
    {
        dirtyFlag_[184]=true;
        if(!pJson["APSYS_CDREGS"].isNull())
        {
            apsysCdregs_=std::make_shared<std::string>(pJson["APSYS_CDREGS"].asString());
        }
    }
    if(pJson.isMember("RETENTION_ON_HOLD"))
    {
        dirtyFlag_[185]=true;
        if(!pJson["RETENTION_ON_HOLD"].isNull())
        {
            retentionOnHold_=std::make_shared<std::string>(pJson["RETENTION_ON_HOLD"].asString());
        }
    }
    if(pJson.isMember("RETENTION_ON_HOLD_DATE"))
    {
        dirtyFlag_[186]=true;
        if(!pJson["RETENTION_ON_HOLD_DATE"].isNull())
        {
            auto timeStr = pJson["RETENTION_ON_HOLD_DATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                retentionOnHoldDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("RETENTION_ON_HOLD_REASON"))
    {
        dirtyFlag_[187]=true;
        if(!pJson["RETENTION_ON_HOLD_REASON"].isNull())
        {
            retentionOnHoldReason_=std::make_shared<std::string>(pJson["RETENTION_ON_HOLD_REASON"].asString());
        }
    }
    if(pJson.isMember("LOGICAL_ERASURE"))
    {
        dirtyFlag_[188]=true;
        if(!pJson["LOGICAL_ERASURE"].isNull())
        {
            logicalErasure_=std::make_shared<std::string>(pJson["LOGICAL_ERASURE"].asString());
        }
    }
    if(pJson.isMember("LOGICAL_ERASURE_DATE"))
    {
        dirtyFlag_[189]=true;
        if(!pJson["LOGICAL_ERASURE_DATE"].isNull())
        {
            auto timeStr = pJson["LOGICAL_ERASURE_DATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                logicalErasureDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("LOGICAL_ERASURE_REASON"))
    {
        dirtyFlag_[190]=true;
        if(!pJson["LOGICAL_ERASURE_REASON"].isNull())
        {
            logicalErasureReason_=std::make_shared<std::string>(pJson["LOGICAL_ERASURE_REASON"].asString());
        }
    }
    if(pJson.isMember("COMPLIANCE_MIN_RISK_CATEGORY"))
    {
        dirtyFlag_[191]=true;
        if(!pJson["COMPLIANCE_MIN_RISK_CATEGORY"].isNull())
        {
            complianceMinRiskCategory_=std::make_shared<std::string>(pJson["COMPLIANCE_MIN_RISK_CATEGORY"].asString());
        }
    }
    if(pJson.isMember("COMPLIANCE_MIN_RISK_COMMENT"))
    {
        dirtyFlag_[192]=true;
        if(!pJson["COMPLIANCE_MIN_RISK_COMMENT"].isNull())
        {
            complianceMinRiskComment_=std::make_shared<std::string>(pJson["COMPLIANCE_MIN_RISK_COMMENT"].asString());
        }
    }
    if(pJson.isMember("CLIENT_STRUCTURE_CD"))
    {
        dirtyFlag_[193]=true;
        if(!pJson["CLIENT_STRUCTURE_CD"].isNull())
        {
            clientStructureCd_=std::make_shared<std::string>(pJson["CLIENT_STRUCTURE_CD"].asString());
        }
    }
    if(pJson.isMember("CLIENT_SUBSTRUCTURE_CD"))
    {
        dirtyFlag_[194]=true;
        if(!pJson["CLIENT_SUBSTRUCTURE_CD"].isNull())
        {
            clientSubstructureCd_=std::make_shared<std::string>(pJson["CLIENT_SUBSTRUCTURE_CD"].asString());
        }
    }
}

void Kunde::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 195)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            kundenid_=std::make_shared<double>(pJson[pMasqueradingVector[0]].asDouble());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            bezeichnung_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[2]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                kundeseit_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            vertragsparteiCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            loeschCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                loeschdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                crtdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            crtuser_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                mutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            mutuser_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            pseudoaccountCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                kundebesuch_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            bezeichnungvertrag_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            pseudonym_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            rechtsdomizilCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            korrespondenzsprachCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            mitProfilCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            gemeinschaftskontoCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            pin_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            verwendungszweck_=std::make_shared<std::string>(pJson[pMasqueradingVector[19]].asString());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            identifikationsartCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            vermoegensursprungCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[21]].asString());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            vermoegensursprung_=std::make_shared<std::string>(pJson[pMasqueradingVector[22]].asString());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            geldvonkonto_=std::make_shared<std::string>(pJson[pMasqueradingVector[23]].asString());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            bisherigebetreuung_=std::make_shared<std::string>(pJson[pMasqueradingVector[24]].asString());
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[25]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                bisherigebetreuungseit_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        dirtyFlag_[26] = true;
        if(!pJson[pMasqueradingVector[26]].isNull())
        {
            manualopenCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[26]].asString());
        }
    }
    if(!pMasqueradingVector[27].empty() && pJson.isMember(pMasqueradingVector[27]))
    {
        dirtyFlag_[27] = true;
        if(!pJson[pMasqueradingVector[27]].isNull())
        {
            einVermoegenCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[27]].asString());
        }
    }
    if(!pMasqueradingVector[28].empty() && pJson.isMember(pMasqueradingVector[28]))
    {
        dirtyFlag_[28] = true;
        if(!pJson[pMasqueradingVector[28]].isNull())
        {
            regionzahlungCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[28]].asString());
        }
    }
    if(!pMasqueradingVector[29].empty() && pJson.isMember(pMasqueradingVector[29]))
    {
        dirtyFlag_[29] = true;
        if(!pJson[pMasqueradingVector[29]].isNull())
        {
            einVermoegenartCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[29]].asString());
        }
    }
    if(!pMasqueradingVector[30].empty() && pJson.isMember(pMasqueradingVector[30]))
    {
        dirtyFlag_[30] = true;
        if(!pJson[pMasqueradingVector[30]].isNull())
        {
            spezWuenscheCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[30]].asString());
        }
    }
    if(!pMasqueradingVector[31].empty() && pJson.isMember(pMasqueradingVector[31]))
    {
        dirtyFlag_[31] = true;
        if(!pJson[pMasqueradingVector[31]].isNull())
        {
            managerCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[31]].asString());
        }
    }
    if(!pMasqueradingVector[32].empty() && pJson.isMember(pMasqueradingVector[32]))
    {
        dirtyFlag_[32] = true;
        if(!pJson[pMasqueradingVector[32]].isNull())
        {
            riskindex_=std::make_shared<double>(pJson[pMasqueradingVector[32]].asDouble());
        }
    }
    if(!pMasqueradingVector[33].empty() && pJson.isMember(pMasqueradingVector[33]))
    {
        dirtyFlag_[33] = true;
        if(!pJson[pMasqueradingVector[33]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[33]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                riskindexGueltiseit_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[34].empty() && pJson.isMember(pMasqueradingVector[34]))
    {
        dirtyFlag_[34] = true;
        if(!pJson[pMasqueradingVector[34]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[34]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                riskindexLetzteberechnung_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[35].empty() && pJson.isMember(pMasqueradingVector[35]))
    {
        dirtyFlag_[35] = true;
        if(!pJson[pMasqueradingVector[35]].isNull())
        {
            kontoeroeffnungsartCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[35]].asString());
        }
    }
    if(!pMasqueradingVector[36].empty() && pJson.isMember(pMasqueradingVector[36]))
    {
        dirtyFlag_[36] = true;
        if(!pJson[pMasqueradingVector[36]].isNull())
        {
            riskindexberechnenCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[36]].asString());
        }
    }
    if(!pMasqueradingVector[37].empty() && pJson.isMember(pMasqueradingVector[37]))
    {
        dirtyFlag_[37] = true;
        if(!pJson[pMasqueradingVector[37]].isNull())
        {
            kundennaturCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[37]].asString());
        }
    }
    if(!pMasqueradingVector[38].empty() && pJson.isMember(pMasqueradingVector[38]))
    {
        dirtyFlag_[38] = true;
        if(!pJson[pMasqueradingVector[38]].isNull())
        {
            risikokategorieCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[38]].asString());
        }
    }
    if(!pMasqueradingVector[39].empty() && pJson.isMember(pMasqueradingVector[39]))
    {
        dirtyFlag_[39] = true;
        if(!pJson[pMasqueradingVector[39]].isNull())
        {
            pepCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[39]].asString());
        }
    }
    if(!pMasqueradingVector[40].empty() && pJson.isMember(pMasqueradingVector[40]))
    {
        dirtyFlag_[40] = true;
        if(!pJson[pMasqueradingVector[40]].isNull())
        {
            spezialkategorieCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[40]].asString());
        }
    }
    if(!pMasqueradingVector[41].empty() && pJson.isMember(pMasqueradingVector[41]))
    {
        dirtyFlag_[41] = true;
        if(!pJson[pMasqueradingVector[41]].isNull())
        {
            natureCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[41]].asString());
        }
    }
    if(!pMasqueradingVector[42].empty() && pJson.isMember(pMasqueradingVector[42]))
    {
        dirtyFlag_[42] = true;
        if(!pJson[pMasqueradingVector[42]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[42]].asString());
        }
    }
    if(!pMasqueradingVector[43].empty() && pJson.isMember(pMasqueradingVector[43]))
    {
        dirtyFlag_[43] = true;
        if(!pJson[pMasqueradingVector[43]].isNull())
        {
            ledigername_=std::make_shared<std::string>(pJson[pMasqueradingVector[43]].asString());
        }
    }
    if(!pMasqueradingVector[44].empty() && pJson.isMember(pMasqueradingVector[44]))
    {
        dirtyFlag_[44] = true;
        if(!pJson[pMasqueradingVector[44]].isNull())
        {
            vorname_=std::make_shared<std::string>(pJson[pMasqueradingVector[44]].asString());
        }
    }
    if(!pMasqueradingVector[45].empty() && pJson.isMember(pMasqueradingVector[45]))
    {
        dirtyFlag_[45] = true;
        if(!pJson[pMasqueradingVector[45]].isNull())
        {
            cdpartc_=std::make_shared<std::string>(pJson[pMasqueradingVector[45]].asString());
        }
    }
    if(!pMasqueradingVector[46].empty() && pJson.isMember(pMasqueradingVector[46]))
    {
        dirtyFlag_[46] = true;
        if(!pJson[pMasqueradingVector[46]].isNull())
        {
            nationalitaetCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[46]].asString());
        }
    }
    if(!pMasqueradingVector[47].empty() && pJson.isMember(pMasqueradingVector[47]))
    {
        dirtyFlag_[47] = true;
        if(!pJson[pMasqueradingVector[47]].isNull())
        {
            risikolandCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[47]].asString());
        }
    }
    if(!pMasqueradingVector[48].empty() && pJson.isMember(pMasqueradingVector[48]))
    {
        dirtyFlag_[48] = true;
        if(!pJson[pMasqueradingVector[48]].isNull())
        {
            persoenlichbekanntCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[48]].asString());
        }
    }
    if(!pMasqueradingVector[49].empty() && pJson.isMember(pMasqueradingVector[49]))
    {
        dirtyFlag_[49] = true;
        if(!pJson[pMasqueradingVector[49]].isNull())
        {
            risikotaetigkeitCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[49]].asString());
        }
    }
    if(!pMasqueradingVector[50].empty() && pJson.isMember(pMasqueradingVector[50]))
    {
        dirtyFlag_[50] = true;
        if(!pJson[pMasqueradingVector[50]].isNull())
        {
            steuerdomizilCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[50]].asString());
        }
    }
    if(!pMasqueradingVector[51].empty() && pJson.isMember(pMasqueradingVector[51]))
    {
        dirtyFlag_[51] = true;
        if(!pJson[pMasqueradingVector[51]].isNull())
        {
            euTaxstatusCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[51]].asString());
        }
    }
    if(!pMasqueradingVector[52].empty() && pJson.isMember(pMasqueradingVector[52]))
    {
        dirtyFlag_[52] = true;
        if(!pJson[pMasqueradingVector[52]].isNull())
        {
            tin_=std::make_shared<std::string>(pJson[pMasqueradingVector[52]].asString());
        }
    }
    if(!pMasqueradingVector[53].empty() && pJson.isMember(pMasqueradingVector[53]))
    {
        dirtyFlag_[53] = true;
        if(!pJson[pMasqueradingVector[53]].isNull())
        {
            apsysCdrolpersi_=std::make_shared<std::string>(pJson[pMasqueradingVector[53]].asString());
        }
    }
    if(!pMasqueradingVector[54].empty() && pJson.isMember(pMasqueradingVector[54]))
    {
        dirtyFlag_[54] = true;
        if(!pJson[pMasqueradingVector[54]].isNull())
        {
            vertragsprachCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[54]].asString());
        }
    }
    if(!pMasqueradingVector[55].empty() && pJson.isMember(pMasqueradingVector[55]))
    {
        dirtyFlag_[55] = true;
        if(!pJson[pMasqueradingVector[55]].isNull())
        {
            vermoegenskategorieIhagCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[55]].asString());
        }
    }
    if(!pMasqueradingVector[56].empty() && pJson.isMember(pMasqueradingVector[56]))
    {
        dirtyFlag_[56] = true;
        if(!pJson[pMasqueradingVector[56]].isNull())
        {
            apsysIntishs_=std::make_shared<std::string>(pJson[pMasqueradingVector[56]].asString());
        }
    }
    if(!pMasqueradingVector[57].empty() && pJson.isMember(pMasqueradingVector[57]))
    {
        dirtyFlag_[57] = true;
        if(!pJson[pMasqueradingVector[57]].isNull())
        {
            apsysIntilgs_=std::make_shared<std::string>(pJson[pMasqueradingVector[57]].asString());
        }
    }
    if(!pMasqueradingVector[58].empty() && pJson.isMember(pMasqueradingVector[58]))
    {
        dirtyFlag_[58] = true;
        if(!pJson[pMasqueradingVector[58]].isNull())
        {
            gesamtvermoegenCd_=std::make_shared<double>(pJson[pMasqueradingVector[58]].asDouble());
        }
    }
    if(!pMasqueradingVector[59].empty() && pJson.isMember(pMasqueradingVector[59]))
    {
        dirtyFlag_[59] = true;
        if(!pJson[pMasqueradingVector[59]].isNull())
        {
            complianceOkCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[59]].asString());
        }
    }
    if(!pMasqueradingVector[60].empty() && pJson.isMember(pMasqueradingVector[60]))
    {
        dirtyFlag_[60] = true;
        if(!pJson[pMasqueradingVector[60]].isNull())
        {
            complianceOkBemerkung_=std::make_shared<std::string>(pJson[pMasqueradingVector[60]].asString());
        }
    }
    if(!pMasqueradingVector[61].empty() && pJson.isMember(pMasqueradingVector[61]))
    {
        dirtyFlag_[61] = true;
        if(!pJson[pMasqueradingVector[61]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[61]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                complianceOkDatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[62].empty() && pJson.isMember(pMasqueradingVector[62]))
    {
        dirtyFlag_[62] = true;
        if(!pJson[pMasqueradingVector[62]].isNull())
        {
            complianceOkUserid_=std::make_shared<std::string>(pJson[pMasqueradingVector[62]].asString());
        }
    }
    if(!pMasqueradingVector[63].empty() && pJson.isMember(pMasqueradingVector[63]))
    {
        dirtyFlag_[63] = true;
        if(!pJson[pMasqueradingVector[63]].isNull())
        {
            einVermoegen_=std::make_shared<double>(pJson[pMasqueradingVector[63]].asDouble());
        }
    }
    if(!pMasqueradingVector[64].empty() && pJson.isMember(pMasqueradingVector[64]))
    {
        dirtyFlag_[64] = true;
        if(!pJson[pMasqueradingVector[64]].isNull())
        {
            segmentierungCd_=std::make_shared<double>(pJson[pMasqueradingVector[64]].asDouble());
        }
    }
    if(!pMasqueradingVector[65].empty() && pJson.isMember(pMasqueradingVector[65]))
    {
        dirtyFlag_[65] = true;
        if(!pJson[pMasqueradingVector[65]].isNull())
        {
            aktid_=std::make_shared<double>(pJson[pMasqueradingVector[65]].asDouble());
        }
    }
    if(!pMasqueradingVector[66].empty() && pJson.isMember(pMasqueradingVector[66]))
    {
        dirtyFlag_[66] = true;
        if(!pJson[pMasqueradingVector[66]].isNull())
        {
            validid_=std::make_shared<double>(pJson[pMasqueradingVector[66]].asDouble());
        }
    }
    if(!pMasqueradingVector[67].empty() && pJson.isMember(pMasqueradingVector[67]))
    {
        dirtyFlag_[67] = true;
        if(!pJson[pMasqueradingVector[67]].isNull())
        {
            validCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[67]].asString());
        }
    }
    if(!pMasqueradingVector[68].empty() && pJson.isMember(pMasqueradingVector[68]))
    {
        dirtyFlag_[68] = true;
        if(!pJson[pMasqueradingVector[68]].isNull())
        {
            validuser_=std::make_shared<std::string>(pJson[pMasqueradingVector[68]].asString());
        }
    }
    if(!pMasqueradingVector[69].empty() && pJson.isMember(pMasqueradingVector[69]))
    {
        dirtyFlag_[69] = true;
        if(!pJson[pMasqueradingVector[69]].isNull())
        {
            encSalt_=std::make_shared<std::string>(pJson[pMasqueradingVector[69]].asString());
        }
    }
    if(!pMasqueradingVector[70].empty() && pJson.isMember(pMasqueradingVector[70]))
    {
        dirtyFlag_[70] = true;
        if(!pJson[pMasqueradingVector[70]].isNull())
        {
            bezeichnungEnc_=std::make_shared<std::string>(pJson[pMasqueradingVector[70]].asString());
        }
    }
    if(!pMasqueradingVector[71].empty() && pJson.isMember(pMasqueradingVector[71]))
    {
        dirtyFlag_[71] = true;
        if(!pJson[pMasqueradingVector[71]].isNull())
        {
            apsysCdmotifparts_=std::make_shared<std::string>(pJson[pMasqueradingVector[71]].asString());
        }
    }
    if(!pMasqueradingVector[72].empty() && pJson.isMember(pMasqueradingVector[72]))
    {
        dirtyFlag_[72] = true;
        if(!pJson[pMasqueradingVector[72]].isNull())
        {
            apsysCdindus0s_=std::make_shared<std::string>(pJson[pMasqueradingVector[72]].asString());
        }
    }
    if(!pMasqueradingVector[73].empty() && pJson.isMember(pMasqueradingVector[73]))
    {
        dirtyFlag_[73] = true;
        if(!pJson[pMasqueradingVector[73]].isNull())
        {
            apsysFlagpreavisexec_=std::make_shared<std::string>(pJson[pMasqueradingVector[73]].asString());
        }
    }
    if(!pMasqueradingVector[74].empty() && pJson.isMember(pMasqueradingVector[74]))
    {
        dirtyFlag_[74] = true;
        if(!pJson[pMasqueradingVector[74]].isNull())
        {
            apsysCdaviobispecc_=std::make_shared<std::string>(pJson[pMasqueradingVector[74]].asString());
        }
    }
    if(!pMasqueradingVector[75].empty() && pJson.isMember(pMasqueradingVector[75]))
    {
        dirtyFlag_[75] = true;
        if(!pJson[pMasqueradingVector[75]].isNull())
        {
            apsysFlaghisperc_=std::make_shared<std::string>(pJson[pMasqueradingVector[75]].asString());
        }
    }
    if(!pMasqueradingVector[76].empty() && pJson.isMember(pMasqueradingVector[76]))
    {
        dirtyFlag_[76] = true;
        if(!pJson[pMasqueradingVector[76]].isNull())
        {
            apsysRepamanuc_=std::make_shared<std::string>(pJson[pMasqueradingVector[76]].asString());
        }
    }
    if(!pMasqueradingVector[77].empty() && pJson.isMember(pMasqueradingVector[77]))
    {
        dirtyFlag_[77] = true;
        if(!pJson[pMasqueradingVector[77]].isNull())
        {
            apsysPerdevcalc_=std::make_shared<std::string>(pJson[pMasqueradingVector[77]].asString());
        }
    }
    if(!pMasqueradingVector[78].empty() && pJson.isMember(pMasqueradingVector[78]))
    {
        dirtyFlag_[78] = true;
        if(!pJson[pMasqueradingVector[78]].isNull())
        {
            apsysFlaguktaxc_=std::make_shared<std::string>(pJson[pMasqueradingVector[78]].asString());
        }
    }
    if(!pMasqueradingVector[79].empty() && pJson.isMember(pMasqueradingVector[79]))
    {
        dirtyFlag_[79] = true;
        if(!pJson[pMasqueradingVector[79]].isNull())
        {
            apsysCdnogas_=std::make_shared<std::string>(pJson[pMasqueradingVector[79]].asString());
        }
    }
    if(!pMasqueradingVector[80].empty() && pJson.isMember(pMasqueradingVector[80]))
    {
        dirtyFlag_[80] = true;
        if(!pJson[pMasqueradingVector[80]].isNull())
        {
            apsysStatfiscc_=std::make_shared<std::string>(pJson[pMasqueradingVector[80]].asString());
        }
    }
    if(!pMasqueradingVector[81].empty() && pJson.isMember(pMasqueradingVector[81]))
    {
        dirtyFlag_[81] = true;
        if(!pJson[pMasqueradingVector[81]].isNull())
        {
            apsysFlagfwti_=std::make_shared<std::string>(pJson[pMasqueradingVector[81]].asString());
        }
    }
    if(!pMasqueradingVector[82].empty() && pJson.isMember(pMasqueradingVector[82]))
    {
        dirtyFlag_[82] = true;
        if(!pJson[pMasqueradingVector[82]].isNull())
        {
            apsysFlagfwtuknrsdi_=std::make_shared<std::string>(pJson[pMasqueradingVector[82]].asString());
        }
    }
    if(!pMasqueradingVector[83].empty() && pJson.isMember(pMasqueradingVector[83]))
    {
        dirtyFlag_[83] = true;
        if(!pJson[pMasqueradingVector[83]].isNull())
        {
            apsysFlagfwttaxspegei_=std::make_shared<std::string>(pJson[pMasqueradingVector[83]].asString());
        }
    }
    if(!pMasqueradingVector[84].empty() && pJson.isMember(pMasqueradingVector[84]))
    {
        dirtyFlag_[84] = true;
        if(!pJson[pMasqueradingVector[84]].isNull())
        {
            apsysCdfwtoptregulfiscancc_=std::make_shared<std::string>(pJson[pMasqueradingVector[84]].asString());
        }
    }
    if(!pMasqueradingVector[85].empty() && pJson.isMember(pMasqueradingVector[85]))
    {
        dirtyFlag_[85] = true;
        if(!pJson[pMasqueradingVector[85]].isNull())
        {
            apsysCdfwtstatregulfiscancc_=std::make_shared<std::string>(pJson[pMasqueradingVector[85]].asString());
        }
    }
    if(!pMasqueradingVector[86].empty() && pJson.isMember(pMasqueradingVector[86]))
    {
        dirtyFlag_[86] = true;
        if(!pJson[pMasqueradingVector[86]].isNull())
        {
            apsysCdfwtoptregulfiscfutc_=std::make_shared<std::string>(pJson[pMasqueradingVector[86]].asString());
        }
    }
    if(!pMasqueradingVector[87].empty() && pJson.isMember(pMasqueradingVector[87]))
    {
        dirtyFlag_[87] = true;
        if(!pJson[pMasqueradingVector[87]].isNull())
        {
            steuerlandAbgstCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[87]].asString());
        }
    }
    if(!pMasqueradingVector[88].empty() && pJson.isMember(pMasqueradingVector[88]))
    {
        dirtyFlag_[88] = true;
        if(!pJson[pMasqueradingVector[88]].isNull())
        {
            apsysCdnatures_=std::make_shared<std::string>(pJson[pMasqueradingVector[88]].asString());
        }
    }
    if(!pMasqueradingVector[89].empty() && pJson.isMember(pMasqueradingVector[89]))
    {
        dirtyFlag_[89] = true;
        if(!pJson[pMasqueradingVector[89]].isNull())
        {
            apsysShnas_=std::make_shared<std::string>(pJson[pMasqueradingVector[89]].asString());
        }
    }
    if(!pMasqueradingVector[90].empty() && pJson.isMember(pMasqueradingVector[90]))
    {
        dirtyFlag_[90] = true;
        if(!pJson[pMasqueradingVector[90]].isNull())
        {
            apsysCdpyhqdomis_=std::make_shared<std::string>(pJson[pMasqueradingVector[90]].asString());
        }
    }
    if(!pMasqueradingVector[91].empty() && pJson.isMember(pMasqueradingVector[91]))
    {
        dirtyFlag_[91] = true;
        if(!pJson[pMasqueradingVector[91]].isNull())
        {
            apsysCdpermi_=std::make_shared<double>(pJson[pMasqueradingVector[91]].asDouble());
        }
    }
    if(!pMasqueradingVector[92].empty() && pJson.isMember(pMasqueradingVector[92]))
    {
        dirtyFlag_[92] = true;
        if(!pJson[pMasqueradingVector[92]].isNull())
        {
            apsysIdrcis_=std::make_shared<std::string>(pJson[pMasqueradingVector[92]].asString());
        }
    }
    if(!pMasqueradingVector[93].empty() && pJson.isMember(pMasqueradingVector[93]))
    {
        dirtyFlag_[93] = true;
        if(!pJson[pMasqueradingVector[93]].isNull())
        {
            apsysFlagisttc_=std::make_shared<std::string>(pJson[pMasqueradingVector[93]].asString());
        }
    }
    if(!pMasqueradingVector[94].empty() && pJson.isMember(pMasqueradingVector[94]))
    {
        dirtyFlag_[94] = true;
        if(!pJson[pMasqueradingVector[94]].isNull())
        {
            apsysDevevals_=std::make_shared<std::string>(pJson[pMasqueradingVector[94]].asString());
        }
    }
    if(!pMasqueradingVector[95].empty() && pJson.isMember(pMasqueradingVector[95]))
    {
        dirtyFlag_[95] = true;
        if(!pJson[pMasqueradingVector[95]].isNull())
        {
            apsysIdstrucs_=std::make_shared<std::string>(pJson[pMasqueradingVector[95]].asString());
        }
    }
    if(!pMasqueradingVector[96].empty() && pJson.isMember(pMasqueradingVector[96]))
    {
        dirtyFlag_[96] = true;
        if(!pJson[pMasqueradingVector[96]].isNull())
        {
            apsysSuiviagts_=std::make_shared<std::string>(pJson[pMasqueradingVector[96]].asString());
        }
    }
    if(!pMasqueradingVector[97].empty() && pJson.isMember(pMasqueradingVector[97]))
    {
        dirtyFlag_[97] = true;
        if(!pJson[pMasqueradingVector[97]].isNull())
        {
            apsysCdinduscssfs_=std::make_shared<std::string>(pJson[pMasqueradingVector[97]].asString());
        }
    }
    if(!pMasqueradingVector[98].empty() && pJson.isMember(pMasqueradingVector[98]))
    {
        dirtyFlag_[98] = true;
        if(!pJson[pMasqueradingVector[98]].isNull())
        {
            apsysCdindusbluxs_=std::make_shared<std::string>(pJson[pMasqueradingVector[98]].asString());
        }
    }
    if(!pMasqueradingVector[99].empty() && pJson.isMember(pMasqueradingVector[99]))
    {
        dirtyFlag_[99] = true;
        if(!pJson[pMasqueradingVector[99]].isNull())
        {
            apsysCdindussbuba_=std::make_shared<std::string>(pJson[pMasqueradingVector[99]].asString());
        }
    }
    if(!pMasqueradingVector[100].empty() && pJson.isMember(pMasqueradingVector[100]))
    {
        dirtyFlag_[100] = true;
        if(!pJson[pMasqueradingVector[100]].isNull())
        {
            apsysCdindussbns_=std::make_shared<std::string>(pJson[pMasqueradingVector[100]].asString());
        }
    }
    if(!pMasqueradingVector[101].empty() && pJson.isMember(pMasqueradingVector[101]))
    {
        dirtyFlag_[101] = true;
        if(!pJson[pMasqueradingVector[101]].isNull())
        {
            apsysGrmtevals_=std::make_shared<std::string>(pJson[pMasqueradingVector[101]].asString());
        }
    }
    if(!pMasqueradingVector[102].empty() && pJson.isMember(pMasqueradingVector[102]))
    {
        dirtyFlag_[102] = true;
        if(!pJson[pMasqueradingVector[102]].isNull())
        {
            apsysIdpocs_=std::make_shared<std::string>(pJson[pMasqueradingVector[102]].asString());
        }
    }
    if(!pMasqueradingVector[103].empty() && pJson.isMember(pMasqueradingVector[103]))
    {
        dirtyFlag_[103] = true;
        if(!pJson[pMasqueradingVector[103]].isNull())
        {
            apsysInfo_=std::make_shared<std::string>(pJson[pMasqueradingVector[103]].asString());
        }
    }
    if(!pMasqueradingVector[104].empty() && pJson.isMember(pMasqueradingVector[104]))
    {
        dirtyFlag_[104] = true;
        if(!pJson[pMasqueradingVector[104]].isNull())
        {
            apsysIdents_=std::make_shared<std::string>(pJson[pMasqueradingVector[104]].asString());
        }
    }
    if(!pMasqueradingVector[105].empty() && pJson.isMember(pMasqueradingVector[105]))
    {
        dirtyFlag_[105] = true;
        if(!pJson[pMasqueradingVector[105]].isNull())
        {
            apsysStatusOpec_=std::make_shared<std::string>(pJson[pMasqueradingVector[105]].asString());
        }
    }
    if(!pMasqueradingVector[106].empty() && pJson.isMember(pMasqueradingVector[106]))
    {
        dirtyFlag_[106] = true;
        if(!pJson[pMasqueradingVector[106]].isNull())
        {
            apsysErri_=std::make_shared<double>(pJson[pMasqueradingVector[106]].asDouble());
        }
    }
    if(!pMasqueradingVector[107].empty() && pJson.isMember(pMasqueradingVector[107]))
    {
        dirtyFlag_[107] = true;
        if(!pJson[pMasqueradingVector[107]].isNull())
        {
            nationalitaet2Cd_=std::make_shared<std::string>(pJson[pMasqueradingVector[107]].asString());
        }
    }
    if(!pMasqueradingVector[108].empty() && pJson.isMember(pMasqueradingVector[108]))
    {
        dirtyFlag_[108] = true;
        if(!pJson[pMasqueradingVector[108]].isNull())
        {
            nationalitaet3Cd_=std::make_shared<std::string>(pJson[pMasqueradingVector[108]].asString());
        }
    }
    if(!pMasqueradingVector[109].empty() && pJson.isMember(pMasqueradingVector[109]))
    {
        dirtyFlag_[109] = true;
        if(!pJson[pMasqueradingVector[109]].isNull())
        {
            vermoegensursprung2Cd_=std::make_shared<std::string>(pJson[pMasqueradingVector[109]].asString());
        }
    }
    if(!pMasqueradingVector[110].empty() && pJson.isMember(pMasqueradingVector[110]))
    {
        dirtyFlag_[110] = true;
        if(!pJson[pMasqueradingVector[110]].isNull())
        {
            vermoegensursprung2_=std::make_shared<std::string>(pJson[pMasqueradingVector[110]].asString());
        }
    }
    if(!pMasqueradingVector[111].empty() && pJson.isMember(pMasqueradingVector[111]))
    {
        dirtyFlag_[111] = true;
        if(!pJson[pMasqueradingVector[111]].isNull())
        {
            approvalStep1Cd_=std::make_shared<std::string>(pJson[pMasqueradingVector[111]].asString());
        }
    }
    if(!pMasqueradingVector[112].empty() && pJson.isMember(pMasqueradingVector[112]))
    {
        dirtyFlag_[112] = true;
        if(!pJson[pMasqueradingVector[112]].isNull())
        {
            approvalStep1User_=std::make_shared<std::string>(pJson[pMasqueradingVector[112]].asString());
        }
    }
    if(!pMasqueradingVector[113].empty() && pJson.isMember(pMasqueradingVector[113]))
    {
        dirtyFlag_[113] = true;
        if(!pJson[pMasqueradingVector[113]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[113]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep1Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[114].empty() && pJson.isMember(pMasqueradingVector[114]))
    {
        dirtyFlag_[114] = true;
        if(!pJson[pMasqueradingVector[114]].isNull())
        {
            approvalStep2Cd_=std::make_shared<std::string>(pJson[pMasqueradingVector[114]].asString());
        }
    }
    if(!pMasqueradingVector[115].empty() && pJson.isMember(pMasqueradingVector[115]))
    {
        dirtyFlag_[115] = true;
        if(!pJson[pMasqueradingVector[115]].isNull())
        {
            approvalStep2User_=std::make_shared<std::string>(pJson[pMasqueradingVector[115]].asString());
        }
    }
    if(!pMasqueradingVector[116].empty() && pJson.isMember(pMasqueradingVector[116]))
    {
        dirtyFlag_[116] = true;
        if(!pJson[pMasqueradingVector[116]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[116]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep2Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[117].empty() && pJson.isMember(pMasqueradingVector[117]))
    {
        dirtyFlag_[117] = true;
        if(!pJson[pMasqueradingVector[117]].isNull())
        {
            approvalStep3Cd_=std::make_shared<std::string>(pJson[pMasqueradingVector[117]].asString());
        }
    }
    if(!pMasqueradingVector[118].empty() && pJson.isMember(pMasqueradingVector[118]))
    {
        dirtyFlag_[118] = true;
        if(!pJson[pMasqueradingVector[118]].isNull())
        {
            approvalStep3User_=std::make_shared<std::string>(pJson[pMasqueradingVector[118]].asString());
        }
    }
    if(!pMasqueradingVector[119].empty() && pJson.isMember(pMasqueradingVector[119]))
    {
        dirtyFlag_[119] = true;
        if(!pJson[pMasqueradingVector[119]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[119]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep3Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[120].empty() && pJson.isMember(pMasqueradingVector[120]))
    {
        dirtyFlag_[120] = true;
        if(!pJson[pMasqueradingVector[120]].isNull())
        {
            approvalStep4Cd_=std::make_shared<std::string>(pJson[pMasqueradingVector[120]].asString());
        }
    }
    if(!pMasqueradingVector[121].empty() && pJson.isMember(pMasqueradingVector[121]))
    {
        dirtyFlag_[121] = true;
        if(!pJson[pMasqueradingVector[121]].isNull())
        {
            approvalStep4User_=std::make_shared<std::string>(pJson[pMasqueradingVector[121]].asString());
        }
    }
    if(!pMasqueradingVector[122].empty() && pJson.isMember(pMasqueradingVector[122]))
    {
        dirtyFlag_[122] = true;
        if(!pJson[pMasqueradingVector[122]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[122]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep4Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[123].empty() && pJson.isMember(pMasqueradingVector[123]))
    {
        dirtyFlag_[123] = true;
        if(!pJson[pMasqueradingVector[123]].isNull())
        {
            approvalStep5Cd_=std::make_shared<std::string>(pJson[pMasqueradingVector[123]].asString());
        }
    }
    if(!pMasqueradingVector[124].empty() && pJson.isMember(pMasqueradingVector[124]))
    {
        dirtyFlag_[124] = true;
        if(!pJson[pMasqueradingVector[124]].isNull())
        {
            approvalStep5User_=std::make_shared<std::string>(pJson[pMasqueradingVector[124]].asString());
        }
    }
    if(!pMasqueradingVector[125].empty() && pJson.isMember(pMasqueradingVector[125]))
    {
        dirtyFlag_[125] = true;
        if(!pJson[pMasqueradingVector[125]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[125]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep5Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[126].empty() && pJson.isMember(pMasqueradingVector[126]))
    {
        dirtyFlag_[126] = true;
        if(!pJson[pMasqueradingVector[126]].isNull())
        {
            approvalStep1Bem_=std::make_shared<std::string>(pJson[pMasqueradingVector[126]].asString());
        }
    }
    if(!pMasqueradingVector[127].empty() && pJson.isMember(pMasqueradingVector[127]))
    {
        dirtyFlag_[127] = true;
        if(!pJson[pMasqueradingVector[127]].isNull())
        {
            approvalStep2Bem_=std::make_shared<std::string>(pJson[pMasqueradingVector[127]].asString());
        }
    }
    if(!pMasqueradingVector[128].empty() && pJson.isMember(pMasqueradingVector[128]))
    {
        dirtyFlag_[128] = true;
        if(!pJson[pMasqueradingVector[128]].isNull())
        {
            approvalStep3Bem_=std::make_shared<std::string>(pJson[pMasqueradingVector[128]].asString());
        }
    }
    if(!pMasqueradingVector[129].empty() && pJson.isMember(pMasqueradingVector[129]))
    {
        dirtyFlag_[129] = true;
        if(!pJson[pMasqueradingVector[129]].isNull())
        {
            approvalStep4Bem_=std::make_shared<std::string>(pJson[pMasqueradingVector[129]].asString());
        }
    }
    if(!pMasqueradingVector[130].empty() && pJson.isMember(pMasqueradingVector[130]))
    {
        dirtyFlag_[130] = true;
        if(!pJson[pMasqueradingVector[130]].isNull())
        {
            approvalStep5Bem_=std::make_shared<std::string>(pJson[pMasqueradingVector[130]].asString());
        }
    }
    if(!pMasqueradingVector[131].empty() && pJson.isMember(pMasqueradingVector[131]))
    {
        dirtyFlag_[131] = true;
        if(!pJson[pMasqueradingVector[131]].isNull())
        {
            approvalStep1AssesCd_=std::make_shared<double>(pJson[pMasqueradingVector[131]].asDouble());
        }
    }
    if(!pMasqueradingVector[132].empty() && pJson.isMember(pMasqueradingVector[132]))
    {
        dirtyFlag_[132] = true;
        if(!pJson[pMasqueradingVector[132]].isNull())
        {
            approvalStep2AssesCd_=std::make_shared<double>(pJson[pMasqueradingVector[132]].asDouble());
        }
    }
    if(!pMasqueradingVector[133].empty() && pJson.isMember(pMasqueradingVector[133]))
    {
        dirtyFlag_[133] = true;
        if(!pJson[pMasqueradingVector[133]].isNull())
        {
            approvalStep3AssesCd_=std::make_shared<double>(pJson[pMasqueradingVector[133]].asDouble());
        }
    }
    if(!pMasqueradingVector[134].empty() && pJson.isMember(pMasqueradingVector[134]))
    {
        dirtyFlag_[134] = true;
        if(!pJson[pMasqueradingVector[134]].isNull())
        {
            approvalStep4AssesCd_=std::make_shared<double>(pJson[pMasqueradingVector[134]].asDouble());
        }
    }
    if(!pMasqueradingVector[135].empty() && pJson.isMember(pMasqueradingVector[135]))
    {
        dirtyFlag_[135] = true;
        if(!pJson[pMasqueradingVector[135]].isNull())
        {
            approvalStep5AssesCd_=std::make_shared<double>(pJson[pMasqueradingVector[135]].asDouble());
        }
    }
    if(!pMasqueradingVector[136].empty() && pJson.isMember(pMasqueradingVector[136]))
    {
        dirtyFlag_[136] = true;
        if(!pJson[pMasqueradingVector[136]].isNull())
        {
            approvalStatusCd_=std::make_shared<double>(pJson[pMasqueradingVector[136]].asDouble());
        }
    }
    if(!pMasqueradingVector[137].empty() && pJson.isMember(pMasqueradingVector[137]))
    {
        dirtyFlag_[137] = true;
        if(!pJson[pMasqueradingVector[137]].isNull())
        {
            clientStatusCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[137]].asString());
        }
    }
    if(!pMasqueradingVector[138].empty() && pJson.isMember(pMasqueradingVector[138]))
    {
        dirtyFlag_[138] = true;
        if(!pJson[pMasqueradingVector[138]].isNull())
        {
            dischargeOrdersCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[138]].asString());
        }
    }
    if(!pMasqueradingVector[139].empty() && pJson.isMember(pMasqueradingVector[139]))
    {
        dirtyFlag_[139] = true;
        if(!pJson[pMasqueradingVector[139]].isNull())
        {
            printSummaryHoldmailOnlyCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[139]].asString());
        }
    }
    if(!pMasqueradingVector[140].empty() && pJson.isMember(pMasqueradingVector[140]))
    {
        dirtyFlag_[140] = true;
        if(!pJson[pMasqueradingVector[140]].isNull())
        {
            ebankingContractCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[140]].asString());
        }
    }
    if(!pMasqueradingVector[141].empty() && pJson.isMember(pMasqueradingVector[141]))
    {
        dirtyFlag_[141] = true;
        if(!pJson[pMasqueradingVector[141]].isNull())
        {
            ebankingContractLanguageCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[141]].asString());
        }
    }
    if(!pMasqueradingVector[142].empty() && pJson.isMember(pMasqueradingVector[142]))
    {
        dirtyFlag_[142] = true;
        if(!pJson[pMasqueradingVector[142]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[142]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtechdiaryl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[143].empty() && pJson.isMember(pMasqueradingVector[143]))
    {
        dirtyFlag_[143] = true;
        if(!pJson[pMasqueradingVector[143]].isNull())
        {
            apsysMotdiarys_=std::make_shared<std::string>(pJson[pMasqueradingVector[143]].asString());
        }
    }
    if(!pMasqueradingVector[144].empty() && pJson.isMember(pMasqueradingVector[144]))
    {
        dirtyFlag_[144] = true;
        if(!pJson[pMasqueradingVector[144]].isNull())
        {
            apsysIdtypcliirss_=std::make_shared<std::string>(pJson[pMasqueradingVector[144]].asString());
        }
    }
    if(!pMasqueradingVector[145].empty() && pJson.isMember(pMasqueradingVector[145]))
    {
        dirtyFlag_[145] = true;
        if(!pJson[pMasqueradingVector[145]].isNull())
        {
            apsysIdrciqis_=std::make_shared<std::string>(pJson[pMasqueradingVector[145]].asString());
        }
    }
    if(!pMasqueradingVector[146].empty() && pJson.isMember(pMasqueradingVector[146]))
    {
        dirtyFlag_[146] = true;
        if(!pJson[pMasqueradingVector[146]].isNull())
        {
            apsysIdrcifatcas_=std::make_shared<std::string>(pJson[pMasqueradingVector[146]].asString());
        }
    }
    if(!pMasqueradingVector[147].empty() && pJson.isMember(pMasqueradingVector[147]))
    {
        dirtyFlag_[147] = true;
        if(!pJson[pMasqueradingVector[147]].isNull())
        {
            mailingTarifTypeCd_=std::make_shared<double>(pJson[pMasqueradingVector[147]].asDouble());
        }
    }
    if(!pMasqueradingVector[148].empty() && pJson.isMember(pMasqueradingVector[148]))
    {
        dirtyFlag_[148] = true;
        if(!pJson[pMasqueradingVector[148]].isNull())
        {
            registeredCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[148]].asString());
        }
    }
    if(!pMasqueradingVector[149].empty() && pJson.isMember(pMasqueradingVector[149]))
    {
        dirtyFlag_[149] = true;
        if(!pJson[pMasqueradingVector[149]].isNull())
        {
            registeredMailCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[149]].asString());
        }
    }
    if(!pMasqueradingVector[150].empty() && pJson.isMember(pMasqueradingVector[150]))
    {
        dirtyFlag_[150] = true;
        if(!pJson[pMasqueradingVector[150]].isNull())
        {
            apsysNbperscpartiel_=std::make_shared<double>(pJson[pMasqueradingVector[150]].asDouble());
        }
    }
    if(!pMasqueradingVector[151].empty() && pJson.isMember(pMasqueradingVector[151]))
    {
        dirtyFlag_[151] = true;
        if(!pJson[pMasqueradingVector[151]].isNull())
        {
            assetValueTierCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[151]].asString());
        }
    }
    if(!pMasqueradingVector[152].empty() && pJson.isMember(pMasqueradingVector[152]))
    {
        dirtyFlag_[152] = true;
        if(!pJson[pMasqueradingVector[152]].isNull())
        {
            relationshipTypeAmlCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[152]].asString());
        }
    }
    if(!pMasqueradingVector[153].empty() && pJson.isMember(pMasqueradingVector[153]))
    {
        dirtyFlag_[153] = true;
        if(!pJson[pMasqueradingVector[153]].isNull())
        {
            cbAssetValueTierCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[153]].asString());
        }
    }
    if(!pMasqueradingVector[154].empty() && pJson.isMember(pMasqueradingVector[154]))
    {
        dirtyFlag_[154] = true;
        if(!pJson[pMasqueradingVector[154]].isNull())
        {
            approvalScore_=std::make_shared<double>(pJson[pMasqueradingVector[154]].asDouble());
        }
    }
    if(!pMasqueradingVector[155].empty() && pJson.isMember(pMasqueradingVector[155]))
    {
        dirtyFlag_[155] = true;
        if(!pJson[pMasqueradingVector[155]].isNull())
        {
            approvalScoreSteps_=std::make_shared<double>(pJson[pMasqueradingVector[155]].asDouble());
        }
    }
    if(!pMasqueradingVector[156].empty() && pJson.isMember(pMasqueradingVector[156]))
    {
        dirtyFlag_[156] = true;
        if(!pJson[pMasqueradingVector[156]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[156]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtdebpartl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[157].empty() && pJson.isMember(pMasqueradingVector[157]))
    {
        dirtyFlag_[157] = true;
        if(!pJson[pMasqueradingVector[157]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[157]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtfinpartl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[158].empty() && pJson.isMember(pMasqueradingVector[158]))
    {
        dirtyFlag_[158] = true;
        if(!pJson[pMasqueradingVector[158]].isNull())
        {
            apsysCdmotifclos_=std::make_shared<std::string>(pJson[pMasqueradingVector[158]].asString());
        }
    }
    if(!pMasqueradingVector[159].empty() && pJson.isMember(pMasqueradingVector[159]))
    {
        dirtyFlag_[159] = true;
        if(!pJson[pMasqueradingVector[159]].isNull())
        {
            apsysCdnaturecpartieemirc_=std::make_shared<std::string>(pJson[pMasqueradingVector[159]].asString());
        }
    }
    if(!pMasqueradingVector[160].empty() && pJson.isMember(pMasqueradingVector[160]))
    {
        dirtyFlag_[160] = true;
        if(!pJson[pMasqueradingVector[160]].isNull())
        {
            apsysFlagotheremirc_=std::make_shared<std::string>(pJson[pMasqueradingVector[160]].asString());
        }
    }
    if(!pMasqueradingVector[161].empty() && pJson.isMember(pMasqueradingVector[161]))
    {
        dirtyFlag_[161] = true;
        if(!pJson[pMasqueradingVector[161]].isNull())
        {
            apsysCdindusemirs_=std::make_shared<std::string>(pJson[pMasqueradingVector[161]].asString());
        }
    }
    if(!pMasqueradingVector[162].empty() && pJson.isMember(pMasqueradingVector[162]))
    {
        dirtyFlag_[162] = true;
        if(!pJson[pMasqueradingVector[162]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[162]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                openedInApsysDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[163].empty() && pJson.isMember(pMasqueradingVector[163]))
    {
        dirtyFlag_[163] = true;
        if(!pJson[pMasqueradingVector[163]].isNull())
        {
            apsysCdnaturecpartiefmiac_=std::make_shared<std::string>(pJson[pMasqueradingVector[163]].asString());
        }
    }
    if(!pMasqueradingVector[164].empty() && pJson.isMember(pMasqueradingVector[164]))
    {
        dirtyFlag_[164] = true;
        if(!pJson[pMasqueradingVector[164]].isNull())
        {
            ebankingClosedCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[164]].asString());
        }
    }
    if(!pMasqueradingVector[165].empty() && pJson.isMember(pMasqueradingVector[165]))
    {
        dirtyFlag_[165] = true;
        if(!pJson[pMasqueradingVector[165]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[165]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                ebankingClosingdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[166].empty() && pJson.isMember(pMasqueradingVector[166]))
    {
        dirtyFlag_[166] = true;
        if(!pJson[pMasqueradingVector[166]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[166]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                kycReviewProcessStartDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[167].empty() && pJson.isMember(pMasqueradingVector[167]))
    {
        dirtyFlag_[167] = true;
        if(!pJson[pMasqueradingVector[167]].isNull())
        {
            remarks_=std::make_shared<std::string>(pJson[pMasqueradingVector[167]].asString());
        }
    }
    if(!pMasqueradingVector[168].empty() && pJson.isMember(pMasqueradingVector[168]))
    {
        dirtyFlag_[168] = true;
        if(!pJson[pMasqueradingVector[168]].isNull())
        {
            transactionBlCountryCd_=std::make_shared<double>(pJson[pMasqueradingVector[168]].asDouble());
        }
    }
    if(!pMasqueradingVector[169].empty() && pJson.isMember(pMasqueradingVector[169]))
    {
        dirtyFlag_[169] = true;
        if(!pJson[pMasqueradingVector[169]].isNull())
        {
            clientgroupCd_=std::make_shared<double>(pJson[pMasqueradingVector[169]].asDouble());
        }
    }
    if(!pMasqueradingVector[170].empty() && pJson.isMember(pMasqueradingVector[170]))
    {
        dirtyFlag_[170] = true;
        if(!pJson[pMasqueradingVector[170]].isNull())
        {
            riskindexCalc_=std::make_shared<double>(pJson[pMasqueradingVector[170]].asDouble());
        }
    }
    if(!pMasqueradingVector[171].empty() && pJson.isMember(pMasqueradingVector[171]))
    {
        dirtyFlag_[171] = true;
        if(!pJson[pMasqueradingVector[171]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[171]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                lastCalcCriMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[172].empty() && pJson.isMember(pMasqueradingVector[172]))
    {
        dirtyFlag_[172] = true;
        if(!pJson[pMasqueradingVector[172]].isNull())
        {
            risikokategorieCalcCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[172]].asString());
        }
    }
    if(!pMasqueradingVector[173].empty() && pJson.isMember(pMasqueradingVector[173]))
    {
        dirtyFlag_[173] = true;
        if(!pJson[pMasqueradingVector[173]].isNull())
        {
            riskindexGroup_=std::make_shared<double>(pJson[pMasqueradingVector[173]].asDouble());
        }
    }
    if(!pMasqueradingVector[174].empty() && pJson.isMember(pMasqueradingVector[174]))
    {
        dirtyFlag_[174] = true;
        if(!pJson[pMasqueradingVector[174]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[174]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                estAmountRemWithMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[175].empty() && pJson.isMember(pMasqueradingVector[175]))
    {
        dirtyFlag_[175] = true;
        if(!pJson[pMasqueradingVector[175]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[175]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                gesamtvermoegenMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[176].empty() && pJson.isMember(pMasqueradingVector[176]))
    {
        dirtyFlag_[176] = true;
        if(!pJson[pMasqueradingVector[176]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[176]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                transactBlCountryMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[177].empty() && pJson.isMember(pMasqueradingVector[177]))
    {
        dirtyFlag_[177] = true;
        if(!pJson[pMasqueradingVector[177]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[177]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                accountpurposeMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[178].empty() && pJson.isMember(pMasqueradingVector[178]))
    {
        dirtyFlag_[178] = true;
        if(!pJson[pMasqueradingVector[178]].isNull())
        {
            apsysFlagdeldatapersi_=std::make_shared<std::string>(pJson[pMasqueradingVector[178]].asString());
        }
    }
    if(!pMasqueradingVector[179].empty() && pJson.isMember(pMasqueradingVector[179]))
    {
        dirtyFlag_[179] = true;
        if(!pJson[pMasqueradingVector[179]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[179]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtwaitdeldatapersl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[180].empty() && pJson.isMember(pMasqueradingVector[180]))
    {
        dirtyFlag_[180] = true;
        if(!pJson[pMasqueradingVector[180]].isNull())
        {
            nameEnc_=std::make_shared<std::string>(pJson[pMasqueradingVector[180]].asString());
        }
    }
    if(!pMasqueradingVector[181].empty() && pJson.isMember(pMasqueradingVector[181]))
    {
        dirtyFlag_[181] = true;
        if(!pJson[pMasqueradingVector[181]].isNull())
        {
            inApsysTempEntsperrenCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[181]].asString());
        }
    }
    if(!pMasqueradingVector[182].empty() && pJson.isMember(pMasqueradingVector[182]))
    {
        dirtyFlag_[182] = true;
        if(!pJson[pMasqueradingVector[182]].isNull())
        {
            inApsysTempEntspUserid_=std::make_shared<std::string>(pJson[pMasqueradingVector[182]].asString());
        }
    }
    if(!pMasqueradingVector[183].empty() && pJson.isMember(pMasqueradingVector[183]))
    {
        dirtyFlag_[183] = true;
        if(!pJson[pMasqueradingVector[183]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[183]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                inApsysTempEntspDatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[184].empty() && pJson.isMember(pMasqueradingVector[184]))
    {
        dirtyFlag_[184] = true;
        if(!pJson[pMasqueradingVector[184]].isNull())
        {
            apsysCdregs_=std::make_shared<std::string>(pJson[pMasqueradingVector[184]].asString());
        }
    }
    if(!pMasqueradingVector[185].empty() && pJson.isMember(pMasqueradingVector[185]))
    {
        dirtyFlag_[185] = true;
        if(!pJson[pMasqueradingVector[185]].isNull())
        {
            retentionOnHold_=std::make_shared<std::string>(pJson[pMasqueradingVector[185]].asString());
        }
    }
    if(!pMasqueradingVector[186].empty() && pJson.isMember(pMasqueradingVector[186]))
    {
        dirtyFlag_[186] = true;
        if(!pJson[pMasqueradingVector[186]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[186]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                retentionOnHoldDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[187].empty() && pJson.isMember(pMasqueradingVector[187]))
    {
        dirtyFlag_[187] = true;
        if(!pJson[pMasqueradingVector[187]].isNull())
        {
            retentionOnHoldReason_=std::make_shared<std::string>(pJson[pMasqueradingVector[187]].asString());
        }
    }
    if(!pMasqueradingVector[188].empty() && pJson.isMember(pMasqueradingVector[188]))
    {
        dirtyFlag_[188] = true;
        if(!pJson[pMasqueradingVector[188]].isNull())
        {
            logicalErasure_=std::make_shared<std::string>(pJson[pMasqueradingVector[188]].asString());
        }
    }
    if(!pMasqueradingVector[189].empty() && pJson.isMember(pMasqueradingVector[189]))
    {
        dirtyFlag_[189] = true;
        if(!pJson[pMasqueradingVector[189]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[189]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                logicalErasureDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[190].empty() && pJson.isMember(pMasqueradingVector[190]))
    {
        dirtyFlag_[190] = true;
        if(!pJson[pMasqueradingVector[190]].isNull())
        {
            logicalErasureReason_=std::make_shared<std::string>(pJson[pMasqueradingVector[190]].asString());
        }
    }
    if(!pMasqueradingVector[191].empty() && pJson.isMember(pMasqueradingVector[191]))
    {
        dirtyFlag_[191] = true;
        if(!pJson[pMasqueradingVector[191]].isNull())
        {
            complianceMinRiskCategory_=std::make_shared<std::string>(pJson[pMasqueradingVector[191]].asString());
        }
    }
    if(!pMasqueradingVector[192].empty() && pJson.isMember(pMasqueradingVector[192]))
    {
        dirtyFlag_[192] = true;
        if(!pJson[pMasqueradingVector[192]].isNull())
        {
            complianceMinRiskComment_=std::make_shared<std::string>(pJson[pMasqueradingVector[192]].asString());
        }
    }
    if(!pMasqueradingVector[193].empty() && pJson.isMember(pMasqueradingVector[193]))
    {
        dirtyFlag_[193] = true;
        if(!pJson[pMasqueradingVector[193]].isNull())
        {
            clientStructureCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[193]].asString());
        }
    }
    if(!pMasqueradingVector[194].empty() && pJson.isMember(pMasqueradingVector[194]))
    {
        dirtyFlag_[194] = true;
        if(!pJson[pMasqueradingVector[194]].isNull())
        {
            clientSubstructureCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[194]].asString());
        }
    }
}

void Kunde::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("KUNDENID"))
    {
        if(!pJson["KUNDENID"].isNull())
        {
            kundenid_=std::make_shared<double>(pJson["KUNDENID"].asDouble());
        }
    }
    if(pJson.isMember("BEZEICHNUNG"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["BEZEICHNUNG"].isNull())
        {
            bezeichnung_=std::make_shared<std::string>(pJson["BEZEICHNUNG"].asString());
        }
    }
    if(pJson.isMember("KUNDESEIT"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["KUNDESEIT"].isNull())
        {
            auto timeStr = pJson["KUNDESEIT"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                kundeseit_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("VERTRAGSPARTEI_CD"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["VERTRAGSPARTEI_CD"].isNull())
        {
            vertragsparteiCd_=std::make_shared<std::string>(pJson["VERTRAGSPARTEI_CD"].asString());
        }
    }
    if(pJson.isMember("LOESCH_CD"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["LOESCH_CD"].isNull())
        {
            loeschCd_=std::make_shared<std::string>(pJson["LOESCH_CD"].asString());
        }
    }
    if(pJson.isMember("LOESCHDATUM"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["LOESCHDATUM"].isNull())
        {
            auto timeStr = pJson["LOESCHDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                loeschdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("CRTDATUM"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["CRTDATUM"].isNull())
        {
            auto timeStr = pJson["CRTDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                crtdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("CRTUSER"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["CRTUSER"].isNull())
        {
            crtuser_=std::make_shared<std::string>(pJson["CRTUSER"].asString());
        }
    }
    if(pJson.isMember("MUTDATUM"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["MUTDATUM"].isNull())
        {
            auto timeStr = pJson["MUTDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                mutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("MUTUSER"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["MUTUSER"].isNull())
        {
            mutuser_=std::make_shared<std::string>(pJson["MUTUSER"].asString());
        }
    }
    if(pJson.isMember("PSEUDOACCOUNT_CD"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["PSEUDOACCOUNT_CD"].isNull())
        {
            pseudoaccountCd_=std::make_shared<std::string>(pJson["PSEUDOACCOUNT_CD"].asString());
        }
    }
    if(pJson.isMember("KUNDEBESUCH"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["KUNDEBESUCH"].isNull())
        {
            auto timeStr = pJson["KUNDEBESUCH"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                kundebesuch_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("BEZEICHNUNGVERTRAG"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["BEZEICHNUNGVERTRAG"].isNull())
        {
            bezeichnungvertrag_=std::make_shared<std::string>(pJson["BEZEICHNUNGVERTRAG"].asString());
        }
    }
    if(pJson.isMember("PSEUDONYM"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["PSEUDONYM"].isNull())
        {
            pseudonym_=std::make_shared<std::string>(pJson["PSEUDONYM"].asString());
        }
    }
    if(pJson.isMember("RECHTSDOMIZIL_CD"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["RECHTSDOMIZIL_CD"].isNull())
        {
            rechtsdomizilCd_=std::make_shared<std::string>(pJson["RECHTSDOMIZIL_CD"].asString());
        }
    }
    if(pJson.isMember("KORRESPONDENZSPRACH_CD"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["KORRESPONDENZSPRACH_CD"].isNull())
        {
            korrespondenzsprachCd_=std::make_shared<std::string>(pJson["KORRESPONDENZSPRACH_CD"].asString());
        }
    }
    if(pJson.isMember("MIT_PROFIL_CD"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["MIT_PROFIL_CD"].isNull())
        {
            mitProfilCd_=std::make_shared<std::string>(pJson["MIT_PROFIL_CD"].asString());
        }
    }
    if(pJson.isMember("GEMEINSCHAFTSKONTO_CD"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["GEMEINSCHAFTSKONTO_CD"].isNull())
        {
            gemeinschaftskontoCd_=std::make_shared<std::string>(pJson["GEMEINSCHAFTSKONTO_CD"].asString());
        }
    }
    if(pJson.isMember("PIN"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["PIN"].isNull())
        {
            pin_=std::make_shared<std::string>(pJson["PIN"].asString());
        }
    }
    if(pJson.isMember("VERWENDUNGSZWECK"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["VERWENDUNGSZWECK"].isNull())
        {
            verwendungszweck_=std::make_shared<std::string>(pJson["VERWENDUNGSZWECK"].asString());
        }
    }
    if(pJson.isMember("IDENTIFIKATIONSART_CD"))
    {
        dirtyFlag_[20] = true;
        if(!pJson["IDENTIFIKATIONSART_CD"].isNull())
        {
            identifikationsartCd_=std::make_shared<std::string>(pJson["IDENTIFIKATIONSART_CD"].asString());
        }
    }
    if(pJson.isMember("VERMOEGENSURSPRUNG_CD"))
    {
        dirtyFlag_[21] = true;
        if(!pJson["VERMOEGENSURSPRUNG_CD"].isNull())
        {
            vermoegensursprungCd_=std::make_shared<std::string>(pJson["VERMOEGENSURSPRUNG_CD"].asString());
        }
    }
    if(pJson.isMember("VERMOEGENSURSPRUNG"))
    {
        dirtyFlag_[22] = true;
        if(!pJson["VERMOEGENSURSPRUNG"].isNull())
        {
            vermoegensursprung_=std::make_shared<std::string>(pJson["VERMOEGENSURSPRUNG"].asString());
        }
    }
    if(pJson.isMember("GELDVONKONTO"))
    {
        dirtyFlag_[23] = true;
        if(!pJson["GELDVONKONTO"].isNull())
        {
            geldvonkonto_=std::make_shared<std::string>(pJson["GELDVONKONTO"].asString());
        }
    }
    if(pJson.isMember("BISHERIGEBETREUUNG"))
    {
        dirtyFlag_[24] = true;
        if(!pJson["BISHERIGEBETREUUNG"].isNull())
        {
            bisherigebetreuung_=std::make_shared<std::string>(pJson["BISHERIGEBETREUUNG"].asString());
        }
    }
    if(pJson.isMember("BISHERIGEBETREUUNGSEIT"))
    {
        dirtyFlag_[25] = true;
        if(!pJson["BISHERIGEBETREUUNGSEIT"].isNull())
        {
            auto timeStr = pJson["BISHERIGEBETREUUNGSEIT"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                bisherigebetreuungseit_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("MANUALOPEN_CD"))
    {
        dirtyFlag_[26] = true;
        if(!pJson["MANUALOPEN_CD"].isNull())
        {
            manualopenCd_=std::make_shared<std::string>(pJson["MANUALOPEN_CD"].asString());
        }
    }
    if(pJson.isMember("EIN_VERMOEGEN_CD"))
    {
        dirtyFlag_[27] = true;
        if(!pJson["EIN_VERMOEGEN_CD"].isNull())
        {
            einVermoegenCd_=std::make_shared<std::string>(pJson["EIN_VERMOEGEN_CD"].asString());
        }
    }
    if(pJson.isMember("REGIONZAHLUNG_CD"))
    {
        dirtyFlag_[28] = true;
        if(!pJson["REGIONZAHLUNG_CD"].isNull())
        {
            regionzahlungCd_=std::make_shared<std::string>(pJson["REGIONZAHLUNG_CD"].asString());
        }
    }
    if(pJson.isMember("EIN_VERMOEGENART_CD"))
    {
        dirtyFlag_[29] = true;
        if(!pJson["EIN_VERMOEGENART_CD"].isNull())
        {
            einVermoegenartCd_=std::make_shared<std::string>(pJson["EIN_VERMOEGENART_CD"].asString());
        }
    }
    if(pJson.isMember("SPEZ_WUENSCHE_CD"))
    {
        dirtyFlag_[30] = true;
        if(!pJson["SPEZ_WUENSCHE_CD"].isNull())
        {
            spezWuenscheCd_=std::make_shared<std::string>(pJson["SPEZ_WUENSCHE_CD"].asString());
        }
    }
    if(pJson.isMember("MANAGER_CD"))
    {
        dirtyFlag_[31] = true;
        if(!pJson["MANAGER_CD"].isNull())
        {
            managerCd_=std::make_shared<std::string>(pJson["MANAGER_CD"].asString());
        }
    }
    if(pJson.isMember("RISKINDEX"))
    {
        dirtyFlag_[32] = true;
        if(!pJson["RISKINDEX"].isNull())
        {
            riskindex_=std::make_shared<double>(pJson["RISKINDEX"].asDouble());
        }
    }
    if(pJson.isMember("RISKINDEX_GUELTISEIT"))
    {
        dirtyFlag_[33] = true;
        if(!pJson["RISKINDEX_GUELTISEIT"].isNull())
        {
            auto timeStr = pJson["RISKINDEX_GUELTISEIT"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                riskindexGueltiseit_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("RISKINDEX_LETZTEBERECHNUNG"))
    {
        dirtyFlag_[34] = true;
        if(!pJson["RISKINDEX_LETZTEBERECHNUNG"].isNull())
        {
            auto timeStr = pJson["RISKINDEX_LETZTEBERECHNUNG"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                riskindexLetzteberechnung_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("KONTOEROEFFNUNGSART_CD"))
    {
        dirtyFlag_[35] = true;
        if(!pJson["KONTOEROEFFNUNGSART_CD"].isNull())
        {
            kontoeroeffnungsartCd_=std::make_shared<std::string>(pJson["KONTOEROEFFNUNGSART_CD"].asString());
        }
    }
    if(pJson.isMember("RISKINDEXBERECHNEN_CD"))
    {
        dirtyFlag_[36] = true;
        if(!pJson["RISKINDEXBERECHNEN_CD"].isNull())
        {
            riskindexberechnenCd_=std::make_shared<std::string>(pJson["RISKINDEXBERECHNEN_CD"].asString());
        }
    }
    if(pJson.isMember("KUNDENNATUR_CD"))
    {
        dirtyFlag_[37] = true;
        if(!pJson["KUNDENNATUR_CD"].isNull())
        {
            kundennaturCd_=std::make_shared<std::string>(pJson["KUNDENNATUR_CD"].asString());
        }
    }
    if(pJson.isMember("RISIKOKATEGORIE_CD"))
    {
        dirtyFlag_[38] = true;
        if(!pJson["RISIKOKATEGORIE_CD"].isNull())
        {
            risikokategorieCd_=std::make_shared<std::string>(pJson["RISIKOKATEGORIE_CD"].asString());
        }
    }
    if(pJson.isMember("PEP_CD"))
    {
        dirtyFlag_[39] = true;
        if(!pJson["PEP_CD"].isNull())
        {
            pepCd_=std::make_shared<std::string>(pJson["PEP_CD"].asString());
        }
    }
    if(pJson.isMember("SPEZIALKATEGORIE_CD"))
    {
        dirtyFlag_[40] = true;
        if(!pJson["SPEZIALKATEGORIE_CD"].isNull())
        {
            spezialkategorieCd_=std::make_shared<std::string>(pJson["SPEZIALKATEGORIE_CD"].asString());
        }
    }
    if(pJson.isMember("NATURE_CD"))
    {
        dirtyFlag_[41] = true;
        if(!pJson["NATURE_CD"].isNull())
        {
            natureCd_=std::make_shared<std::string>(pJson["NATURE_CD"].asString());
        }
    }
    if(pJson.isMember("NAME"))
    {
        dirtyFlag_[42] = true;
        if(!pJson["NAME"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["NAME"].asString());
        }
    }
    if(pJson.isMember("LEDIGERNAME"))
    {
        dirtyFlag_[43] = true;
        if(!pJson["LEDIGERNAME"].isNull())
        {
            ledigername_=std::make_shared<std::string>(pJson["LEDIGERNAME"].asString());
        }
    }
    if(pJson.isMember("VORNAME"))
    {
        dirtyFlag_[44] = true;
        if(!pJson["VORNAME"].isNull())
        {
            vorname_=std::make_shared<std::string>(pJson["VORNAME"].asString());
        }
    }
    if(pJson.isMember("CDPARTC"))
    {
        dirtyFlag_[45] = true;
        if(!pJson["CDPARTC"].isNull())
        {
            cdpartc_=std::make_shared<std::string>(pJson["CDPARTC"].asString());
        }
    }
    if(pJson.isMember("NATIONALITAET_CD"))
    {
        dirtyFlag_[46] = true;
        if(!pJson["NATIONALITAET_CD"].isNull())
        {
            nationalitaetCd_=std::make_shared<std::string>(pJson["NATIONALITAET_CD"].asString());
        }
    }
    if(pJson.isMember("RISIKOLAND_CD"))
    {
        dirtyFlag_[47] = true;
        if(!pJson["RISIKOLAND_CD"].isNull())
        {
            risikolandCd_=std::make_shared<std::string>(pJson["RISIKOLAND_CD"].asString());
        }
    }
    if(pJson.isMember("PERSOENLICHBEKANNT_CD"))
    {
        dirtyFlag_[48] = true;
        if(!pJson["PERSOENLICHBEKANNT_CD"].isNull())
        {
            persoenlichbekanntCd_=std::make_shared<std::string>(pJson["PERSOENLICHBEKANNT_CD"].asString());
        }
    }
    if(pJson.isMember("RISIKOTAETIGKEIT_CD"))
    {
        dirtyFlag_[49] = true;
        if(!pJson["RISIKOTAETIGKEIT_CD"].isNull())
        {
            risikotaetigkeitCd_=std::make_shared<std::string>(pJson["RISIKOTAETIGKEIT_CD"].asString());
        }
    }
    if(pJson.isMember("STEUERDOMIZIL_CD"))
    {
        dirtyFlag_[50] = true;
        if(!pJson["STEUERDOMIZIL_CD"].isNull())
        {
            steuerdomizilCd_=std::make_shared<std::string>(pJson["STEUERDOMIZIL_CD"].asString());
        }
    }
    if(pJson.isMember("EU_TAXSTATUS_CD"))
    {
        dirtyFlag_[51] = true;
        if(!pJson["EU_TAXSTATUS_CD"].isNull())
        {
            euTaxstatusCd_=std::make_shared<std::string>(pJson["EU_TAXSTATUS_CD"].asString());
        }
    }
    if(pJson.isMember("TIN"))
    {
        dirtyFlag_[52] = true;
        if(!pJson["TIN"].isNull())
        {
            tin_=std::make_shared<std::string>(pJson["TIN"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDROLPERSI"))
    {
        dirtyFlag_[53] = true;
        if(!pJson["APSYS_CDROLPERSI"].isNull())
        {
            apsysCdrolpersi_=std::make_shared<std::string>(pJson["APSYS_CDROLPERSI"].asString());
        }
    }
    if(pJson.isMember("VERTRAGSPRACH_CD"))
    {
        dirtyFlag_[54] = true;
        if(!pJson["VERTRAGSPRACH_CD"].isNull())
        {
            vertragsprachCd_=std::make_shared<std::string>(pJson["VERTRAGSPRACH_CD"].asString());
        }
    }
    if(pJson.isMember("VERMOEGENSKATEGORIE_IHAG_CD"))
    {
        dirtyFlag_[55] = true;
        if(!pJson["VERMOEGENSKATEGORIE_IHAG_CD"].isNull())
        {
            vermoegenskategorieIhagCd_=std::make_shared<std::string>(pJson["VERMOEGENSKATEGORIE_IHAG_CD"].asString());
        }
    }
    if(pJson.isMember("APSYS_INTISHS"))
    {
        dirtyFlag_[56] = true;
        if(!pJson["APSYS_INTISHS"].isNull())
        {
            apsysIntishs_=std::make_shared<std::string>(pJson["APSYS_INTISHS"].asString());
        }
    }
    if(pJson.isMember("APSYS_INTILGS"))
    {
        dirtyFlag_[57] = true;
        if(!pJson["APSYS_INTILGS"].isNull())
        {
            apsysIntilgs_=std::make_shared<std::string>(pJson["APSYS_INTILGS"].asString());
        }
    }
    if(pJson.isMember("GESAMTVERMOEGEN_CD"))
    {
        dirtyFlag_[58] = true;
        if(!pJson["GESAMTVERMOEGEN_CD"].isNull())
        {
            gesamtvermoegenCd_=std::make_shared<double>(pJson["GESAMTVERMOEGEN_CD"].asDouble());
        }
    }
    if(pJson.isMember("COMPLIANCE_OK_CD"))
    {
        dirtyFlag_[59] = true;
        if(!pJson["COMPLIANCE_OK_CD"].isNull())
        {
            complianceOkCd_=std::make_shared<std::string>(pJson["COMPLIANCE_OK_CD"].asString());
        }
    }
    if(pJson.isMember("COMPLIANCE_OK_BEMERKUNG"))
    {
        dirtyFlag_[60] = true;
        if(!pJson["COMPLIANCE_OK_BEMERKUNG"].isNull())
        {
            complianceOkBemerkung_=std::make_shared<std::string>(pJson["COMPLIANCE_OK_BEMERKUNG"].asString());
        }
    }
    if(pJson.isMember("COMPLIANCE_OK_DATUM"))
    {
        dirtyFlag_[61] = true;
        if(!pJson["COMPLIANCE_OK_DATUM"].isNull())
        {
            auto timeStr = pJson["COMPLIANCE_OK_DATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                complianceOkDatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("COMPLIANCE_OK_USERID"))
    {
        dirtyFlag_[62] = true;
        if(!pJson["COMPLIANCE_OK_USERID"].isNull())
        {
            complianceOkUserid_=std::make_shared<std::string>(pJson["COMPLIANCE_OK_USERID"].asString());
        }
    }
    if(pJson.isMember("EIN_VERMOEGEN"))
    {
        dirtyFlag_[63] = true;
        if(!pJson["EIN_VERMOEGEN"].isNull())
        {
            einVermoegen_=std::make_shared<double>(pJson["EIN_VERMOEGEN"].asDouble());
        }
    }
    if(pJson.isMember("SEGMENTIERUNG_CD"))
    {
        dirtyFlag_[64] = true;
        if(!pJson["SEGMENTIERUNG_CD"].isNull())
        {
            segmentierungCd_=std::make_shared<double>(pJson["SEGMENTIERUNG_CD"].asDouble());
        }
    }
    if(pJson.isMember("AKTID"))
    {
        dirtyFlag_[65] = true;
        if(!pJson["AKTID"].isNull())
        {
            aktid_=std::make_shared<double>(pJson["AKTID"].asDouble());
        }
    }
    if(pJson.isMember("VALIDID"))
    {
        dirtyFlag_[66] = true;
        if(!pJson["VALIDID"].isNull())
        {
            validid_=std::make_shared<double>(pJson["VALIDID"].asDouble());
        }
    }
    if(pJson.isMember("VALID_CD"))
    {
        dirtyFlag_[67] = true;
        if(!pJson["VALID_CD"].isNull())
        {
            validCd_=std::make_shared<std::string>(pJson["VALID_CD"].asString());
        }
    }
    if(pJson.isMember("VALIDUSER"))
    {
        dirtyFlag_[68] = true;
        if(!pJson["VALIDUSER"].isNull())
        {
            validuser_=std::make_shared<std::string>(pJson["VALIDUSER"].asString());
        }
    }
    if(pJson.isMember("ENC_SALT"))
    {
        dirtyFlag_[69] = true;
        if(!pJson["ENC_SALT"].isNull())
        {
            encSalt_=std::make_shared<std::string>(pJson["ENC_SALT"].asString());
        }
    }
    if(pJson.isMember("BEZEICHNUNG_ENC"))
    {
        dirtyFlag_[70] = true;
        if(!pJson["BEZEICHNUNG_ENC"].isNull())
        {
            bezeichnungEnc_=std::make_shared<std::string>(pJson["BEZEICHNUNG_ENC"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDMOTIFPARTS"))
    {
        dirtyFlag_[71] = true;
        if(!pJson["APSYS_CDMOTIFPARTS"].isNull())
        {
            apsysCdmotifparts_=std::make_shared<std::string>(pJson["APSYS_CDMOTIFPARTS"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDINDUS0S"))
    {
        dirtyFlag_[72] = true;
        if(!pJson["APSYS_CDINDUS0S"].isNull())
        {
            apsysCdindus0s_=std::make_shared<std::string>(pJson["APSYS_CDINDUS0S"].asString());
        }
    }
    if(pJson.isMember("APSYS_FLAGPREAVISEXEC"))
    {
        dirtyFlag_[73] = true;
        if(!pJson["APSYS_FLAGPREAVISEXEC"].isNull())
        {
            apsysFlagpreavisexec_=std::make_shared<std::string>(pJson["APSYS_FLAGPREAVISEXEC"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDAVIOBISPECC"))
    {
        dirtyFlag_[74] = true;
        if(!pJson["APSYS_CDAVIOBISPECC"].isNull())
        {
            apsysCdaviobispecc_=std::make_shared<std::string>(pJson["APSYS_CDAVIOBISPECC"].asString());
        }
    }
    if(pJson.isMember("APSYS_FLAGHISPERC"))
    {
        dirtyFlag_[75] = true;
        if(!pJson["APSYS_FLAGHISPERC"].isNull())
        {
            apsysFlaghisperc_=std::make_shared<std::string>(pJson["APSYS_FLAGHISPERC"].asString());
        }
    }
    if(pJson.isMember("APSYS_REPAMANUC"))
    {
        dirtyFlag_[76] = true;
        if(!pJson["APSYS_REPAMANUC"].isNull())
        {
            apsysRepamanuc_=std::make_shared<std::string>(pJson["APSYS_REPAMANUC"].asString());
        }
    }
    if(pJson.isMember("APSYS_PERDEVCALC"))
    {
        dirtyFlag_[77] = true;
        if(!pJson["APSYS_PERDEVCALC"].isNull())
        {
            apsysPerdevcalc_=std::make_shared<std::string>(pJson["APSYS_PERDEVCALC"].asString());
        }
    }
    if(pJson.isMember("APSYS_FLAGUKTAXC"))
    {
        dirtyFlag_[78] = true;
        if(!pJson["APSYS_FLAGUKTAXC"].isNull())
        {
            apsysFlaguktaxc_=std::make_shared<std::string>(pJson["APSYS_FLAGUKTAXC"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDNOGAS"))
    {
        dirtyFlag_[79] = true;
        if(!pJson["APSYS_CDNOGAS"].isNull())
        {
            apsysCdnogas_=std::make_shared<std::string>(pJson["APSYS_CDNOGAS"].asString());
        }
    }
    if(pJson.isMember("APSYS_STATFISCC"))
    {
        dirtyFlag_[80] = true;
        if(!pJson["APSYS_STATFISCC"].isNull())
        {
            apsysStatfiscc_=std::make_shared<std::string>(pJson["APSYS_STATFISCC"].asString());
        }
    }
    if(pJson.isMember("APSYS_FLAGFWTI"))
    {
        dirtyFlag_[81] = true;
        if(!pJson["APSYS_FLAGFWTI"].isNull())
        {
            apsysFlagfwti_=std::make_shared<std::string>(pJson["APSYS_FLAGFWTI"].asString());
        }
    }
    if(pJson.isMember("APSYS_FLAGFWTUKNRSDI"))
    {
        dirtyFlag_[82] = true;
        if(!pJson["APSYS_FLAGFWTUKNRSDI"].isNull())
        {
            apsysFlagfwtuknrsdi_=std::make_shared<std::string>(pJson["APSYS_FLAGFWTUKNRSDI"].asString());
        }
    }
    if(pJson.isMember("APSYS_FLAGFWTTAXSPEGEI"))
    {
        dirtyFlag_[83] = true;
        if(!pJson["APSYS_FLAGFWTTAXSPEGEI"].isNull())
        {
            apsysFlagfwttaxspegei_=std::make_shared<std::string>(pJson["APSYS_FLAGFWTTAXSPEGEI"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDFWTOPTREGULFISCANCC"))
    {
        dirtyFlag_[84] = true;
        if(!pJson["APSYS_CDFWTOPTREGULFISCANCC"].isNull())
        {
            apsysCdfwtoptregulfiscancc_=std::make_shared<std::string>(pJson["APSYS_CDFWTOPTREGULFISCANCC"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDFWTSTATREGULFISCANCC"))
    {
        dirtyFlag_[85] = true;
        if(!pJson["APSYS_CDFWTSTATREGULFISCANCC"].isNull())
        {
            apsysCdfwtstatregulfiscancc_=std::make_shared<std::string>(pJson["APSYS_CDFWTSTATREGULFISCANCC"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDFWTOPTREGULFISCFUTC"))
    {
        dirtyFlag_[86] = true;
        if(!pJson["APSYS_CDFWTOPTREGULFISCFUTC"].isNull())
        {
            apsysCdfwtoptregulfiscfutc_=std::make_shared<std::string>(pJson["APSYS_CDFWTOPTREGULFISCFUTC"].asString());
        }
    }
    if(pJson.isMember("STEUERLAND_ABGST_CD"))
    {
        dirtyFlag_[87] = true;
        if(!pJson["STEUERLAND_ABGST_CD"].isNull())
        {
            steuerlandAbgstCd_=std::make_shared<std::string>(pJson["STEUERLAND_ABGST_CD"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDNATURES"))
    {
        dirtyFlag_[88] = true;
        if(!pJson["APSYS_CDNATURES"].isNull())
        {
            apsysCdnatures_=std::make_shared<std::string>(pJson["APSYS_CDNATURES"].asString());
        }
    }
    if(pJson.isMember("APSYS_SHNAS"))
    {
        dirtyFlag_[89] = true;
        if(!pJson["APSYS_SHNAS"].isNull())
        {
            apsysShnas_=std::make_shared<std::string>(pJson["APSYS_SHNAS"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDPYHQDOMIS"))
    {
        dirtyFlag_[90] = true;
        if(!pJson["APSYS_CDPYHQDOMIS"].isNull())
        {
            apsysCdpyhqdomis_=std::make_shared<std::string>(pJson["APSYS_CDPYHQDOMIS"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDPERMI"))
    {
        dirtyFlag_[91] = true;
        if(!pJson["APSYS_CDPERMI"].isNull())
        {
            apsysCdpermi_=std::make_shared<double>(pJson["APSYS_CDPERMI"].asDouble());
        }
    }
    if(pJson.isMember("APSYS_IDRCIS"))
    {
        dirtyFlag_[92] = true;
        if(!pJson["APSYS_IDRCIS"].isNull())
        {
            apsysIdrcis_=std::make_shared<std::string>(pJson["APSYS_IDRCIS"].asString());
        }
    }
    if(pJson.isMember("APSYS_FLAGISTTC"))
    {
        dirtyFlag_[93] = true;
        if(!pJson["APSYS_FLAGISTTC"].isNull())
        {
            apsysFlagisttc_=std::make_shared<std::string>(pJson["APSYS_FLAGISTTC"].asString());
        }
    }
    if(pJson.isMember("APSYS_DEVEVALS"))
    {
        dirtyFlag_[94] = true;
        if(!pJson["APSYS_DEVEVALS"].isNull())
        {
            apsysDevevals_=std::make_shared<std::string>(pJson["APSYS_DEVEVALS"].asString());
        }
    }
    if(pJson.isMember("APSYS_IDSTRUCS"))
    {
        dirtyFlag_[95] = true;
        if(!pJson["APSYS_IDSTRUCS"].isNull())
        {
            apsysIdstrucs_=std::make_shared<std::string>(pJson["APSYS_IDSTRUCS"].asString());
        }
    }
    if(pJson.isMember("APSYS_SUIVIAGTS"))
    {
        dirtyFlag_[96] = true;
        if(!pJson["APSYS_SUIVIAGTS"].isNull())
        {
            apsysSuiviagts_=std::make_shared<std::string>(pJson["APSYS_SUIVIAGTS"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDINDUSCSSFS"))
    {
        dirtyFlag_[97] = true;
        if(!pJson["APSYS_CDINDUSCSSFS"].isNull())
        {
            apsysCdinduscssfs_=std::make_shared<std::string>(pJson["APSYS_CDINDUSCSSFS"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDINDUSBLUXS"))
    {
        dirtyFlag_[98] = true;
        if(!pJson["APSYS_CDINDUSBLUXS"].isNull())
        {
            apsysCdindusbluxs_=std::make_shared<std::string>(pJson["APSYS_CDINDUSBLUXS"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDINDUSSBUBA"))
    {
        dirtyFlag_[99] = true;
        if(!pJson["APSYS_CDINDUSSBUBA"].isNull())
        {
            apsysCdindussbuba_=std::make_shared<std::string>(pJson["APSYS_CDINDUSSBUBA"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDINDUSSBNS"))
    {
        dirtyFlag_[100] = true;
        if(!pJson["APSYS_CDINDUSSBNS"].isNull())
        {
            apsysCdindussbns_=std::make_shared<std::string>(pJson["APSYS_CDINDUSSBNS"].asString());
        }
    }
    if(pJson.isMember("APSYS_GRMTEVALS"))
    {
        dirtyFlag_[101] = true;
        if(!pJson["APSYS_GRMTEVALS"].isNull())
        {
            apsysGrmtevals_=std::make_shared<std::string>(pJson["APSYS_GRMTEVALS"].asString());
        }
    }
    if(pJson.isMember("APSYS_IDPOCS"))
    {
        dirtyFlag_[102] = true;
        if(!pJson["APSYS_IDPOCS"].isNull())
        {
            apsysIdpocs_=std::make_shared<std::string>(pJson["APSYS_IDPOCS"].asString());
        }
    }
    if(pJson.isMember("APSYS_INFO"))
    {
        dirtyFlag_[103] = true;
        if(!pJson["APSYS_INFO"].isNull())
        {
            apsysInfo_=std::make_shared<std::string>(pJson["APSYS_INFO"].asString());
        }
    }
    if(pJson.isMember("APSYS_IDENTS"))
    {
        dirtyFlag_[104] = true;
        if(!pJson["APSYS_IDENTS"].isNull())
        {
            apsysIdents_=std::make_shared<std::string>(pJson["APSYS_IDENTS"].asString());
        }
    }
    if(pJson.isMember("APSYS_STATUS_OPEC"))
    {
        dirtyFlag_[105] = true;
        if(!pJson["APSYS_STATUS_OPEC"].isNull())
        {
            apsysStatusOpec_=std::make_shared<std::string>(pJson["APSYS_STATUS_OPEC"].asString());
        }
    }
    if(pJson.isMember("APSYS_ERRI"))
    {
        dirtyFlag_[106] = true;
        if(!pJson["APSYS_ERRI"].isNull())
        {
            apsysErri_=std::make_shared<double>(pJson["APSYS_ERRI"].asDouble());
        }
    }
    if(pJson.isMember("NATIONALITAET2_CD"))
    {
        dirtyFlag_[107] = true;
        if(!pJson["NATIONALITAET2_CD"].isNull())
        {
            nationalitaet2Cd_=std::make_shared<std::string>(pJson["NATIONALITAET2_CD"].asString());
        }
    }
    if(pJson.isMember("NATIONALITAET3_CD"))
    {
        dirtyFlag_[108] = true;
        if(!pJson["NATIONALITAET3_CD"].isNull())
        {
            nationalitaet3Cd_=std::make_shared<std::string>(pJson["NATIONALITAET3_CD"].asString());
        }
    }
    if(pJson.isMember("VERMOEGENSURSPRUNG2_CD"))
    {
        dirtyFlag_[109] = true;
        if(!pJson["VERMOEGENSURSPRUNG2_CD"].isNull())
        {
            vermoegensursprung2Cd_=std::make_shared<std::string>(pJson["VERMOEGENSURSPRUNG2_CD"].asString());
        }
    }
    if(pJson.isMember("VERMOEGENSURSPRUNG2"))
    {
        dirtyFlag_[110] = true;
        if(!pJson["VERMOEGENSURSPRUNG2"].isNull())
        {
            vermoegensursprung2_=std::make_shared<std::string>(pJson["VERMOEGENSURSPRUNG2"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP1_CD"))
    {
        dirtyFlag_[111] = true;
        if(!pJson["APPROVAL_STEP1_CD"].isNull())
        {
            approvalStep1Cd_=std::make_shared<std::string>(pJson["APPROVAL_STEP1_CD"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP1_USER"))
    {
        dirtyFlag_[112] = true;
        if(!pJson["APPROVAL_STEP1_USER"].isNull())
        {
            approvalStep1User_=std::make_shared<std::string>(pJson["APPROVAL_STEP1_USER"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP1_DATE"))
    {
        dirtyFlag_[113] = true;
        if(!pJson["APPROVAL_STEP1_DATE"].isNull())
        {
            auto timeStr = pJson["APPROVAL_STEP1_DATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep1Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APPROVAL_STEP2_CD"))
    {
        dirtyFlag_[114] = true;
        if(!pJson["APPROVAL_STEP2_CD"].isNull())
        {
            approvalStep2Cd_=std::make_shared<std::string>(pJson["APPROVAL_STEP2_CD"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP2_USER"))
    {
        dirtyFlag_[115] = true;
        if(!pJson["APPROVAL_STEP2_USER"].isNull())
        {
            approvalStep2User_=std::make_shared<std::string>(pJson["APPROVAL_STEP2_USER"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP2_DATE"))
    {
        dirtyFlag_[116] = true;
        if(!pJson["APPROVAL_STEP2_DATE"].isNull())
        {
            auto timeStr = pJson["APPROVAL_STEP2_DATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep2Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APPROVAL_STEP3_CD"))
    {
        dirtyFlag_[117] = true;
        if(!pJson["APPROVAL_STEP3_CD"].isNull())
        {
            approvalStep3Cd_=std::make_shared<std::string>(pJson["APPROVAL_STEP3_CD"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP3_USER"))
    {
        dirtyFlag_[118] = true;
        if(!pJson["APPROVAL_STEP3_USER"].isNull())
        {
            approvalStep3User_=std::make_shared<std::string>(pJson["APPROVAL_STEP3_USER"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP3_DATE"))
    {
        dirtyFlag_[119] = true;
        if(!pJson["APPROVAL_STEP3_DATE"].isNull())
        {
            auto timeStr = pJson["APPROVAL_STEP3_DATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep3Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APPROVAL_STEP4_CD"))
    {
        dirtyFlag_[120] = true;
        if(!pJson["APPROVAL_STEP4_CD"].isNull())
        {
            approvalStep4Cd_=std::make_shared<std::string>(pJson["APPROVAL_STEP4_CD"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP4_USER"))
    {
        dirtyFlag_[121] = true;
        if(!pJson["APPROVAL_STEP4_USER"].isNull())
        {
            approvalStep4User_=std::make_shared<std::string>(pJson["APPROVAL_STEP4_USER"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP4_DATE"))
    {
        dirtyFlag_[122] = true;
        if(!pJson["APPROVAL_STEP4_DATE"].isNull())
        {
            auto timeStr = pJson["APPROVAL_STEP4_DATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep4Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APPROVAL_STEP5_CD"))
    {
        dirtyFlag_[123] = true;
        if(!pJson["APPROVAL_STEP5_CD"].isNull())
        {
            approvalStep5Cd_=std::make_shared<std::string>(pJson["APPROVAL_STEP5_CD"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP5_USER"))
    {
        dirtyFlag_[124] = true;
        if(!pJson["APPROVAL_STEP5_USER"].isNull())
        {
            approvalStep5User_=std::make_shared<std::string>(pJson["APPROVAL_STEP5_USER"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP5_DATE"))
    {
        dirtyFlag_[125] = true;
        if(!pJson["APPROVAL_STEP5_DATE"].isNull())
        {
            auto timeStr = pJson["APPROVAL_STEP5_DATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                approvalStep5Date_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APPROVAL_STEP1_BEM"))
    {
        dirtyFlag_[126] = true;
        if(!pJson["APPROVAL_STEP1_BEM"].isNull())
        {
            approvalStep1Bem_=std::make_shared<std::string>(pJson["APPROVAL_STEP1_BEM"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP2_BEM"))
    {
        dirtyFlag_[127] = true;
        if(!pJson["APPROVAL_STEP2_BEM"].isNull())
        {
            approvalStep2Bem_=std::make_shared<std::string>(pJson["APPROVAL_STEP2_BEM"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP3_BEM"))
    {
        dirtyFlag_[128] = true;
        if(!pJson["APPROVAL_STEP3_BEM"].isNull())
        {
            approvalStep3Bem_=std::make_shared<std::string>(pJson["APPROVAL_STEP3_BEM"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP4_BEM"))
    {
        dirtyFlag_[129] = true;
        if(!pJson["APPROVAL_STEP4_BEM"].isNull())
        {
            approvalStep4Bem_=std::make_shared<std::string>(pJson["APPROVAL_STEP4_BEM"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP5_BEM"))
    {
        dirtyFlag_[130] = true;
        if(!pJson["APPROVAL_STEP5_BEM"].isNull())
        {
            approvalStep5Bem_=std::make_shared<std::string>(pJson["APPROVAL_STEP5_BEM"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_STEP1_ASSES_CD"))
    {
        dirtyFlag_[131] = true;
        if(!pJson["APPROVAL_STEP1_ASSES_CD"].isNull())
        {
            approvalStep1AssesCd_=std::make_shared<double>(pJson["APPROVAL_STEP1_ASSES_CD"].asDouble());
        }
    }
    if(pJson.isMember("APPROVAL_STEP2_ASSES_CD"))
    {
        dirtyFlag_[132] = true;
        if(!pJson["APPROVAL_STEP2_ASSES_CD"].isNull())
        {
            approvalStep2AssesCd_=std::make_shared<double>(pJson["APPROVAL_STEP2_ASSES_CD"].asDouble());
        }
    }
    if(pJson.isMember("APPROVAL_STEP3_ASSES_CD"))
    {
        dirtyFlag_[133] = true;
        if(!pJson["APPROVAL_STEP3_ASSES_CD"].isNull())
        {
            approvalStep3AssesCd_=std::make_shared<double>(pJson["APPROVAL_STEP3_ASSES_CD"].asDouble());
        }
    }
    if(pJson.isMember("APPROVAL_STEP4_ASSES_CD"))
    {
        dirtyFlag_[134] = true;
        if(!pJson["APPROVAL_STEP4_ASSES_CD"].isNull())
        {
            approvalStep4AssesCd_=std::make_shared<double>(pJson["APPROVAL_STEP4_ASSES_CD"].asDouble());
        }
    }
    if(pJson.isMember("APPROVAL_STEP5_ASSES_CD"))
    {
        dirtyFlag_[135] = true;
        if(!pJson["APPROVAL_STEP5_ASSES_CD"].isNull())
        {
            approvalStep5AssesCd_=std::make_shared<double>(pJson["APPROVAL_STEP5_ASSES_CD"].asDouble());
        }
    }
    if(pJson.isMember("APPROVAL_STATUS_CD"))
    {
        dirtyFlag_[136] = true;
        if(!pJson["APPROVAL_STATUS_CD"].isNull())
        {
            approvalStatusCd_=std::make_shared<double>(pJson["APPROVAL_STATUS_CD"].asDouble());
        }
    }
    if(pJson.isMember("CLIENT_STATUS_CD"))
    {
        dirtyFlag_[137] = true;
        if(!pJson["CLIENT_STATUS_CD"].isNull())
        {
            clientStatusCd_=std::make_shared<std::string>(pJson["CLIENT_STATUS_CD"].asString());
        }
    }
    if(pJson.isMember("DISCHARGE_ORDERS_CD"))
    {
        dirtyFlag_[138] = true;
        if(!pJson["DISCHARGE_ORDERS_CD"].isNull())
        {
            dischargeOrdersCd_=std::make_shared<std::string>(pJson["DISCHARGE_ORDERS_CD"].asString());
        }
    }
    if(pJson.isMember("PRINT_SUMMARY_HOLDMAIL_ONLY_CD"))
    {
        dirtyFlag_[139] = true;
        if(!pJson["PRINT_SUMMARY_HOLDMAIL_ONLY_CD"].isNull())
        {
            printSummaryHoldmailOnlyCd_=std::make_shared<std::string>(pJson["PRINT_SUMMARY_HOLDMAIL_ONLY_CD"].asString());
        }
    }
    if(pJson.isMember("EBANKING_CONTRACT_CD"))
    {
        dirtyFlag_[140] = true;
        if(!pJson["EBANKING_CONTRACT_CD"].isNull())
        {
            ebankingContractCd_=std::make_shared<std::string>(pJson["EBANKING_CONTRACT_CD"].asString());
        }
    }
    if(pJson.isMember("EBANKING_CONTRACT_LANGUAGE_CD"))
    {
        dirtyFlag_[141] = true;
        if(!pJson["EBANKING_CONTRACT_LANGUAGE_CD"].isNull())
        {
            ebankingContractLanguageCd_=std::make_shared<std::string>(pJson["EBANKING_CONTRACT_LANGUAGE_CD"].asString());
        }
    }
    if(pJson.isMember("APSYS_DTECHDIARYL"))
    {
        dirtyFlag_[142] = true;
        if(!pJson["APSYS_DTECHDIARYL"].isNull())
        {
            auto timeStr = pJson["APSYS_DTECHDIARYL"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtechdiaryl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APSYS_MOTDIARYS"))
    {
        dirtyFlag_[143] = true;
        if(!pJson["APSYS_MOTDIARYS"].isNull())
        {
            apsysMotdiarys_=std::make_shared<std::string>(pJson["APSYS_MOTDIARYS"].asString());
        }
    }
    if(pJson.isMember("APSYS_IDTYPCLIIRSS"))
    {
        dirtyFlag_[144] = true;
        if(!pJson["APSYS_IDTYPCLIIRSS"].isNull())
        {
            apsysIdtypcliirss_=std::make_shared<std::string>(pJson["APSYS_IDTYPCLIIRSS"].asString());
        }
    }
    if(pJson.isMember("APSYS_IDRCIQIS"))
    {
        dirtyFlag_[145] = true;
        if(!pJson["APSYS_IDRCIQIS"].isNull())
        {
            apsysIdrciqis_=std::make_shared<std::string>(pJson["APSYS_IDRCIQIS"].asString());
        }
    }
    if(pJson.isMember("APSYS_IDRCIFATCAS"))
    {
        dirtyFlag_[146] = true;
        if(!pJson["APSYS_IDRCIFATCAS"].isNull())
        {
            apsysIdrcifatcas_=std::make_shared<std::string>(pJson["APSYS_IDRCIFATCAS"].asString());
        }
    }
    if(pJson.isMember("MAILING_TARIF_TYPE_CD"))
    {
        dirtyFlag_[147] = true;
        if(!pJson["MAILING_TARIF_TYPE_CD"].isNull())
        {
            mailingTarifTypeCd_=std::make_shared<double>(pJson["MAILING_TARIF_TYPE_CD"].asDouble());
        }
    }
    if(pJson.isMember("REGISTERED_CD"))
    {
        dirtyFlag_[148] = true;
        if(!pJson["REGISTERED_CD"].isNull())
        {
            registeredCd_=std::make_shared<std::string>(pJson["REGISTERED_CD"].asString());
        }
    }
    if(pJson.isMember("REGISTERED_MAIL_CD"))
    {
        dirtyFlag_[149] = true;
        if(!pJson["REGISTERED_MAIL_CD"].isNull())
        {
            registeredMailCd_=std::make_shared<std::string>(pJson["REGISTERED_MAIL_CD"].asString());
        }
    }
    if(pJson.isMember("APSYS_NBPERSCPARTIEL"))
    {
        dirtyFlag_[150] = true;
        if(!pJson["APSYS_NBPERSCPARTIEL"].isNull())
        {
            apsysNbperscpartiel_=std::make_shared<double>(pJson["APSYS_NBPERSCPARTIEL"].asDouble());
        }
    }
    if(pJson.isMember("ASSET_VALUE_TIER_CD"))
    {
        dirtyFlag_[151] = true;
        if(!pJson["ASSET_VALUE_TIER_CD"].isNull())
        {
            assetValueTierCd_=std::make_shared<std::string>(pJson["ASSET_VALUE_TIER_CD"].asString());
        }
    }
    if(pJson.isMember("RELATIONSHIP_TYPE_AML_CD"))
    {
        dirtyFlag_[152] = true;
        if(!pJson["RELATIONSHIP_TYPE_AML_CD"].isNull())
        {
            relationshipTypeAmlCd_=std::make_shared<std::string>(pJson["RELATIONSHIP_TYPE_AML_CD"].asString());
        }
    }
    if(pJson.isMember("CB_ASSET_VALUE_TIER_CD"))
    {
        dirtyFlag_[153] = true;
        if(!pJson["CB_ASSET_VALUE_TIER_CD"].isNull())
        {
            cbAssetValueTierCd_=std::make_shared<std::string>(pJson["CB_ASSET_VALUE_TIER_CD"].asString());
        }
    }
    if(pJson.isMember("APPROVAL_SCORE"))
    {
        dirtyFlag_[154] = true;
        if(!pJson["APPROVAL_SCORE"].isNull())
        {
            approvalScore_=std::make_shared<double>(pJson["APPROVAL_SCORE"].asDouble());
        }
    }
    if(pJson.isMember("APPROVAL_SCORE_STEPS"))
    {
        dirtyFlag_[155] = true;
        if(!pJson["APPROVAL_SCORE_STEPS"].isNull())
        {
            approvalScoreSteps_=std::make_shared<double>(pJson["APPROVAL_SCORE_STEPS"].asDouble());
        }
    }
    if(pJson.isMember("APSYS_DTDEBPARTL"))
    {
        dirtyFlag_[156] = true;
        if(!pJson["APSYS_DTDEBPARTL"].isNull())
        {
            auto timeStr = pJson["APSYS_DTDEBPARTL"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtdebpartl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APSYS_DTFINPARTL"))
    {
        dirtyFlag_[157] = true;
        if(!pJson["APSYS_DTFINPARTL"].isNull())
        {
            auto timeStr = pJson["APSYS_DTFINPARTL"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtfinpartl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APSYS_CDMOTIFCLOS"))
    {
        dirtyFlag_[158] = true;
        if(!pJson["APSYS_CDMOTIFCLOS"].isNull())
        {
            apsysCdmotifclos_=std::make_shared<std::string>(pJson["APSYS_CDMOTIFCLOS"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDNATURECPARTIEEMIRC"))
    {
        dirtyFlag_[159] = true;
        if(!pJson["APSYS_CDNATURECPARTIEEMIRC"].isNull())
        {
            apsysCdnaturecpartieemirc_=std::make_shared<std::string>(pJson["APSYS_CDNATURECPARTIEEMIRC"].asString());
        }
    }
    if(pJson.isMember("APSYS_FLAGOTHEREMIRC"))
    {
        dirtyFlag_[160] = true;
        if(!pJson["APSYS_FLAGOTHEREMIRC"].isNull())
        {
            apsysFlagotheremirc_=std::make_shared<std::string>(pJson["APSYS_FLAGOTHEREMIRC"].asString());
        }
    }
    if(pJson.isMember("APSYS_CDINDUSEMIRS"))
    {
        dirtyFlag_[161] = true;
        if(!pJson["APSYS_CDINDUSEMIRS"].isNull())
        {
            apsysCdindusemirs_=std::make_shared<std::string>(pJson["APSYS_CDINDUSEMIRS"].asString());
        }
    }
    if(pJson.isMember("OPENED_IN_APSYS_DATE"))
    {
        dirtyFlag_[162] = true;
        if(!pJson["OPENED_IN_APSYS_DATE"].isNull())
        {
            auto timeStr = pJson["OPENED_IN_APSYS_DATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                openedInApsysDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APSYS_CDNATURECPARTIEFMIAC"))
    {
        dirtyFlag_[163] = true;
        if(!pJson["APSYS_CDNATURECPARTIEFMIAC"].isNull())
        {
            apsysCdnaturecpartiefmiac_=std::make_shared<std::string>(pJson["APSYS_CDNATURECPARTIEFMIAC"].asString());
        }
    }
    if(pJson.isMember("EBANKING_CLOSED_CD"))
    {
        dirtyFlag_[164] = true;
        if(!pJson["EBANKING_CLOSED_CD"].isNull())
        {
            ebankingClosedCd_=std::make_shared<std::string>(pJson["EBANKING_CLOSED_CD"].asString());
        }
    }
    if(pJson.isMember("EBANKING_CLOSINGDATE"))
    {
        dirtyFlag_[165] = true;
        if(!pJson["EBANKING_CLOSINGDATE"].isNull())
        {
            auto timeStr = pJson["EBANKING_CLOSINGDATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                ebankingClosingdate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("KYC_REVIEW_PROCESS_START_DATE"))
    {
        dirtyFlag_[166] = true;
        if(!pJson["KYC_REVIEW_PROCESS_START_DATE"].isNull())
        {
            auto timeStr = pJson["KYC_REVIEW_PROCESS_START_DATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                kycReviewProcessStartDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("REMARKS"))
    {
        dirtyFlag_[167] = true;
        if(!pJson["REMARKS"].isNull())
        {
            remarks_=std::make_shared<std::string>(pJson["REMARKS"].asString());
        }
    }
    if(pJson.isMember("TRANSACTION_BL_COUNTRY_CD"))
    {
        dirtyFlag_[168] = true;
        if(!pJson["TRANSACTION_BL_COUNTRY_CD"].isNull())
        {
            transactionBlCountryCd_=std::make_shared<double>(pJson["TRANSACTION_BL_COUNTRY_CD"].asDouble());
        }
    }
    if(pJson.isMember("CLIENTGROUP_CD"))
    {
        dirtyFlag_[169] = true;
        if(!pJson["CLIENTGROUP_CD"].isNull())
        {
            clientgroupCd_=std::make_shared<double>(pJson["CLIENTGROUP_CD"].asDouble());
        }
    }
    if(pJson.isMember("RISKINDEX_CALC"))
    {
        dirtyFlag_[170] = true;
        if(!pJson["RISKINDEX_CALC"].isNull())
        {
            riskindexCalc_=std::make_shared<double>(pJson["RISKINDEX_CALC"].asDouble());
        }
    }
    if(pJson.isMember("LAST_CALC_CRI_MUTDATUM"))
    {
        dirtyFlag_[171] = true;
        if(!pJson["LAST_CALC_CRI_MUTDATUM"].isNull())
        {
            auto timeStr = pJson["LAST_CALC_CRI_MUTDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                lastCalcCriMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("RISIKOKATEGORIE_CALC_CD"))
    {
        dirtyFlag_[172] = true;
        if(!pJson["RISIKOKATEGORIE_CALC_CD"].isNull())
        {
            risikokategorieCalcCd_=std::make_shared<std::string>(pJson["RISIKOKATEGORIE_CALC_CD"].asString());
        }
    }
    if(pJson.isMember("RISKINDEX_GROUP"))
    {
        dirtyFlag_[173] = true;
        if(!pJson["RISKINDEX_GROUP"].isNull())
        {
            riskindexGroup_=std::make_shared<double>(pJson["RISKINDEX_GROUP"].asDouble());
        }
    }
    if(pJson.isMember("EST_AMOUNT_REM_WITH_MUTDATUM"))
    {
        dirtyFlag_[174] = true;
        if(!pJson["EST_AMOUNT_REM_WITH_MUTDATUM"].isNull())
        {
            auto timeStr = pJson["EST_AMOUNT_REM_WITH_MUTDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                estAmountRemWithMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("GESAMTVERMOEGEN_MUTDATUM"))
    {
        dirtyFlag_[175] = true;
        if(!pJson["GESAMTVERMOEGEN_MUTDATUM"].isNull())
        {
            auto timeStr = pJson["GESAMTVERMOEGEN_MUTDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                gesamtvermoegenMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("TRANSACT_BL_COUNTRY_MUTDATUM"))
    {
        dirtyFlag_[176] = true;
        if(!pJson["TRANSACT_BL_COUNTRY_MUTDATUM"].isNull())
        {
            auto timeStr = pJson["TRANSACT_BL_COUNTRY_MUTDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                transactBlCountryMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("ACCOUNTPURPOSE_MUTDATUM"))
    {
        dirtyFlag_[177] = true;
        if(!pJson["ACCOUNTPURPOSE_MUTDATUM"].isNull())
        {
            auto timeStr = pJson["ACCOUNTPURPOSE_MUTDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                accountpurposeMutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APSYS_FLAGDELDATAPERSI"))
    {
        dirtyFlag_[178] = true;
        if(!pJson["APSYS_FLAGDELDATAPERSI"].isNull())
        {
            apsysFlagdeldatapersi_=std::make_shared<std::string>(pJson["APSYS_FLAGDELDATAPERSI"].asString());
        }
    }
    if(pJson.isMember("APSYS_DTWAITDELDATAPERSL"))
    {
        dirtyFlag_[179] = true;
        if(!pJson["APSYS_DTWAITDELDATAPERSL"].isNull())
        {
            auto timeStr = pJson["APSYS_DTWAITDELDATAPERSL"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                apsysDtwaitdeldatapersl_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("NAME_ENC"))
    {
        dirtyFlag_[180] = true;
        if(!pJson["NAME_ENC"].isNull())
        {
            nameEnc_=std::make_shared<std::string>(pJson["NAME_ENC"].asString());
        }
    }
    if(pJson.isMember("IN_APSYS_TEMP_ENTSPERREN_CD"))
    {
        dirtyFlag_[181] = true;
        if(!pJson["IN_APSYS_TEMP_ENTSPERREN_CD"].isNull())
        {
            inApsysTempEntsperrenCd_=std::make_shared<std::string>(pJson["IN_APSYS_TEMP_ENTSPERREN_CD"].asString());
        }
    }
    if(pJson.isMember("IN_APSYS_TEMP_ENTSP_USERID"))
    {
        dirtyFlag_[182] = true;
        if(!pJson["IN_APSYS_TEMP_ENTSP_USERID"].isNull())
        {
            inApsysTempEntspUserid_=std::make_shared<std::string>(pJson["IN_APSYS_TEMP_ENTSP_USERID"].asString());
        }
    }
    if(pJson.isMember("IN_APSYS_TEMP_ENTSP_DATUM"))
    {
        dirtyFlag_[183] = true;
        if(!pJson["IN_APSYS_TEMP_ENTSP_DATUM"].isNull())
        {
            auto timeStr = pJson["IN_APSYS_TEMP_ENTSP_DATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                inApsysTempEntspDatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("APSYS_CDREGS"))
    {
        dirtyFlag_[184] = true;
        if(!pJson["APSYS_CDREGS"].isNull())
        {
            apsysCdregs_=std::make_shared<std::string>(pJson["APSYS_CDREGS"].asString());
        }
    }
    if(pJson.isMember("RETENTION_ON_HOLD"))
    {
        dirtyFlag_[185] = true;
        if(!pJson["RETENTION_ON_HOLD"].isNull())
        {
            retentionOnHold_=std::make_shared<std::string>(pJson["RETENTION_ON_HOLD"].asString());
        }
    }
    if(pJson.isMember("RETENTION_ON_HOLD_DATE"))
    {
        dirtyFlag_[186] = true;
        if(!pJson["RETENTION_ON_HOLD_DATE"].isNull())
        {
            auto timeStr = pJson["RETENTION_ON_HOLD_DATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                retentionOnHoldDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("RETENTION_ON_HOLD_REASON"))
    {
        dirtyFlag_[187] = true;
        if(!pJson["RETENTION_ON_HOLD_REASON"].isNull())
        {
            retentionOnHoldReason_=std::make_shared<std::string>(pJson["RETENTION_ON_HOLD_REASON"].asString());
        }
    }
    if(pJson.isMember("LOGICAL_ERASURE"))
    {
        dirtyFlag_[188] = true;
        if(!pJson["LOGICAL_ERASURE"].isNull())
        {
            logicalErasure_=std::make_shared<std::string>(pJson["LOGICAL_ERASURE"].asString());
        }
    }
    if(pJson.isMember("LOGICAL_ERASURE_DATE"))
    {
        dirtyFlag_[189] = true;
        if(!pJson["LOGICAL_ERASURE_DATE"].isNull())
        {
            auto timeStr = pJson["LOGICAL_ERASURE_DATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                logicalErasureDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("LOGICAL_ERASURE_REASON"))
    {
        dirtyFlag_[190] = true;
        if(!pJson["LOGICAL_ERASURE_REASON"].isNull())
        {
            logicalErasureReason_=std::make_shared<std::string>(pJson["LOGICAL_ERASURE_REASON"].asString());
        }
    }
    if(pJson.isMember("COMPLIANCE_MIN_RISK_CATEGORY"))
    {
        dirtyFlag_[191] = true;
        if(!pJson["COMPLIANCE_MIN_RISK_CATEGORY"].isNull())
        {
            complianceMinRiskCategory_=std::make_shared<std::string>(pJson["COMPLIANCE_MIN_RISK_CATEGORY"].asString());
        }
    }
    if(pJson.isMember("COMPLIANCE_MIN_RISK_COMMENT"))
    {
        dirtyFlag_[192] = true;
        if(!pJson["COMPLIANCE_MIN_RISK_COMMENT"].isNull())
        {
            complianceMinRiskComment_=std::make_shared<std::string>(pJson["COMPLIANCE_MIN_RISK_COMMENT"].asString());
        }
    }
    if(pJson.isMember("CLIENT_STRUCTURE_CD"))
    {
        dirtyFlag_[193] = true;
        if(!pJson["CLIENT_STRUCTURE_CD"].isNull())
        {
            clientStructureCd_=std::make_shared<std::string>(pJson["CLIENT_STRUCTURE_CD"].asString());
        }
    }
    if(pJson.isMember("CLIENT_SUBSTRUCTURE_CD"))
    {
        dirtyFlag_[194] = true;
        if(!pJson["CLIENT_SUBSTRUCTURE_CD"].isNull())
        {
            clientSubstructureCd_=std::make_shared<std::string>(pJson["CLIENT_SUBSTRUCTURE_CD"].asString());
        }
    }
}

const double &Kunde::getValueOfKundenid() const noexcept
{
    const static double defaultValue = double();
    if(kundenid_)
        return *kundenid_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getKundenid() const noexcept
{
    return kundenid_;
}
void Kunde::setKundenid(const double &pKundenid) noexcept
{
    kundenid_ = std::make_shared<double>(pKundenid);
    dirtyFlag_[0] = true;
}
const typename Kunde::PrimaryKeyType & Kunde::getPrimaryKey() const
{
    assert(kundenid_);
    return *kundenid_;
}

const std::string &Kunde::getValueOfBezeichnung() const noexcept
{
    const static std::string defaultValue = std::string();
    if(bezeichnung_)
        return *bezeichnung_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getBezeichnung() const noexcept
{
    return bezeichnung_;
}
void Kunde::setBezeichnung(const std::string &pBezeichnung) noexcept
{
    bezeichnung_ = std::make_shared<std::string>(pBezeichnung);
    dirtyFlag_[1] = true;
}
void Kunde::setBezeichnung(std::string &&pBezeichnung) noexcept
{
    bezeichnung_ = std::make_shared<std::string>(std::move(pBezeichnung));
    dirtyFlag_[1] = true;
}
void Kunde::setBezeichnungToNull() noexcept
{
    bezeichnung_.reset();
    dirtyFlag_[1] = true;
}

const ::trantor::Date &Kunde::getValueOfKundeseit() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(kundeseit_)
        return *kundeseit_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getKundeseit() const noexcept
{
    return kundeseit_;
}
void Kunde::setKundeseit(const ::trantor::Date &pKundeseit) noexcept
{
    kundeseit_ = std::make_shared<::trantor::Date>(pKundeseit);
    dirtyFlag_[2] = true;
}
void Kunde::setKundeseitToNull() noexcept
{
    kundeseit_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Kunde::getValueOfVertragsparteiCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(vertragsparteiCd_)
        return *vertragsparteiCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getVertragsparteiCd() const noexcept
{
    return vertragsparteiCd_;
}
void Kunde::setVertragsparteiCd(const std::string &pVertragsparteiCd) noexcept
{
    vertragsparteiCd_ = std::make_shared<std::string>(pVertragsparteiCd);
    dirtyFlag_[3] = true;
}
void Kunde::setVertragsparteiCd(std::string &&pVertragsparteiCd) noexcept
{
    vertragsparteiCd_ = std::make_shared<std::string>(std::move(pVertragsparteiCd));
    dirtyFlag_[3] = true;
}
void Kunde::setVertragsparteiCdToNull() noexcept
{
    vertragsparteiCd_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Kunde::getValueOfLoeschCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(loeschCd_)
        return *loeschCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getLoeschCd() const noexcept
{
    return loeschCd_;
}
void Kunde::setLoeschCd(const std::string &pLoeschCd) noexcept
{
    loeschCd_ = std::make_shared<std::string>(pLoeschCd);
    dirtyFlag_[4] = true;
}
void Kunde::setLoeschCd(std::string &&pLoeschCd) noexcept
{
    loeschCd_ = std::make_shared<std::string>(std::move(pLoeschCd));
    dirtyFlag_[4] = true;
}
void Kunde::setLoeschCdToNull() noexcept
{
    loeschCd_.reset();
    dirtyFlag_[4] = true;
}

const ::trantor::Date &Kunde::getValueOfLoeschdatum() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(loeschdatum_)
        return *loeschdatum_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getLoeschdatum() const noexcept
{
    return loeschdatum_;
}
void Kunde::setLoeschdatum(const ::trantor::Date &pLoeschdatum) noexcept
{
    loeschdatum_ = std::make_shared<::trantor::Date>(pLoeschdatum);
    dirtyFlag_[5] = true;
}
void Kunde::setLoeschdatumToNull() noexcept
{
    loeschdatum_.reset();
    dirtyFlag_[5] = true;
}

const ::trantor::Date &Kunde::getValueOfCrtdatum() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(crtdatum_)
        return *crtdatum_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getCrtdatum() const noexcept
{
    return crtdatum_;
}
void Kunde::setCrtdatum(const ::trantor::Date &pCrtdatum) noexcept
{
    crtdatum_ = std::make_shared<::trantor::Date>(pCrtdatum);
    dirtyFlag_[6] = true;
}
void Kunde::setCrtdatumToNull() noexcept
{
    crtdatum_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Kunde::getValueOfCrtuser() const noexcept
{
    const static std::string defaultValue = std::string();
    if(crtuser_)
        return *crtuser_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getCrtuser() const noexcept
{
    return crtuser_;
}
void Kunde::setCrtuser(const std::string &pCrtuser) noexcept
{
    crtuser_ = std::make_shared<std::string>(pCrtuser);
    dirtyFlag_[7] = true;
}
void Kunde::setCrtuser(std::string &&pCrtuser) noexcept
{
    crtuser_ = std::make_shared<std::string>(std::move(pCrtuser));
    dirtyFlag_[7] = true;
}
void Kunde::setCrtuserToNull() noexcept
{
    crtuser_.reset();
    dirtyFlag_[7] = true;
}

const ::trantor::Date &Kunde::getValueOfMutdatum() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(mutdatum_)
        return *mutdatum_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getMutdatum() const noexcept
{
    return mutdatum_;
}
void Kunde::setMutdatum(const ::trantor::Date &pMutdatum) noexcept
{
    mutdatum_ = std::make_shared<::trantor::Date>(pMutdatum);
    dirtyFlag_[8] = true;
}
void Kunde::setMutdatumToNull() noexcept
{
    mutdatum_.reset();
    dirtyFlag_[8] = true;
}

const std::string &Kunde::getValueOfMutuser() const noexcept
{
    const static std::string defaultValue = std::string();
    if(mutuser_)
        return *mutuser_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getMutuser() const noexcept
{
    return mutuser_;
}
void Kunde::setMutuser(const std::string &pMutuser) noexcept
{
    mutuser_ = std::make_shared<std::string>(pMutuser);
    dirtyFlag_[9] = true;
}
void Kunde::setMutuser(std::string &&pMutuser) noexcept
{
    mutuser_ = std::make_shared<std::string>(std::move(pMutuser));
    dirtyFlag_[9] = true;
}
void Kunde::setMutuserToNull() noexcept
{
    mutuser_.reset();
    dirtyFlag_[9] = true;
}

const std::string &Kunde::getValueOfPseudoaccountCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(pseudoaccountCd_)
        return *pseudoaccountCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getPseudoaccountCd() const noexcept
{
    return pseudoaccountCd_;
}
void Kunde::setPseudoaccountCd(const std::string &pPseudoaccountCd) noexcept
{
    pseudoaccountCd_ = std::make_shared<std::string>(pPseudoaccountCd);
    dirtyFlag_[10] = true;
}
void Kunde::setPseudoaccountCd(std::string &&pPseudoaccountCd) noexcept
{
    pseudoaccountCd_ = std::make_shared<std::string>(std::move(pPseudoaccountCd));
    dirtyFlag_[10] = true;
}
void Kunde::setPseudoaccountCdToNull() noexcept
{
    pseudoaccountCd_.reset();
    dirtyFlag_[10] = true;
}

const ::trantor::Date &Kunde::getValueOfKundebesuch() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(kundebesuch_)
        return *kundebesuch_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getKundebesuch() const noexcept
{
    return kundebesuch_;
}
void Kunde::setKundebesuch(const ::trantor::Date &pKundebesuch) noexcept
{
    kundebesuch_ = std::make_shared<::trantor::Date>(pKundebesuch);
    dirtyFlag_[11] = true;
}
void Kunde::setKundebesuchToNull() noexcept
{
    kundebesuch_.reset();
    dirtyFlag_[11] = true;
}

const std::string &Kunde::getValueOfBezeichnungvertrag() const noexcept
{
    const static std::string defaultValue = std::string();
    if(bezeichnungvertrag_)
        return *bezeichnungvertrag_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getBezeichnungvertrag() const noexcept
{
    return bezeichnungvertrag_;
}
void Kunde::setBezeichnungvertrag(const std::string &pBezeichnungvertrag) noexcept
{
    bezeichnungvertrag_ = std::make_shared<std::string>(pBezeichnungvertrag);
    dirtyFlag_[12] = true;
}
void Kunde::setBezeichnungvertrag(std::string &&pBezeichnungvertrag) noexcept
{
    bezeichnungvertrag_ = std::make_shared<std::string>(std::move(pBezeichnungvertrag));
    dirtyFlag_[12] = true;
}
void Kunde::setBezeichnungvertragToNull() noexcept
{
    bezeichnungvertrag_.reset();
    dirtyFlag_[12] = true;
}

const std::string &Kunde::getValueOfPseudonym() const noexcept
{
    const static std::string defaultValue = std::string();
    if(pseudonym_)
        return *pseudonym_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getPseudonym() const noexcept
{
    return pseudonym_;
}
void Kunde::setPseudonym(const std::string &pPseudonym) noexcept
{
    pseudonym_ = std::make_shared<std::string>(pPseudonym);
    dirtyFlag_[13] = true;
}
void Kunde::setPseudonym(std::string &&pPseudonym) noexcept
{
    pseudonym_ = std::make_shared<std::string>(std::move(pPseudonym));
    dirtyFlag_[13] = true;
}
void Kunde::setPseudonymToNull() noexcept
{
    pseudonym_.reset();
    dirtyFlag_[13] = true;
}

const std::string &Kunde::getValueOfRechtsdomizilCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(rechtsdomizilCd_)
        return *rechtsdomizilCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getRechtsdomizilCd() const noexcept
{
    return rechtsdomizilCd_;
}
void Kunde::setRechtsdomizilCd(const std::string &pRechtsdomizilCd) noexcept
{
    rechtsdomizilCd_ = std::make_shared<std::string>(pRechtsdomizilCd);
    dirtyFlag_[14] = true;
}
void Kunde::setRechtsdomizilCd(std::string &&pRechtsdomizilCd) noexcept
{
    rechtsdomizilCd_ = std::make_shared<std::string>(std::move(pRechtsdomizilCd));
    dirtyFlag_[14] = true;
}
void Kunde::setRechtsdomizilCdToNull() noexcept
{
    rechtsdomizilCd_.reset();
    dirtyFlag_[14] = true;
}

const std::string &Kunde::getValueOfKorrespondenzsprachCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(korrespondenzsprachCd_)
        return *korrespondenzsprachCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getKorrespondenzsprachCd() const noexcept
{
    return korrespondenzsprachCd_;
}
void Kunde::setKorrespondenzsprachCd(const std::string &pKorrespondenzsprachCd) noexcept
{
    korrespondenzsprachCd_ = std::make_shared<std::string>(pKorrespondenzsprachCd);
    dirtyFlag_[15] = true;
}
void Kunde::setKorrespondenzsprachCd(std::string &&pKorrespondenzsprachCd) noexcept
{
    korrespondenzsprachCd_ = std::make_shared<std::string>(std::move(pKorrespondenzsprachCd));
    dirtyFlag_[15] = true;
}
void Kunde::setKorrespondenzsprachCdToNull() noexcept
{
    korrespondenzsprachCd_.reset();
    dirtyFlag_[15] = true;
}

const std::string &Kunde::getValueOfMitProfilCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(mitProfilCd_)
        return *mitProfilCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getMitProfilCd() const noexcept
{
    return mitProfilCd_;
}
void Kunde::setMitProfilCd(const std::string &pMitProfilCd) noexcept
{
    mitProfilCd_ = std::make_shared<std::string>(pMitProfilCd);
    dirtyFlag_[16] = true;
}
void Kunde::setMitProfilCd(std::string &&pMitProfilCd) noexcept
{
    mitProfilCd_ = std::make_shared<std::string>(std::move(pMitProfilCd));
    dirtyFlag_[16] = true;
}
void Kunde::setMitProfilCdToNull() noexcept
{
    mitProfilCd_.reset();
    dirtyFlag_[16] = true;
}

const std::string &Kunde::getValueOfGemeinschaftskontoCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(gemeinschaftskontoCd_)
        return *gemeinschaftskontoCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getGemeinschaftskontoCd() const noexcept
{
    return gemeinschaftskontoCd_;
}
void Kunde::setGemeinschaftskontoCd(const std::string &pGemeinschaftskontoCd) noexcept
{
    gemeinschaftskontoCd_ = std::make_shared<std::string>(pGemeinschaftskontoCd);
    dirtyFlag_[17] = true;
}
void Kunde::setGemeinschaftskontoCd(std::string &&pGemeinschaftskontoCd) noexcept
{
    gemeinschaftskontoCd_ = std::make_shared<std::string>(std::move(pGemeinschaftskontoCd));
    dirtyFlag_[17] = true;
}
void Kunde::setGemeinschaftskontoCdToNull() noexcept
{
    gemeinschaftskontoCd_.reset();
    dirtyFlag_[17] = true;
}

const std::string &Kunde::getValueOfPin() const noexcept
{
    const static std::string defaultValue = std::string();
    if(pin_)
        return *pin_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getPin() const noexcept
{
    return pin_;
}
void Kunde::setPin(const std::string &pPin) noexcept
{
    pin_ = std::make_shared<std::string>(pPin);
    dirtyFlag_[18] = true;
}
void Kunde::setPin(std::string &&pPin) noexcept
{
    pin_ = std::make_shared<std::string>(std::move(pPin));
    dirtyFlag_[18] = true;
}
void Kunde::setPinToNull() noexcept
{
    pin_.reset();
    dirtyFlag_[18] = true;
}

const std::string &Kunde::getValueOfVerwendungszweck() const noexcept
{
    const static std::string defaultValue = std::string();
    if(verwendungszweck_)
        return *verwendungszweck_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getVerwendungszweck() const noexcept
{
    return verwendungszweck_;
}
void Kunde::setVerwendungszweck(const std::string &pVerwendungszweck) noexcept
{
    verwendungszweck_ = std::make_shared<std::string>(pVerwendungszweck);
    dirtyFlag_[19] = true;
}
void Kunde::setVerwendungszweck(std::string &&pVerwendungszweck) noexcept
{
    verwendungszweck_ = std::make_shared<std::string>(std::move(pVerwendungszweck));
    dirtyFlag_[19] = true;
}
void Kunde::setVerwendungszweckToNull() noexcept
{
    verwendungszweck_.reset();
    dirtyFlag_[19] = true;
}

const std::string &Kunde::getValueOfIdentifikationsartCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(identifikationsartCd_)
        return *identifikationsartCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getIdentifikationsartCd() const noexcept
{
    return identifikationsartCd_;
}
void Kunde::setIdentifikationsartCd(const std::string &pIdentifikationsartCd) noexcept
{
    identifikationsartCd_ = std::make_shared<std::string>(pIdentifikationsartCd);
    dirtyFlag_[20] = true;
}
void Kunde::setIdentifikationsartCd(std::string &&pIdentifikationsartCd) noexcept
{
    identifikationsartCd_ = std::make_shared<std::string>(std::move(pIdentifikationsartCd));
    dirtyFlag_[20] = true;
}
void Kunde::setIdentifikationsartCdToNull() noexcept
{
    identifikationsartCd_.reset();
    dirtyFlag_[20] = true;
}

const std::string &Kunde::getValueOfVermoegensursprungCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(vermoegensursprungCd_)
        return *vermoegensursprungCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getVermoegensursprungCd() const noexcept
{
    return vermoegensursprungCd_;
}
void Kunde::setVermoegensursprungCd(const std::string &pVermoegensursprungCd) noexcept
{
    vermoegensursprungCd_ = std::make_shared<std::string>(pVermoegensursprungCd);
    dirtyFlag_[21] = true;
}
void Kunde::setVermoegensursprungCd(std::string &&pVermoegensursprungCd) noexcept
{
    vermoegensursprungCd_ = std::make_shared<std::string>(std::move(pVermoegensursprungCd));
    dirtyFlag_[21] = true;
}
void Kunde::setVermoegensursprungCdToNull() noexcept
{
    vermoegensursprungCd_.reset();
    dirtyFlag_[21] = true;
}

const std::string &Kunde::getValueOfVermoegensursprung() const noexcept
{
    const static std::string defaultValue = std::string();
    if(vermoegensursprung_)
        return *vermoegensursprung_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getVermoegensursprung() const noexcept
{
    return vermoegensursprung_;
}
void Kunde::setVermoegensursprung(const std::string &pVermoegensursprung) noexcept
{
    vermoegensursprung_ = std::make_shared<std::string>(pVermoegensursprung);
    dirtyFlag_[22] = true;
}
void Kunde::setVermoegensursprung(std::string &&pVermoegensursprung) noexcept
{
    vermoegensursprung_ = std::make_shared<std::string>(std::move(pVermoegensursprung));
    dirtyFlag_[22] = true;
}
void Kunde::setVermoegensursprungToNull() noexcept
{
    vermoegensursprung_.reset();
    dirtyFlag_[22] = true;
}

const std::string &Kunde::getValueOfGeldvonkonto() const noexcept
{
    const static std::string defaultValue = std::string();
    if(geldvonkonto_)
        return *geldvonkonto_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getGeldvonkonto() const noexcept
{
    return geldvonkonto_;
}
void Kunde::setGeldvonkonto(const std::string &pGeldvonkonto) noexcept
{
    geldvonkonto_ = std::make_shared<std::string>(pGeldvonkonto);
    dirtyFlag_[23] = true;
}
void Kunde::setGeldvonkonto(std::string &&pGeldvonkonto) noexcept
{
    geldvonkonto_ = std::make_shared<std::string>(std::move(pGeldvonkonto));
    dirtyFlag_[23] = true;
}
void Kunde::setGeldvonkontoToNull() noexcept
{
    geldvonkonto_.reset();
    dirtyFlag_[23] = true;
}

const std::string &Kunde::getValueOfBisherigebetreuung() const noexcept
{
    const static std::string defaultValue = std::string();
    if(bisherigebetreuung_)
        return *bisherigebetreuung_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getBisherigebetreuung() const noexcept
{
    return bisherigebetreuung_;
}
void Kunde::setBisherigebetreuung(const std::string &pBisherigebetreuung) noexcept
{
    bisherigebetreuung_ = std::make_shared<std::string>(pBisherigebetreuung);
    dirtyFlag_[24] = true;
}
void Kunde::setBisherigebetreuung(std::string &&pBisherigebetreuung) noexcept
{
    bisherigebetreuung_ = std::make_shared<std::string>(std::move(pBisherigebetreuung));
    dirtyFlag_[24] = true;
}
void Kunde::setBisherigebetreuungToNull() noexcept
{
    bisherigebetreuung_.reset();
    dirtyFlag_[24] = true;
}

const ::trantor::Date &Kunde::getValueOfBisherigebetreuungseit() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(bisherigebetreuungseit_)
        return *bisherigebetreuungseit_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getBisherigebetreuungseit() const noexcept
{
    return bisherigebetreuungseit_;
}
void Kunde::setBisherigebetreuungseit(const ::trantor::Date &pBisherigebetreuungseit) noexcept
{
    bisherigebetreuungseit_ = std::make_shared<::trantor::Date>(pBisherigebetreuungseit);
    dirtyFlag_[25] = true;
}
void Kunde::setBisherigebetreuungseitToNull() noexcept
{
    bisherigebetreuungseit_.reset();
    dirtyFlag_[25] = true;
}

const std::string &Kunde::getValueOfManualopenCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(manualopenCd_)
        return *manualopenCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getManualopenCd() const noexcept
{
    return manualopenCd_;
}
void Kunde::setManualopenCd(const std::string &pManualopenCd) noexcept
{
    manualopenCd_ = std::make_shared<std::string>(pManualopenCd);
    dirtyFlag_[26] = true;
}
void Kunde::setManualopenCd(std::string &&pManualopenCd) noexcept
{
    manualopenCd_ = std::make_shared<std::string>(std::move(pManualopenCd));
    dirtyFlag_[26] = true;
}
void Kunde::setManualopenCdToNull() noexcept
{
    manualopenCd_.reset();
    dirtyFlag_[26] = true;
}

const std::string &Kunde::getValueOfEinVermoegenCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(einVermoegenCd_)
        return *einVermoegenCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getEinVermoegenCd() const noexcept
{
    return einVermoegenCd_;
}
void Kunde::setEinVermoegenCd(const std::string &pEinVermoegenCd) noexcept
{
    einVermoegenCd_ = std::make_shared<std::string>(pEinVermoegenCd);
    dirtyFlag_[27] = true;
}
void Kunde::setEinVermoegenCd(std::string &&pEinVermoegenCd) noexcept
{
    einVermoegenCd_ = std::make_shared<std::string>(std::move(pEinVermoegenCd));
    dirtyFlag_[27] = true;
}
void Kunde::setEinVermoegenCdToNull() noexcept
{
    einVermoegenCd_.reset();
    dirtyFlag_[27] = true;
}

const std::string &Kunde::getValueOfRegionzahlungCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(regionzahlungCd_)
        return *regionzahlungCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getRegionzahlungCd() const noexcept
{
    return regionzahlungCd_;
}
void Kunde::setRegionzahlungCd(const std::string &pRegionzahlungCd) noexcept
{
    regionzahlungCd_ = std::make_shared<std::string>(pRegionzahlungCd);
    dirtyFlag_[28] = true;
}
void Kunde::setRegionzahlungCd(std::string &&pRegionzahlungCd) noexcept
{
    regionzahlungCd_ = std::make_shared<std::string>(std::move(pRegionzahlungCd));
    dirtyFlag_[28] = true;
}
void Kunde::setRegionzahlungCdToNull() noexcept
{
    regionzahlungCd_.reset();
    dirtyFlag_[28] = true;
}

const std::string &Kunde::getValueOfEinVermoegenartCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(einVermoegenartCd_)
        return *einVermoegenartCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getEinVermoegenartCd() const noexcept
{
    return einVermoegenartCd_;
}
void Kunde::setEinVermoegenartCd(const std::string &pEinVermoegenartCd) noexcept
{
    einVermoegenartCd_ = std::make_shared<std::string>(pEinVermoegenartCd);
    dirtyFlag_[29] = true;
}
void Kunde::setEinVermoegenartCd(std::string &&pEinVermoegenartCd) noexcept
{
    einVermoegenartCd_ = std::make_shared<std::string>(std::move(pEinVermoegenartCd));
    dirtyFlag_[29] = true;
}
void Kunde::setEinVermoegenartCdToNull() noexcept
{
    einVermoegenartCd_.reset();
    dirtyFlag_[29] = true;
}

const std::string &Kunde::getValueOfSpezWuenscheCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(spezWuenscheCd_)
        return *spezWuenscheCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getSpezWuenscheCd() const noexcept
{
    return spezWuenscheCd_;
}
void Kunde::setSpezWuenscheCd(const std::string &pSpezWuenscheCd) noexcept
{
    spezWuenscheCd_ = std::make_shared<std::string>(pSpezWuenscheCd);
    dirtyFlag_[30] = true;
}
void Kunde::setSpezWuenscheCd(std::string &&pSpezWuenscheCd) noexcept
{
    spezWuenscheCd_ = std::make_shared<std::string>(std::move(pSpezWuenscheCd));
    dirtyFlag_[30] = true;
}
void Kunde::setSpezWuenscheCdToNull() noexcept
{
    spezWuenscheCd_.reset();
    dirtyFlag_[30] = true;
}

const std::string &Kunde::getValueOfManagerCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(managerCd_)
        return *managerCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getManagerCd() const noexcept
{
    return managerCd_;
}
void Kunde::setManagerCd(const std::string &pManagerCd) noexcept
{
    managerCd_ = std::make_shared<std::string>(pManagerCd);
    dirtyFlag_[31] = true;
}
void Kunde::setManagerCd(std::string &&pManagerCd) noexcept
{
    managerCd_ = std::make_shared<std::string>(std::move(pManagerCd));
    dirtyFlag_[31] = true;
}
void Kunde::setManagerCdToNull() noexcept
{
    managerCd_.reset();
    dirtyFlag_[31] = true;
}

const double &Kunde::getValueOfRiskindex() const noexcept
{
    const static double defaultValue = double();
    if(riskindex_)
        return *riskindex_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getRiskindex() const noexcept
{
    return riskindex_;
}
void Kunde::setRiskindex(const double &pRiskindex) noexcept
{
    riskindex_ = std::make_shared<double>(pRiskindex);
    dirtyFlag_[32] = true;
}
void Kunde::setRiskindexToNull() noexcept
{
    riskindex_.reset();
    dirtyFlag_[32] = true;
}

const ::trantor::Date &Kunde::getValueOfRiskindexGueltiseit() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(riskindexGueltiseit_)
        return *riskindexGueltiseit_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getRiskindexGueltiseit() const noexcept
{
    return riskindexGueltiseit_;
}
void Kunde::setRiskindexGueltiseit(const ::trantor::Date &pRiskindexGueltiseit) noexcept
{
    riskindexGueltiseit_ = std::make_shared<::trantor::Date>(pRiskindexGueltiseit);
    dirtyFlag_[33] = true;
}
void Kunde::setRiskindexGueltiseitToNull() noexcept
{
    riskindexGueltiseit_.reset();
    dirtyFlag_[33] = true;
}

const ::trantor::Date &Kunde::getValueOfRiskindexLetzteberechnung() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(riskindexLetzteberechnung_)
        return *riskindexLetzteberechnung_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getRiskindexLetzteberechnung() const noexcept
{
    return riskindexLetzteberechnung_;
}
void Kunde::setRiskindexLetzteberechnung(const ::trantor::Date &pRiskindexLetzteberechnung) noexcept
{
    riskindexLetzteberechnung_ = std::make_shared<::trantor::Date>(pRiskindexLetzteberechnung);
    dirtyFlag_[34] = true;
}
void Kunde::setRiskindexLetzteberechnungToNull() noexcept
{
    riskindexLetzteberechnung_.reset();
    dirtyFlag_[34] = true;
}

const std::string &Kunde::getValueOfKontoeroeffnungsartCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(kontoeroeffnungsartCd_)
        return *kontoeroeffnungsartCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getKontoeroeffnungsartCd() const noexcept
{
    return kontoeroeffnungsartCd_;
}
void Kunde::setKontoeroeffnungsartCd(const std::string &pKontoeroeffnungsartCd) noexcept
{
    kontoeroeffnungsartCd_ = std::make_shared<std::string>(pKontoeroeffnungsartCd);
    dirtyFlag_[35] = true;
}
void Kunde::setKontoeroeffnungsartCd(std::string &&pKontoeroeffnungsartCd) noexcept
{
    kontoeroeffnungsartCd_ = std::make_shared<std::string>(std::move(pKontoeroeffnungsartCd));
    dirtyFlag_[35] = true;
}
void Kunde::setKontoeroeffnungsartCdToNull() noexcept
{
    kontoeroeffnungsartCd_.reset();
    dirtyFlag_[35] = true;
}

const std::string &Kunde::getValueOfRiskindexberechnenCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(riskindexberechnenCd_)
        return *riskindexberechnenCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getRiskindexberechnenCd() const noexcept
{
    return riskindexberechnenCd_;
}
void Kunde::setRiskindexberechnenCd(const std::string &pRiskindexberechnenCd) noexcept
{
    riskindexberechnenCd_ = std::make_shared<std::string>(pRiskindexberechnenCd);
    dirtyFlag_[36] = true;
}
void Kunde::setRiskindexberechnenCd(std::string &&pRiskindexberechnenCd) noexcept
{
    riskindexberechnenCd_ = std::make_shared<std::string>(std::move(pRiskindexberechnenCd));
    dirtyFlag_[36] = true;
}
void Kunde::setRiskindexberechnenCdToNull() noexcept
{
    riskindexberechnenCd_.reset();
    dirtyFlag_[36] = true;
}

const std::string &Kunde::getValueOfKundennaturCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(kundennaturCd_)
        return *kundennaturCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getKundennaturCd() const noexcept
{
    return kundennaturCd_;
}
void Kunde::setKundennaturCd(const std::string &pKundennaturCd) noexcept
{
    kundennaturCd_ = std::make_shared<std::string>(pKundennaturCd);
    dirtyFlag_[37] = true;
}
void Kunde::setKundennaturCd(std::string &&pKundennaturCd) noexcept
{
    kundennaturCd_ = std::make_shared<std::string>(std::move(pKundennaturCd));
    dirtyFlag_[37] = true;
}
void Kunde::setKundennaturCdToNull() noexcept
{
    kundennaturCd_.reset();
    dirtyFlag_[37] = true;
}

const std::string &Kunde::getValueOfRisikokategorieCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(risikokategorieCd_)
        return *risikokategorieCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getRisikokategorieCd() const noexcept
{
    return risikokategorieCd_;
}
void Kunde::setRisikokategorieCd(const std::string &pRisikokategorieCd) noexcept
{
    risikokategorieCd_ = std::make_shared<std::string>(pRisikokategorieCd);
    dirtyFlag_[38] = true;
}
void Kunde::setRisikokategorieCd(std::string &&pRisikokategorieCd) noexcept
{
    risikokategorieCd_ = std::make_shared<std::string>(std::move(pRisikokategorieCd));
    dirtyFlag_[38] = true;
}
void Kunde::setRisikokategorieCdToNull() noexcept
{
    risikokategorieCd_.reset();
    dirtyFlag_[38] = true;
}

const std::string &Kunde::getValueOfPepCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(pepCd_)
        return *pepCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getPepCd() const noexcept
{
    return pepCd_;
}
void Kunde::setPepCd(const std::string &pPepCd) noexcept
{
    pepCd_ = std::make_shared<std::string>(pPepCd);
    dirtyFlag_[39] = true;
}
void Kunde::setPepCd(std::string &&pPepCd) noexcept
{
    pepCd_ = std::make_shared<std::string>(std::move(pPepCd));
    dirtyFlag_[39] = true;
}
void Kunde::setPepCdToNull() noexcept
{
    pepCd_.reset();
    dirtyFlag_[39] = true;
}

const std::string &Kunde::getValueOfSpezialkategorieCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(spezialkategorieCd_)
        return *spezialkategorieCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getSpezialkategorieCd() const noexcept
{
    return spezialkategorieCd_;
}
void Kunde::setSpezialkategorieCd(const std::string &pSpezialkategorieCd) noexcept
{
    spezialkategorieCd_ = std::make_shared<std::string>(pSpezialkategorieCd);
    dirtyFlag_[40] = true;
}
void Kunde::setSpezialkategorieCd(std::string &&pSpezialkategorieCd) noexcept
{
    spezialkategorieCd_ = std::make_shared<std::string>(std::move(pSpezialkategorieCd));
    dirtyFlag_[40] = true;
}
void Kunde::setSpezialkategorieCdToNull() noexcept
{
    spezialkategorieCd_.reset();
    dirtyFlag_[40] = true;
}

const std::string &Kunde::getValueOfNatureCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(natureCd_)
        return *natureCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getNatureCd() const noexcept
{
    return natureCd_;
}
void Kunde::setNatureCd(const std::string &pNatureCd) noexcept
{
    natureCd_ = std::make_shared<std::string>(pNatureCd);
    dirtyFlag_[41] = true;
}
void Kunde::setNatureCd(std::string &&pNatureCd) noexcept
{
    natureCd_ = std::make_shared<std::string>(std::move(pNatureCd));
    dirtyFlag_[41] = true;
}
void Kunde::setNatureCdToNull() noexcept
{
    natureCd_.reset();
    dirtyFlag_[41] = true;
}

const std::string &Kunde::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getName() const noexcept
{
    return name_;
}
void Kunde::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[42] = true;
}
void Kunde::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[42] = true;
}
void Kunde::setNameToNull() noexcept
{
    name_.reset();
    dirtyFlag_[42] = true;
}

const std::string &Kunde::getValueOfLedigername() const noexcept
{
    const static std::string defaultValue = std::string();
    if(ledigername_)
        return *ledigername_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getLedigername() const noexcept
{
    return ledigername_;
}
void Kunde::setLedigername(const std::string &pLedigername) noexcept
{
    ledigername_ = std::make_shared<std::string>(pLedigername);
    dirtyFlag_[43] = true;
}
void Kunde::setLedigername(std::string &&pLedigername) noexcept
{
    ledigername_ = std::make_shared<std::string>(std::move(pLedigername));
    dirtyFlag_[43] = true;
}
void Kunde::setLedigernameToNull() noexcept
{
    ledigername_.reset();
    dirtyFlag_[43] = true;
}

const std::string &Kunde::getValueOfVorname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(vorname_)
        return *vorname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getVorname() const noexcept
{
    return vorname_;
}
void Kunde::setVorname(const std::string &pVorname) noexcept
{
    vorname_ = std::make_shared<std::string>(pVorname);
    dirtyFlag_[44] = true;
}
void Kunde::setVorname(std::string &&pVorname) noexcept
{
    vorname_ = std::make_shared<std::string>(std::move(pVorname));
    dirtyFlag_[44] = true;
}
void Kunde::setVornameToNull() noexcept
{
    vorname_.reset();
    dirtyFlag_[44] = true;
}

const std::string &Kunde::getValueOfCdpartc() const noexcept
{
    const static std::string defaultValue = std::string();
    if(cdpartc_)
        return *cdpartc_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getCdpartc() const noexcept
{
    return cdpartc_;
}
void Kunde::setCdpartc(const std::string &pCdpartc) noexcept
{
    cdpartc_ = std::make_shared<std::string>(pCdpartc);
    dirtyFlag_[45] = true;
}
void Kunde::setCdpartc(std::string &&pCdpartc) noexcept
{
    cdpartc_ = std::make_shared<std::string>(std::move(pCdpartc));
    dirtyFlag_[45] = true;
}
void Kunde::setCdpartcToNull() noexcept
{
    cdpartc_.reset();
    dirtyFlag_[45] = true;
}

const std::string &Kunde::getValueOfNationalitaetCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(nationalitaetCd_)
        return *nationalitaetCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getNationalitaetCd() const noexcept
{
    return nationalitaetCd_;
}
void Kunde::setNationalitaetCd(const std::string &pNationalitaetCd) noexcept
{
    nationalitaetCd_ = std::make_shared<std::string>(pNationalitaetCd);
    dirtyFlag_[46] = true;
}
void Kunde::setNationalitaetCd(std::string &&pNationalitaetCd) noexcept
{
    nationalitaetCd_ = std::make_shared<std::string>(std::move(pNationalitaetCd));
    dirtyFlag_[46] = true;
}
void Kunde::setNationalitaetCdToNull() noexcept
{
    nationalitaetCd_.reset();
    dirtyFlag_[46] = true;
}

const std::string &Kunde::getValueOfRisikolandCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(risikolandCd_)
        return *risikolandCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getRisikolandCd() const noexcept
{
    return risikolandCd_;
}
void Kunde::setRisikolandCd(const std::string &pRisikolandCd) noexcept
{
    risikolandCd_ = std::make_shared<std::string>(pRisikolandCd);
    dirtyFlag_[47] = true;
}
void Kunde::setRisikolandCd(std::string &&pRisikolandCd) noexcept
{
    risikolandCd_ = std::make_shared<std::string>(std::move(pRisikolandCd));
    dirtyFlag_[47] = true;
}
void Kunde::setRisikolandCdToNull() noexcept
{
    risikolandCd_.reset();
    dirtyFlag_[47] = true;
}

const std::string &Kunde::getValueOfPersoenlichbekanntCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(persoenlichbekanntCd_)
        return *persoenlichbekanntCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getPersoenlichbekanntCd() const noexcept
{
    return persoenlichbekanntCd_;
}
void Kunde::setPersoenlichbekanntCd(const std::string &pPersoenlichbekanntCd) noexcept
{
    persoenlichbekanntCd_ = std::make_shared<std::string>(pPersoenlichbekanntCd);
    dirtyFlag_[48] = true;
}
void Kunde::setPersoenlichbekanntCd(std::string &&pPersoenlichbekanntCd) noexcept
{
    persoenlichbekanntCd_ = std::make_shared<std::string>(std::move(pPersoenlichbekanntCd));
    dirtyFlag_[48] = true;
}
void Kunde::setPersoenlichbekanntCdToNull() noexcept
{
    persoenlichbekanntCd_.reset();
    dirtyFlag_[48] = true;
}

const std::string &Kunde::getValueOfRisikotaetigkeitCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(risikotaetigkeitCd_)
        return *risikotaetigkeitCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getRisikotaetigkeitCd() const noexcept
{
    return risikotaetigkeitCd_;
}
void Kunde::setRisikotaetigkeitCd(const std::string &pRisikotaetigkeitCd) noexcept
{
    risikotaetigkeitCd_ = std::make_shared<std::string>(pRisikotaetigkeitCd);
    dirtyFlag_[49] = true;
}
void Kunde::setRisikotaetigkeitCd(std::string &&pRisikotaetigkeitCd) noexcept
{
    risikotaetigkeitCd_ = std::make_shared<std::string>(std::move(pRisikotaetigkeitCd));
    dirtyFlag_[49] = true;
}
void Kunde::setRisikotaetigkeitCdToNull() noexcept
{
    risikotaetigkeitCd_.reset();
    dirtyFlag_[49] = true;
}

const std::string &Kunde::getValueOfSteuerdomizilCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(steuerdomizilCd_)
        return *steuerdomizilCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getSteuerdomizilCd() const noexcept
{
    return steuerdomizilCd_;
}
void Kunde::setSteuerdomizilCd(const std::string &pSteuerdomizilCd) noexcept
{
    steuerdomizilCd_ = std::make_shared<std::string>(pSteuerdomizilCd);
    dirtyFlag_[50] = true;
}
void Kunde::setSteuerdomizilCd(std::string &&pSteuerdomizilCd) noexcept
{
    steuerdomizilCd_ = std::make_shared<std::string>(std::move(pSteuerdomizilCd));
    dirtyFlag_[50] = true;
}
void Kunde::setSteuerdomizilCdToNull() noexcept
{
    steuerdomizilCd_.reset();
    dirtyFlag_[50] = true;
}

const std::string &Kunde::getValueOfEuTaxstatusCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(euTaxstatusCd_)
        return *euTaxstatusCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getEuTaxstatusCd() const noexcept
{
    return euTaxstatusCd_;
}
void Kunde::setEuTaxstatusCd(const std::string &pEuTaxstatusCd) noexcept
{
    euTaxstatusCd_ = std::make_shared<std::string>(pEuTaxstatusCd);
    dirtyFlag_[51] = true;
}
void Kunde::setEuTaxstatusCd(std::string &&pEuTaxstatusCd) noexcept
{
    euTaxstatusCd_ = std::make_shared<std::string>(std::move(pEuTaxstatusCd));
    dirtyFlag_[51] = true;
}
void Kunde::setEuTaxstatusCdToNull() noexcept
{
    euTaxstatusCd_.reset();
    dirtyFlag_[51] = true;
}

const std::string &Kunde::getValueOfTin() const noexcept
{
    const static std::string defaultValue = std::string();
    if(tin_)
        return *tin_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getTin() const noexcept
{
    return tin_;
}
void Kunde::setTin(const std::string &pTin) noexcept
{
    tin_ = std::make_shared<std::string>(pTin);
    dirtyFlag_[52] = true;
}
void Kunde::setTin(std::string &&pTin) noexcept
{
    tin_ = std::make_shared<std::string>(std::move(pTin));
    dirtyFlag_[52] = true;
}
void Kunde::setTinToNull() noexcept
{
    tin_.reset();
    dirtyFlag_[52] = true;
}

const std::string &Kunde::getValueOfApsysCdrolpersi() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysCdrolpersi_)
        return *apsysCdrolpersi_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysCdrolpersi() const noexcept
{
    return apsysCdrolpersi_;
}
void Kunde::setApsysCdrolpersi(const std::string &pApsysCdrolpersi) noexcept
{
    apsysCdrolpersi_ = std::make_shared<std::string>(pApsysCdrolpersi);
    dirtyFlag_[53] = true;
}
void Kunde::setApsysCdrolpersi(std::string &&pApsysCdrolpersi) noexcept
{
    apsysCdrolpersi_ = std::make_shared<std::string>(std::move(pApsysCdrolpersi));
    dirtyFlag_[53] = true;
}
void Kunde::setApsysCdrolpersiToNull() noexcept
{
    apsysCdrolpersi_.reset();
    dirtyFlag_[53] = true;
}

const std::string &Kunde::getValueOfVertragsprachCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(vertragsprachCd_)
        return *vertragsprachCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getVertragsprachCd() const noexcept
{
    return vertragsprachCd_;
}
void Kunde::setVertragsprachCd(const std::string &pVertragsprachCd) noexcept
{
    vertragsprachCd_ = std::make_shared<std::string>(pVertragsprachCd);
    dirtyFlag_[54] = true;
}
void Kunde::setVertragsprachCd(std::string &&pVertragsprachCd) noexcept
{
    vertragsprachCd_ = std::make_shared<std::string>(std::move(pVertragsprachCd));
    dirtyFlag_[54] = true;
}
void Kunde::setVertragsprachCdToNull() noexcept
{
    vertragsprachCd_.reset();
    dirtyFlag_[54] = true;
}

const std::string &Kunde::getValueOfVermoegenskategorieIhagCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(vermoegenskategorieIhagCd_)
        return *vermoegenskategorieIhagCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getVermoegenskategorieIhagCd() const noexcept
{
    return vermoegenskategorieIhagCd_;
}
void Kunde::setVermoegenskategorieIhagCd(const std::string &pVermoegenskategorieIhagCd) noexcept
{
    vermoegenskategorieIhagCd_ = std::make_shared<std::string>(pVermoegenskategorieIhagCd);
    dirtyFlag_[55] = true;
}
void Kunde::setVermoegenskategorieIhagCd(std::string &&pVermoegenskategorieIhagCd) noexcept
{
    vermoegenskategorieIhagCd_ = std::make_shared<std::string>(std::move(pVermoegenskategorieIhagCd));
    dirtyFlag_[55] = true;
}
void Kunde::setVermoegenskategorieIhagCdToNull() noexcept
{
    vermoegenskategorieIhagCd_.reset();
    dirtyFlag_[55] = true;
}

const std::string &Kunde::getValueOfApsysIntishs() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysIntishs_)
        return *apsysIntishs_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysIntishs() const noexcept
{
    return apsysIntishs_;
}
void Kunde::setApsysIntishs(const std::string &pApsysIntishs) noexcept
{
    apsysIntishs_ = std::make_shared<std::string>(pApsysIntishs);
    dirtyFlag_[56] = true;
}
void Kunde::setApsysIntishs(std::string &&pApsysIntishs) noexcept
{
    apsysIntishs_ = std::make_shared<std::string>(std::move(pApsysIntishs));
    dirtyFlag_[56] = true;
}
void Kunde::setApsysIntishsToNull() noexcept
{
    apsysIntishs_.reset();
    dirtyFlag_[56] = true;
}

const std::string &Kunde::getValueOfApsysIntilgs() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysIntilgs_)
        return *apsysIntilgs_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysIntilgs() const noexcept
{
    return apsysIntilgs_;
}
void Kunde::setApsysIntilgs(const std::string &pApsysIntilgs) noexcept
{
    apsysIntilgs_ = std::make_shared<std::string>(pApsysIntilgs);
    dirtyFlag_[57] = true;
}
void Kunde::setApsysIntilgs(std::string &&pApsysIntilgs) noexcept
{
    apsysIntilgs_ = std::make_shared<std::string>(std::move(pApsysIntilgs));
    dirtyFlag_[57] = true;
}
void Kunde::setApsysIntilgsToNull() noexcept
{
    apsysIntilgs_.reset();
    dirtyFlag_[57] = true;
}

const double &Kunde::getValueOfGesamtvermoegenCd() const noexcept
{
    const static double defaultValue = double();
    if(gesamtvermoegenCd_)
        return *gesamtvermoegenCd_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getGesamtvermoegenCd() const noexcept
{
    return gesamtvermoegenCd_;
}
void Kunde::setGesamtvermoegenCd(const double &pGesamtvermoegenCd) noexcept
{
    gesamtvermoegenCd_ = std::make_shared<double>(pGesamtvermoegenCd);
    dirtyFlag_[58] = true;
}
void Kunde::setGesamtvermoegenCdToNull() noexcept
{
    gesamtvermoegenCd_.reset();
    dirtyFlag_[58] = true;
}

const std::string &Kunde::getValueOfComplianceOkCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(complianceOkCd_)
        return *complianceOkCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getComplianceOkCd() const noexcept
{
    return complianceOkCd_;
}
void Kunde::setComplianceOkCd(const std::string &pComplianceOkCd) noexcept
{
    complianceOkCd_ = std::make_shared<std::string>(pComplianceOkCd);
    dirtyFlag_[59] = true;
}
void Kunde::setComplianceOkCd(std::string &&pComplianceOkCd) noexcept
{
    complianceOkCd_ = std::make_shared<std::string>(std::move(pComplianceOkCd));
    dirtyFlag_[59] = true;
}
void Kunde::setComplianceOkCdToNull() noexcept
{
    complianceOkCd_.reset();
    dirtyFlag_[59] = true;
}

const std::string &Kunde::getValueOfComplianceOkBemerkung() const noexcept
{
    const static std::string defaultValue = std::string();
    if(complianceOkBemerkung_)
        return *complianceOkBemerkung_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getComplianceOkBemerkung() const noexcept
{
    return complianceOkBemerkung_;
}
void Kunde::setComplianceOkBemerkung(const std::string &pComplianceOkBemerkung) noexcept
{
    complianceOkBemerkung_ = std::make_shared<std::string>(pComplianceOkBemerkung);
    dirtyFlag_[60] = true;
}
void Kunde::setComplianceOkBemerkung(std::string &&pComplianceOkBemerkung) noexcept
{
    complianceOkBemerkung_ = std::make_shared<std::string>(std::move(pComplianceOkBemerkung));
    dirtyFlag_[60] = true;
}
void Kunde::setComplianceOkBemerkungToNull() noexcept
{
    complianceOkBemerkung_.reset();
    dirtyFlag_[60] = true;
}

const ::trantor::Date &Kunde::getValueOfComplianceOkDatum() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(complianceOkDatum_)
        return *complianceOkDatum_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getComplianceOkDatum() const noexcept
{
    return complianceOkDatum_;
}
void Kunde::setComplianceOkDatum(const ::trantor::Date &pComplianceOkDatum) noexcept
{
    complianceOkDatum_ = std::make_shared<::trantor::Date>(pComplianceOkDatum);
    dirtyFlag_[61] = true;
}
void Kunde::setComplianceOkDatumToNull() noexcept
{
    complianceOkDatum_.reset();
    dirtyFlag_[61] = true;
}

const std::string &Kunde::getValueOfComplianceOkUserid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(complianceOkUserid_)
        return *complianceOkUserid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getComplianceOkUserid() const noexcept
{
    return complianceOkUserid_;
}
void Kunde::setComplianceOkUserid(const std::string &pComplianceOkUserid) noexcept
{
    complianceOkUserid_ = std::make_shared<std::string>(pComplianceOkUserid);
    dirtyFlag_[62] = true;
}
void Kunde::setComplianceOkUserid(std::string &&pComplianceOkUserid) noexcept
{
    complianceOkUserid_ = std::make_shared<std::string>(std::move(pComplianceOkUserid));
    dirtyFlag_[62] = true;
}
void Kunde::setComplianceOkUseridToNull() noexcept
{
    complianceOkUserid_.reset();
    dirtyFlag_[62] = true;
}

const double &Kunde::getValueOfEinVermoegen() const noexcept
{
    const static double defaultValue = double();
    if(einVermoegen_)
        return *einVermoegen_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getEinVermoegen() const noexcept
{
    return einVermoegen_;
}
void Kunde::setEinVermoegen(const double &pEinVermoegen) noexcept
{
    einVermoegen_ = std::make_shared<double>(pEinVermoegen);
    dirtyFlag_[63] = true;
}
void Kunde::setEinVermoegenToNull() noexcept
{
    einVermoegen_.reset();
    dirtyFlag_[63] = true;
}

const double &Kunde::getValueOfSegmentierungCd() const noexcept
{
    const static double defaultValue = double();
    if(segmentierungCd_)
        return *segmentierungCd_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getSegmentierungCd() const noexcept
{
    return segmentierungCd_;
}
void Kunde::setSegmentierungCd(const double &pSegmentierungCd) noexcept
{
    segmentierungCd_ = std::make_shared<double>(pSegmentierungCd);
    dirtyFlag_[64] = true;
}
void Kunde::setSegmentierungCdToNull() noexcept
{
    segmentierungCd_.reset();
    dirtyFlag_[64] = true;
}

const double &Kunde::getValueOfAktid() const noexcept
{
    const static double defaultValue = double();
    if(aktid_)
        return *aktid_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getAktid() const noexcept
{
    return aktid_;
}
void Kunde::setAktid(const double &pAktid) noexcept
{
    aktid_ = std::make_shared<double>(pAktid);
    dirtyFlag_[65] = true;
}
void Kunde::setAktidToNull() noexcept
{
    aktid_.reset();
    dirtyFlag_[65] = true;
}

const double &Kunde::getValueOfValidid() const noexcept
{
    const static double defaultValue = double();
    if(validid_)
        return *validid_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getValidid() const noexcept
{
    return validid_;
}
void Kunde::setValidid(const double &pValidid) noexcept
{
    validid_ = std::make_shared<double>(pValidid);
    dirtyFlag_[66] = true;
}
void Kunde::setValididToNull() noexcept
{
    validid_.reset();
    dirtyFlag_[66] = true;
}

const std::string &Kunde::getValueOfValidCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(validCd_)
        return *validCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getValidCd() const noexcept
{
    return validCd_;
}
void Kunde::setValidCd(const std::string &pValidCd) noexcept
{
    validCd_ = std::make_shared<std::string>(pValidCd);
    dirtyFlag_[67] = true;
}
void Kunde::setValidCd(std::string &&pValidCd) noexcept
{
    validCd_ = std::make_shared<std::string>(std::move(pValidCd));
    dirtyFlag_[67] = true;
}
void Kunde::setValidCdToNull() noexcept
{
    validCd_.reset();
    dirtyFlag_[67] = true;
}

const std::string &Kunde::getValueOfValiduser() const noexcept
{
    const static std::string defaultValue = std::string();
    if(validuser_)
        return *validuser_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getValiduser() const noexcept
{
    return validuser_;
}
void Kunde::setValiduser(const std::string &pValiduser) noexcept
{
    validuser_ = std::make_shared<std::string>(pValiduser);
    dirtyFlag_[68] = true;
}
void Kunde::setValiduser(std::string &&pValiduser) noexcept
{
    validuser_ = std::make_shared<std::string>(std::move(pValiduser));
    dirtyFlag_[68] = true;
}
void Kunde::setValiduserToNull() noexcept
{
    validuser_.reset();
    dirtyFlag_[68] = true;
}

const std::string &Kunde::getValueOfEncSalt() const noexcept
{
    const static std::string defaultValue = std::string();
    if(encSalt_)
        return *encSalt_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getEncSalt() const noexcept
{
    return encSalt_;
}
void Kunde::setEncSalt(const std::string &pEncSalt) noexcept
{
    encSalt_ = std::make_shared<std::string>(pEncSalt);
    dirtyFlag_[69] = true;
}
void Kunde::setEncSalt(std::string &&pEncSalt) noexcept
{
    encSalt_ = std::make_shared<std::string>(std::move(pEncSalt));
    dirtyFlag_[69] = true;
}
void Kunde::setEncSaltToNull() noexcept
{
    encSalt_.reset();
    dirtyFlag_[69] = true;
}

const std::string &Kunde::getValueOfBezeichnungEnc() const noexcept
{
    const static std::string defaultValue = std::string();
    if(bezeichnungEnc_)
        return *bezeichnungEnc_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getBezeichnungEnc() const noexcept
{
    return bezeichnungEnc_;
}
void Kunde::setBezeichnungEnc(const std::string &pBezeichnungEnc) noexcept
{
    bezeichnungEnc_ = std::make_shared<std::string>(pBezeichnungEnc);
    dirtyFlag_[70] = true;
}
void Kunde::setBezeichnungEnc(std::string &&pBezeichnungEnc) noexcept
{
    bezeichnungEnc_ = std::make_shared<std::string>(std::move(pBezeichnungEnc));
    dirtyFlag_[70] = true;
}
void Kunde::setBezeichnungEncToNull() noexcept
{
    bezeichnungEnc_.reset();
    dirtyFlag_[70] = true;
}

const std::string &Kunde::getValueOfApsysCdmotifparts() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysCdmotifparts_)
        return *apsysCdmotifparts_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysCdmotifparts() const noexcept
{
    return apsysCdmotifparts_;
}
void Kunde::setApsysCdmotifparts(const std::string &pApsysCdmotifparts) noexcept
{
    apsysCdmotifparts_ = std::make_shared<std::string>(pApsysCdmotifparts);
    dirtyFlag_[71] = true;
}
void Kunde::setApsysCdmotifparts(std::string &&pApsysCdmotifparts) noexcept
{
    apsysCdmotifparts_ = std::make_shared<std::string>(std::move(pApsysCdmotifparts));
    dirtyFlag_[71] = true;
}
void Kunde::setApsysCdmotifpartsToNull() noexcept
{
    apsysCdmotifparts_.reset();
    dirtyFlag_[71] = true;
}

const std::string &Kunde::getValueOfApsysCdindus0s() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysCdindus0s_)
        return *apsysCdindus0s_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysCdindus0s() const noexcept
{
    return apsysCdindus0s_;
}
void Kunde::setApsysCdindus0s(const std::string &pApsysCdindus0s) noexcept
{
    apsysCdindus0s_ = std::make_shared<std::string>(pApsysCdindus0s);
    dirtyFlag_[72] = true;
}
void Kunde::setApsysCdindus0s(std::string &&pApsysCdindus0s) noexcept
{
    apsysCdindus0s_ = std::make_shared<std::string>(std::move(pApsysCdindus0s));
    dirtyFlag_[72] = true;
}
void Kunde::setApsysCdindus0sToNull() noexcept
{
    apsysCdindus0s_.reset();
    dirtyFlag_[72] = true;
}

const std::string &Kunde::getValueOfApsysFlagpreavisexec() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysFlagpreavisexec_)
        return *apsysFlagpreavisexec_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysFlagpreavisexec() const noexcept
{
    return apsysFlagpreavisexec_;
}
void Kunde::setApsysFlagpreavisexec(const std::string &pApsysFlagpreavisexec) noexcept
{
    apsysFlagpreavisexec_ = std::make_shared<std::string>(pApsysFlagpreavisexec);
    dirtyFlag_[73] = true;
}
void Kunde::setApsysFlagpreavisexec(std::string &&pApsysFlagpreavisexec) noexcept
{
    apsysFlagpreavisexec_ = std::make_shared<std::string>(std::move(pApsysFlagpreavisexec));
    dirtyFlag_[73] = true;
}
void Kunde::setApsysFlagpreavisexecToNull() noexcept
{
    apsysFlagpreavisexec_.reset();
    dirtyFlag_[73] = true;
}

const std::string &Kunde::getValueOfApsysCdaviobispecc() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysCdaviobispecc_)
        return *apsysCdaviobispecc_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysCdaviobispecc() const noexcept
{
    return apsysCdaviobispecc_;
}
void Kunde::setApsysCdaviobispecc(const std::string &pApsysCdaviobispecc) noexcept
{
    apsysCdaviobispecc_ = std::make_shared<std::string>(pApsysCdaviobispecc);
    dirtyFlag_[74] = true;
}
void Kunde::setApsysCdaviobispecc(std::string &&pApsysCdaviobispecc) noexcept
{
    apsysCdaviobispecc_ = std::make_shared<std::string>(std::move(pApsysCdaviobispecc));
    dirtyFlag_[74] = true;
}
void Kunde::setApsysCdaviobispeccToNull() noexcept
{
    apsysCdaviobispecc_.reset();
    dirtyFlag_[74] = true;
}

const std::string &Kunde::getValueOfApsysFlaghisperc() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysFlaghisperc_)
        return *apsysFlaghisperc_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysFlaghisperc() const noexcept
{
    return apsysFlaghisperc_;
}
void Kunde::setApsysFlaghisperc(const std::string &pApsysFlaghisperc) noexcept
{
    apsysFlaghisperc_ = std::make_shared<std::string>(pApsysFlaghisperc);
    dirtyFlag_[75] = true;
}
void Kunde::setApsysFlaghisperc(std::string &&pApsysFlaghisperc) noexcept
{
    apsysFlaghisperc_ = std::make_shared<std::string>(std::move(pApsysFlaghisperc));
    dirtyFlag_[75] = true;
}
void Kunde::setApsysFlaghispercToNull() noexcept
{
    apsysFlaghisperc_.reset();
    dirtyFlag_[75] = true;
}

const std::string &Kunde::getValueOfApsysRepamanuc() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysRepamanuc_)
        return *apsysRepamanuc_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysRepamanuc() const noexcept
{
    return apsysRepamanuc_;
}
void Kunde::setApsysRepamanuc(const std::string &pApsysRepamanuc) noexcept
{
    apsysRepamanuc_ = std::make_shared<std::string>(pApsysRepamanuc);
    dirtyFlag_[76] = true;
}
void Kunde::setApsysRepamanuc(std::string &&pApsysRepamanuc) noexcept
{
    apsysRepamanuc_ = std::make_shared<std::string>(std::move(pApsysRepamanuc));
    dirtyFlag_[76] = true;
}
void Kunde::setApsysRepamanucToNull() noexcept
{
    apsysRepamanuc_.reset();
    dirtyFlag_[76] = true;
}

const std::string &Kunde::getValueOfApsysPerdevcalc() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysPerdevcalc_)
        return *apsysPerdevcalc_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysPerdevcalc() const noexcept
{
    return apsysPerdevcalc_;
}
void Kunde::setApsysPerdevcalc(const std::string &pApsysPerdevcalc) noexcept
{
    apsysPerdevcalc_ = std::make_shared<std::string>(pApsysPerdevcalc);
    dirtyFlag_[77] = true;
}
void Kunde::setApsysPerdevcalc(std::string &&pApsysPerdevcalc) noexcept
{
    apsysPerdevcalc_ = std::make_shared<std::string>(std::move(pApsysPerdevcalc));
    dirtyFlag_[77] = true;
}
void Kunde::setApsysPerdevcalcToNull() noexcept
{
    apsysPerdevcalc_.reset();
    dirtyFlag_[77] = true;
}

const std::string &Kunde::getValueOfApsysFlaguktaxc() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysFlaguktaxc_)
        return *apsysFlaguktaxc_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysFlaguktaxc() const noexcept
{
    return apsysFlaguktaxc_;
}
void Kunde::setApsysFlaguktaxc(const std::string &pApsysFlaguktaxc) noexcept
{
    apsysFlaguktaxc_ = std::make_shared<std::string>(pApsysFlaguktaxc);
    dirtyFlag_[78] = true;
}
void Kunde::setApsysFlaguktaxc(std::string &&pApsysFlaguktaxc) noexcept
{
    apsysFlaguktaxc_ = std::make_shared<std::string>(std::move(pApsysFlaguktaxc));
    dirtyFlag_[78] = true;
}
void Kunde::setApsysFlaguktaxcToNull() noexcept
{
    apsysFlaguktaxc_.reset();
    dirtyFlag_[78] = true;
}

const std::string &Kunde::getValueOfApsysCdnogas() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysCdnogas_)
        return *apsysCdnogas_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysCdnogas() const noexcept
{
    return apsysCdnogas_;
}
void Kunde::setApsysCdnogas(const std::string &pApsysCdnogas) noexcept
{
    apsysCdnogas_ = std::make_shared<std::string>(pApsysCdnogas);
    dirtyFlag_[79] = true;
}
void Kunde::setApsysCdnogas(std::string &&pApsysCdnogas) noexcept
{
    apsysCdnogas_ = std::make_shared<std::string>(std::move(pApsysCdnogas));
    dirtyFlag_[79] = true;
}
void Kunde::setApsysCdnogasToNull() noexcept
{
    apsysCdnogas_.reset();
    dirtyFlag_[79] = true;
}

const std::string &Kunde::getValueOfApsysStatfiscc() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysStatfiscc_)
        return *apsysStatfiscc_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysStatfiscc() const noexcept
{
    return apsysStatfiscc_;
}
void Kunde::setApsysStatfiscc(const std::string &pApsysStatfiscc) noexcept
{
    apsysStatfiscc_ = std::make_shared<std::string>(pApsysStatfiscc);
    dirtyFlag_[80] = true;
}
void Kunde::setApsysStatfiscc(std::string &&pApsysStatfiscc) noexcept
{
    apsysStatfiscc_ = std::make_shared<std::string>(std::move(pApsysStatfiscc));
    dirtyFlag_[80] = true;
}
void Kunde::setApsysStatfisccToNull() noexcept
{
    apsysStatfiscc_.reset();
    dirtyFlag_[80] = true;
}

const std::string &Kunde::getValueOfApsysFlagfwti() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysFlagfwti_)
        return *apsysFlagfwti_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysFlagfwti() const noexcept
{
    return apsysFlagfwti_;
}
void Kunde::setApsysFlagfwti(const std::string &pApsysFlagfwti) noexcept
{
    apsysFlagfwti_ = std::make_shared<std::string>(pApsysFlagfwti);
    dirtyFlag_[81] = true;
}
void Kunde::setApsysFlagfwti(std::string &&pApsysFlagfwti) noexcept
{
    apsysFlagfwti_ = std::make_shared<std::string>(std::move(pApsysFlagfwti));
    dirtyFlag_[81] = true;
}
void Kunde::setApsysFlagfwtiToNull() noexcept
{
    apsysFlagfwti_.reset();
    dirtyFlag_[81] = true;
}

const std::string &Kunde::getValueOfApsysFlagfwtuknrsdi() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysFlagfwtuknrsdi_)
        return *apsysFlagfwtuknrsdi_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysFlagfwtuknrsdi() const noexcept
{
    return apsysFlagfwtuknrsdi_;
}
void Kunde::setApsysFlagfwtuknrsdi(const std::string &pApsysFlagfwtuknrsdi) noexcept
{
    apsysFlagfwtuknrsdi_ = std::make_shared<std::string>(pApsysFlagfwtuknrsdi);
    dirtyFlag_[82] = true;
}
void Kunde::setApsysFlagfwtuknrsdi(std::string &&pApsysFlagfwtuknrsdi) noexcept
{
    apsysFlagfwtuknrsdi_ = std::make_shared<std::string>(std::move(pApsysFlagfwtuknrsdi));
    dirtyFlag_[82] = true;
}
void Kunde::setApsysFlagfwtuknrsdiToNull() noexcept
{
    apsysFlagfwtuknrsdi_.reset();
    dirtyFlag_[82] = true;
}

const std::string &Kunde::getValueOfApsysFlagfwttaxspegei() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysFlagfwttaxspegei_)
        return *apsysFlagfwttaxspegei_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysFlagfwttaxspegei() const noexcept
{
    return apsysFlagfwttaxspegei_;
}
void Kunde::setApsysFlagfwttaxspegei(const std::string &pApsysFlagfwttaxspegei) noexcept
{
    apsysFlagfwttaxspegei_ = std::make_shared<std::string>(pApsysFlagfwttaxspegei);
    dirtyFlag_[83] = true;
}
void Kunde::setApsysFlagfwttaxspegei(std::string &&pApsysFlagfwttaxspegei) noexcept
{
    apsysFlagfwttaxspegei_ = std::make_shared<std::string>(std::move(pApsysFlagfwttaxspegei));
    dirtyFlag_[83] = true;
}
void Kunde::setApsysFlagfwttaxspegeiToNull() noexcept
{
    apsysFlagfwttaxspegei_.reset();
    dirtyFlag_[83] = true;
}

const std::string &Kunde::getValueOfApsysCdfwtoptregulfiscancc() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysCdfwtoptregulfiscancc_)
        return *apsysCdfwtoptregulfiscancc_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysCdfwtoptregulfiscancc() const noexcept
{
    return apsysCdfwtoptregulfiscancc_;
}
void Kunde::setApsysCdfwtoptregulfiscancc(const std::string &pApsysCdfwtoptregulfiscancc) noexcept
{
    apsysCdfwtoptregulfiscancc_ = std::make_shared<std::string>(pApsysCdfwtoptregulfiscancc);
    dirtyFlag_[84] = true;
}
void Kunde::setApsysCdfwtoptregulfiscancc(std::string &&pApsysCdfwtoptregulfiscancc) noexcept
{
    apsysCdfwtoptregulfiscancc_ = std::make_shared<std::string>(std::move(pApsysCdfwtoptregulfiscancc));
    dirtyFlag_[84] = true;
}
void Kunde::setApsysCdfwtoptregulfiscanccToNull() noexcept
{
    apsysCdfwtoptregulfiscancc_.reset();
    dirtyFlag_[84] = true;
}

const std::string &Kunde::getValueOfApsysCdfwtstatregulfiscancc() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysCdfwtstatregulfiscancc_)
        return *apsysCdfwtstatregulfiscancc_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysCdfwtstatregulfiscancc() const noexcept
{
    return apsysCdfwtstatregulfiscancc_;
}
void Kunde::setApsysCdfwtstatregulfiscancc(const std::string &pApsysCdfwtstatregulfiscancc) noexcept
{
    apsysCdfwtstatregulfiscancc_ = std::make_shared<std::string>(pApsysCdfwtstatregulfiscancc);
    dirtyFlag_[85] = true;
}
void Kunde::setApsysCdfwtstatregulfiscancc(std::string &&pApsysCdfwtstatregulfiscancc) noexcept
{
    apsysCdfwtstatregulfiscancc_ = std::make_shared<std::string>(std::move(pApsysCdfwtstatregulfiscancc));
    dirtyFlag_[85] = true;
}
void Kunde::setApsysCdfwtstatregulfiscanccToNull() noexcept
{
    apsysCdfwtstatregulfiscancc_.reset();
    dirtyFlag_[85] = true;
}

const std::string &Kunde::getValueOfApsysCdfwtoptregulfiscfutc() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysCdfwtoptregulfiscfutc_)
        return *apsysCdfwtoptregulfiscfutc_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysCdfwtoptregulfiscfutc() const noexcept
{
    return apsysCdfwtoptregulfiscfutc_;
}
void Kunde::setApsysCdfwtoptregulfiscfutc(const std::string &pApsysCdfwtoptregulfiscfutc) noexcept
{
    apsysCdfwtoptregulfiscfutc_ = std::make_shared<std::string>(pApsysCdfwtoptregulfiscfutc);
    dirtyFlag_[86] = true;
}
void Kunde::setApsysCdfwtoptregulfiscfutc(std::string &&pApsysCdfwtoptregulfiscfutc) noexcept
{
    apsysCdfwtoptregulfiscfutc_ = std::make_shared<std::string>(std::move(pApsysCdfwtoptregulfiscfutc));
    dirtyFlag_[86] = true;
}
void Kunde::setApsysCdfwtoptregulfiscfutcToNull() noexcept
{
    apsysCdfwtoptregulfiscfutc_.reset();
    dirtyFlag_[86] = true;
}

const std::string &Kunde::getValueOfSteuerlandAbgstCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(steuerlandAbgstCd_)
        return *steuerlandAbgstCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getSteuerlandAbgstCd() const noexcept
{
    return steuerlandAbgstCd_;
}
void Kunde::setSteuerlandAbgstCd(const std::string &pSteuerlandAbgstCd) noexcept
{
    steuerlandAbgstCd_ = std::make_shared<std::string>(pSteuerlandAbgstCd);
    dirtyFlag_[87] = true;
}
void Kunde::setSteuerlandAbgstCd(std::string &&pSteuerlandAbgstCd) noexcept
{
    steuerlandAbgstCd_ = std::make_shared<std::string>(std::move(pSteuerlandAbgstCd));
    dirtyFlag_[87] = true;
}
void Kunde::setSteuerlandAbgstCdToNull() noexcept
{
    steuerlandAbgstCd_.reset();
    dirtyFlag_[87] = true;
}

const std::string &Kunde::getValueOfApsysCdnatures() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysCdnatures_)
        return *apsysCdnatures_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysCdnatures() const noexcept
{
    return apsysCdnatures_;
}
void Kunde::setApsysCdnatures(const std::string &pApsysCdnatures) noexcept
{
    apsysCdnatures_ = std::make_shared<std::string>(pApsysCdnatures);
    dirtyFlag_[88] = true;
}
void Kunde::setApsysCdnatures(std::string &&pApsysCdnatures) noexcept
{
    apsysCdnatures_ = std::make_shared<std::string>(std::move(pApsysCdnatures));
    dirtyFlag_[88] = true;
}
void Kunde::setApsysCdnaturesToNull() noexcept
{
    apsysCdnatures_.reset();
    dirtyFlag_[88] = true;
}

const std::string &Kunde::getValueOfApsysShnas() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysShnas_)
        return *apsysShnas_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysShnas() const noexcept
{
    return apsysShnas_;
}
void Kunde::setApsysShnas(const std::string &pApsysShnas) noexcept
{
    apsysShnas_ = std::make_shared<std::string>(pApsysShnas);
    dirtyFlag_[89] = true;
}
void Kunde::setApsysShnas(std::string &&pApsysShnas) noexcept
{
    apsysShnas_ = std::make_shared<std::string>(std::move(pApsysShnas));
    dirtyFlag_[89] = true;
}
void Kunde::setApsysShnasToNull() noexcept
{
    apsysShnas_.reset();
    dirtyFlag_[89] = true;
}

const std::string &Kunde::getValueOfApsysCdpyhqdomis() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysCdpyhqdomis_)
        return *apsysCdpyhqdomis_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysCdpyhqdomis() const noexcept
{
    return apsysCdpyhqdomis_;
}
void Kunde::setApsysCdpyhqdomis(const std::string &pApsysCdpyhqdomis) noexcept
{
    apsysCdpyhqdomis_ = std::make_shared<std::string>(pApsysCdpyhqdomis);
    dirtyFlag_[90] = true;
}
void Kunde::setApsysCdpyhqdomis(std::string &&pApsysCdpyhqdomis) noexcept
{
    apsysCdpyhqdomis_ = std::make_shared<std::string>(std::move(pApsysCdpyhqdomis));
    dirtyFlag_[90] = true;
}
void Kunde::setApsysCdpyhqdomisToNull() noexcept
{
    apsysCdpyhqdomis_.reset();
    dirtyFlag_[90] = true;
}

const double &Kunde::getValueOfApsysCdpermi() const noexcept
{
    const static double defaultValue = double();
    if(apsysCdpermi_)
        return *apsysCdpermi_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getApsysCdpermi() const noexcept
{
    return apsysCdpermi_;
}
void Kunde::setApsysCdpermi(const double &pApsysCdpermi) noexcept
{
    apsysCdpermi_ = std::make_shared<double>(pApsysCdpermi);
    dirtyFlag_[91] = true;
}
void Kunde::setApsysCdpermiToNull() noexcept
{
    apsysCdpermi_.reset();
    dirtyFlag_[91] = true;
}

const std::string &Kunde::getValueOfApsysIdrcis() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysIdrcis_)
        return *apsysIdrcis_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysIdrcis() const noexcept
{
    return apsysIdrcis_;
}
void Kunde::setApsysIdrcis(const std::string &pApsysIdrcis) noexcept
{
    apsysIdrcis_ = std::make_shared<std::string>(pApsysIdrcis);
    dirtyFlag_[92] = true;
}
void Kunde::setApsysIdrcis(std::string &&pApsysIdrcis) noexcept
{
    apsysIdrcis_ = std::make_shared<std::string>(std::move(pApsysIdrcis));
    dirtyFlag_[92] = true;
}
void Kunde::setApsysIdrcisToNull() noexcept
{
    apsysIdrcis_.reset();
    dirtyFlag_[92] = true;
}

const std::string &Kunde::getValueOfApsysFlagisttc() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysFlagisttc_)
        return *apsysFlagisttc_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysFlagisttc() const noexcept
{
    return apsysFlagisttc_;
}
void Kunde::setApsysFlagisttc(const std::string &pApsysFlagisttc) noexcept
{
    apsysFlagisttc_ = std::make_shared<std::string>(pApsysFlagisttc);
    dirtyFlag_[93] = true;
}
void Kunde::setApsysFlagisttc(std::string &&pApsysFlagisttc) noexcept
{
    apsysFlagisttc_ = std::make_shared<std::string>(std::move(pApsysFlagisttc));
    dirtyFlag_[93] = true;
}
void Kunde::setApsysFlagisttcToNull() noexcept
{
    apsysFlagisttc_.reset();
    dirtyFlag_[93] = true;
}

const std::string &Kunde::getValueOfApsysDevevals() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysDevevals_)
        return *apsysDevevals_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysDevevals() const noexcept
{
    return apsysDevevals_;
}
void Kunde::setApsysDevevals(const std::string &pApsysDevevals) noexcept
{
    apsysDevevals_ = std::make_shared<std::string>(pApsysDevevals);
    dirtyFlag_[94] = true;
}
void Kunde::setApsysDevevals(std::string &&pApsysDevevals) noexcept
{
    apsysDevevals_ = std::make_shared<std::string>(std::move(pApsysDevevals));
    dirtyFlag_[94] = true;
}
void Kunde::setApsysDevevalsToNull() noexcept
{
    apsysDevevals_.reset();
    dirtyFlag_[94] = true;
}

const std::string &Kunde::getValueOfApsysIdstrucs() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysIdstrucs_)
        return *apsysIdstrucs_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysIdstrucs() const noexcept
{
    return apsysIdstrucs_;
}
void Kunde::setApsysIdstrucs(const std::string &pApsysIdstrucs) noexcept
{
    apsysIdstrucs_ = std::make_shared<std::string>(pApsysIdstrucs);
    dirtyFlag_[95] = true;
}
void Kunde::setApsysIdstrucs(std::string &&pApsysIdstrucs) noexcept
{
    apsysIdstrucs_ = std::make_shared<std::string>(std::move(pApsysIdstrucs));
    dirtyFlag_[95] = true;
}
void Kunde::setApsysIdstrucsToNull() noexcept
{
    apsysIdstrucs_.reset();
    dirtyFlag_[95] = true;
}

const std::string &Kunde::getValueOfApsysSuiviagts() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysSuiviagts_)
        return *apsysSuiviagts_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysSuiviagts() const noexcept
{
    return apsysSuiviagts_;
}
void Kunde::setApsysSuiviagts(const std::string &pApsysSuiviagts) noexcept
{
    apsysSuiviagts_ = std::make_shared<std::string>(pApsysSuiviagts);
    dirtyFlag_[96] = true;
}
void Kunde::setApsysSuiviagts(std::string &&pApsysSuiviagts) noexcept
{
    apsysSuiviagts_ = std::make_shared<std::string>(std::move(pApsysSuiviagts));
    dirtyFlag_[96] = true;
}
void Kunde::setApsysSuiviagtsToNull() noexcept
{
    apsysSuiviagts_.reset();
    dirtyFlag_[96] = true;
}

const std::string &Kunde::getValueOfApsysCdinduscssfs() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysCdinduscssfs_)
        return *apsysCdinduscssfs_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysCdinduscssfs() const noexcept
{
    return apsysCdinduscssfs_;
}
void Kunde::setApsysCdinduscssfs(const std::string &pApsysCdinduscssfs) noexcept
{
    apsysCdinduscssfs_ = std::make_shared<std::string>(pApsysCdinduscssfs);
    dirtyFlag_[97] = true;
}
void Kunde::setApsysCdinduscssfs(std::string &&pApsysCdinduscssfs) noexcept
{
    apsysCdinduscssfs_ = std::make_shared<std::string>(std::move(pApsysCdinduscssfs));
    dirtyFlag_[97] = true;
}
void Kunde::setApsysCdinduscssfsToNull() noexcept
{
    apsysCdinduscssfs_.reset();
    dirtyFlag_[97] = true;
}

const std::string &Kunde::getValueOfApsysCdindusbluxs() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysCdindusbluxs_)
        return *apsysCdindusbluxs_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysCdindusbluxs() const noexcept
{
    return apsysCdindusbluxs_;
}
void Kunde::setApsysCdindusbluxs(const std::string &pApsysCdindusbluxs) noexcept
{
    apsysCdindusbluxs_ = std::make_shared<std::string>(pApsysCdindusbluxs);
    dirtyFlag_[98] = true;
}
void Kunde::setApsysCdindusbluxs(std::string &&pApsysCdindusbluxs) noexcept
{
    apsysCdindusbluxs_ = std::make_shared<std::string>(std::move(pApsysCdindusbluxs));
    dirtyFlag_[98] = true;
}
void Kunde::setApsysCdindusbluxsToNull() noexcept
{
    apsysCdindusbluxs_.reset();
    dirtyFlag_[98] = true;
}

const std::string &Kunde::getValueOfApsysCdindussbuba() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysCdindussbuba_)
        return *apsysCdindussbuba_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysCdindussbuba() const noexcept
{
    return apsysCdindussbuba_;
}
void Kunde::setApsysCdindussbuba(const std::string &pApsysCdindussbuba) noexcept
{
    apsysCdindussbuba_ = std::make_shared<std::string>(pApsysCdindussbuba);
    dirtyFlag_[99] = true;
}
void Kunde::setApsysCdindussbuba(std::string &&pApsysCdindussbuba) noexcept
{
    apsysCdindussbuba_ = std::make_shared<std::string>(std::move(pApsysCdindussbuba));
    dirtyFlag_[99] = true;
}
void Kunde::setApsysCdindussbubaToNull() noexcept
{
    apsysCdindussbuba_.reset();
    dirtyFlag_[99] = true;
}

const std::string &Kunde::getValueOfApsysCdindussbns() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysCdindussbns_)
        return *apsysCdindussbns_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysCdindussbns() const noexcept
{
    return apsysCdindussbns_;
}
void Kunde::setApsysCdindussbns(const std::string &pApsysCdindussbns) noexcept
{
    apsysCdindussbns_ = std::make_shared<std::string>(pApsysCdindussbns);
    dirtyFlag_[100] = true;
}
void Kunde::setApsysCdindussbns(std::string &&pApsysCdindussbns) noexcept
{
    apsysCdindussbns_ = std::make_shared<std::string>(std::move(pApsysCdindussbns));
    dirtyFlag_[100] = true;
}
void Kunde::setApsysCdindussbnsToNull() noexcept
{
    apsysCdindussbns_.reset();
    dirtyFlag_[100] = true;
}

const std::string &Kunde::getValueOfApsysGrmtevals() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysGrmtevals_)
        return *apsysGrmtevals_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysGrmtevals() const noexcept
{
    return apsysGrmtevals_;
}
void Kunde::setApsysGrmtevals(const std::string &pApsysGrmtevals) noexcept
{
    apsysGrmtevals_ = std::make_shared<std::string>(pApsysGrmtevals);
    dirtyFlag_[101] = true;
}
void Kunde::setApsysGrmtevals(std::string &&pApsysGrmtevals) noexcept
{
    apsysGrmtevals_ = std::make_shared<std::string>(std::move(pApsysGrmtevals));
    dirtyFlag_[101] = true;
}
void Kunde::setApsysGrmtevalsToNull() noexcept
{
    apsysGrmtevals_.reset();
    dirtyFlag_[101] = true;
}

const std::string &Kunde::getValueOfApsysIdpocs() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysIdpocs_)
        return *apsysIdpocs_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysIdpocs() const noexcept
{
    return apsysIdpocs_;
}
void Kunde::setApsysIdpocs(const std::string &pApsysIdpocs) noexcept
{
    apsysIdpocs_ = std::make_shared<std::string>(pApsysIdpocs);
    dirtyFlag_[102] = true;
}
void Kunde::setApsysIdpocs(std::string &&pApsysIdpocs) noexcept
{
    apsysIdpocs_ = std::make_shared<std::string>(std::move(pApsysIdpocs));
    dirtyFlag_[102] = true;
}
void Kunde::setApsysIdpocsToNull() noexcept
{
    apsysIdpocs_.reset();
    dirtyFlag_[102] = true;
}

const std::string &Kunde::getValueOfApsysInfo() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysInfo_)
        return *apsysInfo_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysInfo() const noexcept
{
    return apsysInfo_;
}
void Kunde::setApsysInfo(const std::string &pApsysInfo) noexcept
{
    apsysInfo_ = std::make_shared<std::string>(pApsysInfo);
    dirtyFlag_[103] = true;
}
void Kunde::setApsysInfo(std::string &&pApsysInfo) noexcept
{
    apsysInfo_ = std::make_shared<std::string>(std::move(pApsysInfo));
    dirtyFlag_[103] = true;
}
void Kunde::setApsysInfoToNull() noexcept
{
    apsysInfo_.reset();
    dirtyFlag_[103] = true;
}

const std::string &Kunde::getValueOfApsysIdents() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysIdents_)
        return *apsysIdents_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysIdents() const noexcept
{
    return apsysIdents_;
}
void Kunde::setApsysIdents(const std::string &pApsysIdents) noexcept
{
    apsysIdents_ = std::make_shared<std::string>(pApsysIdents);
    dirtyFlag_[104] = true;
}
void Kunde::setApsysIdents(std::string &&pApsysIdents) noexcept
{
    apsysIdents_ = std::make_shared<std::string>(std::move(pApsysIdents));
    dirtyFlag_[104] = true;
}
void Kunde::setApsysIdentsToNull() noexcept
{
    apsysIdents_.reset();
    dirtyFlag_[104] = true;
}

const std::string &Kunde::getValueOfApsysStatusOpec() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysStatusOpec_)
        return *apsysStatusOpec_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysStatusOpec() const noexcept
{
    return apsysStatusOpec_;
}
void Kunde::setApsysStatusOpec(const std::string &pApsysStatusOpec) noexcept
{
    apsysStatusOpec_ = std::make_shared<std::string>(pApsysStatusOpec);
    dirtyFlag_[105] = true;
}
void Kunde::setApsysStatusOpec(std::string &&pApsysStatusOpec) noexcept
{
    apsysStatusOpec_ = std::make_shared<std::string>(std::move(pApsysStatusOpec));
    dirtyFlag_[105] = true;
}
void Kunde::setApsysStatusOpecToNull() noexcept
{
    apsysStatusOpec_.reset();
    dirtyFlag_[105] = true;
}

const double &Kunde::getValueOfApsysErri() const noexcept
{
    const static double defaultValue = double();
    if(apsysErri_)
        return *apsysErri_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getApsysErri() const noexcept
{
    return apsysErri_;
}
void Kunde::setApsysErri(const double &pApsysErri) noexcept
{
    apsysErri_ = std::make_shared<double>(pApsysErri);
    dirtyFlag_[106] = true;
}
void Kunde::setApsysErriToNull() noexcept
{
    apsysErri_.reset();
    dirtyFlag_[106] = true;
}

const std::string &Kunde::getValueOfNationalitaet2Cd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(nationalitaet2Cd_)
        return *nationalitaet2Cd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getNationalitaet2Cd() const noexcept
{
    return nationalitaet2Cd_;
}
void Kunde::setNationalitaet2Cd(const std::string &pNationalitaet2Cd) noexcept
{
    nationalitaet2Cd_ = std::make_shared<std::string>(pNationalitaet2Cd);
    dirtyFlag_[107] = true;
}
void Kunde::setNationalitaet2Cd(std::string &&pNationalitaet2Cd) noexcept
{
    nationalitaet2Cd_ = std::make_shared<std::string>(std::move(pNationalitaet2Cd));
    dirtyFlag_[107] = true;
}
void Kunde::setNationalitaet2CdToNull() noexcept
{
    nationalitaet2Cd_.reset();
    dirtyFlag_[107] = true;
}

const std::string &Kunde::getValueOfNationalitaet3Cd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(nationalitaet3Cd_)
        return *nationalitaet3Cd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getNationalitaet3Cd() const noexcept
{
    return nationalitaet3Cd_;
}
void Kunde::setNationalitaet3Cd(const std::string &pNationalitaet3Cd) noexcept
{
    nationalitaet3Cd_ = std::make_shared<std::string>(pNationalitaet3Cd);
    dirtyFlag_[108] = true;
}
void Kunde::setNationalitaet3Cd(std::string &&pNationalitaet3Cd) noexcept
{
    nationalitaet3Cd_ = std::make_shared<std::string>(std::move(pNationalitaet3Cd));
    dirtyFlag_[108] = true;
}
void Kunde::setNationalitaet3CdToNull() noexcept
{
    nationalitaet3Cd_.reset();
    dirtyFlag_[108] = true;
}

const std::string &Kunde::getValueOfVermoegensursprung2Cd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(vermoegensursprung2Cd_)
        return *vermoegensursprung2Cd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getVermoegensursprung2Cd() const noexcept
{
    return vermoegensursprung2Cd_;
}
void Kunde::setVermoegensursprung2Cd(const std::string &pVermoegensursprung2Cd) noexcept
{
    vermoegensursprung2Cd_ = std::make_shared<std::string>(pVermoegensursprung2Cd);
    dirtyFlag_[109] = true;
}
void Kunde::setVermoegensursprung2Cd(std::string &&pVermoegensursprung2Cd) noexcept
{
    vermoegensursprung2Cd_ = std::make_shared<std::string>(std::move(pVermoegensursprung2Cd));
    dirtyFlag_[109] = true;
}
void Kunde::setVermoegensursprung2CdToNull() noexcept
{
    vermoegensursprung2Cd_.reset();
    dirtyFlag_[109] = true;
}

const std::string &Kunde::getValueOfVermoegensursprung2() const noexcept
{
    const static std::string defaultValue = std::string();
    if(vermoegensursprung2_)
        return *vermoegensursprung2_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getVermoegensursprung2() const noexcept
{
    return vermoegensursprung2_;
}
void Kunde::setVermoegensursprung2(const std::string &pVermoegensursprung2) noexcept
{
    vermoegensursprung2_ = std::make_shared<std::string>(pVermoegensursprung2);
    dirtyFlag_[110] = true;
}
void Kunde::setVermoegensursprung2(std::string &&pVermoegensursprung2) noexcept
{
    vermoegensursprung2_ = std::make_shared<std::string>(std::move(pVermoegensursprung2));
    dirtyFlag_[110] = true;
}
void Kunde::setVermoegensursprung2ToNull() noexcept
{
    vermoegensursprung2_.reset();
    dirtyFlag_[110] = true;
}

const std::string &Kunde::getValueOfApprovalStep1Cd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(approvalStep1Cd_)
        return *approvalStep1Cd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApprovalStep1Cd() const noexcept
{
    return approvalStep1Cd_;
}
void Kunde::setApprovalStep1Cd(const std::string &pApprovalStep1Cd) noexcept
{
    approvalStep1Cd_ = std::make_shared<std::string>(pApprovalStep1Cd);
    dirtyFlag_[111] = true;
}
void Kunde::setApprovalStep1Cd(std::string &&pApprovalStep1Cd) noexcept
{
    approvalStep1Cd_ = std::make_shared<std::string>(std::move(pApprovalStep1Cd));
    dirtyFlag_[111] = true;
}
void Kunde::setApprovalStep1CdToNull() noexcept
{
    approvalStep1Cd_.reset();
    dirtyFlag_[111] = true;
}

const std::string &Kunde::getValueOfApprovalStep1User() const noexcept
{
    const static std::string defaultValue = std::string();
    if(approvalStep1User_)
        return *approvalStep1User_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApprovalStep1User() const noexcept
{
    return approvalStep1User_;
}
void Kunde::setApprovalStep1User(const std::string &pApprovalStep1User) noexcept
{
    approvalStep1User_ = std::make_shared<std::string>(pApprovalStep1User);
    dirtyFlag_[112] = true;
}
void Kunde::setApprovalStep1User(std::string &&pApprovalStep1User) noexcept
{
    approvalStep1User_ = std::make_shared<std::string>(std::move(pApprovalStep1User));
    dirtyFlag_[112] = true;
}
void Kunde::setApprovalStep1UserToNull() noexcept
{
    approvalStep1User_.reset();
    dirtyFlag_[112] = true;
}

const ::trantor::Date &Kunde::getValueOfApprovalStep1Date() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(approvalStep1Date_)
        return *approvalStep1Date_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getApprovalStep1Date() const noexcept
{
    return approvalStep1Date_;
}
void Kunde::setApprovalStep1Date(const ::trantor::Date &pApprovalStep1Date) noexcept
{
    approvalStep1Date_ = std::make_shared<::trantor::Date>(pApprovalStep1Date);
    dirtyFlag_[113] = true;
}
void Kunde::setApprovalStep1DateToNull() noexcept
{
    approvalStep1Date_.reset();
    dirtyFlag_[113] = true;
}

const std::string &Kunde::getValueOfApprovalStep2Cd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(approvalStep2Cd_)
        return *approvalStep2Cd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApprovalStep2Cd() const noexcept
{
    return approvalStep2Cd_;
}
void Kunde::setApprovalStep2Cd(const std::string &pApprovalStep2Cd) noexcept
{
    approvalStep2Cd_ = std::make_shared<std::string>(pApprovalStep2Cd);
    dirtyFlag_[114] = true;
}
void Kunde::setApprovalStep2Cd(std::string &&pApprovalStep2Cd) noexcept
{
    approvalStep2Cd_ = std::make_shared<std::string>(std::move(pApprovalStep2Cd));
    dirtyFlag_[114] = true;
}
void Kunde::setApprovalStep2CdToNull() noexcept
{
    approvalStep2Cd_.reset();
    dirtyFlag_[114] = true;
}

const std::string &Kunde::getValueOfApprovalStep2User() const noexcept
{
    const static std::string defaultValue = std::string();
    if(approvalStep2User_)
        return *approvalStep2User_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApprovalStep2User() const noexcept
{
    return approvalStep2User_;
}
void Kunde::setApprovalStep2User(const std::string &pApprovalStep2User) noexcept
{
    approvalStep2User_ = std::make_shared<std::string>(pApprovalStep2User);
    dirtyFlag_[115] = true;
}
void Kunde::setApprovalStep2User(std::string &&pApprovalStep2User) noexcept
{
    approvalStep2User_ = std::make_shared<std::string>(std::move(pApprovalStep2User));
    dirtyFlag_[115] = true;
}
void Kunde::setApprovalStep2UserToNull() noexcept
{
    approvalStep2User_.reset();
    dirtyFlag_[115] = true;
}

const ::trantor::Date &Kunde::getValueOfApprovalStep2Date() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(approvalStep2Date_)
        return *approvalStep2Date_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getApprovalStep2Date() const noexcept
{
    return approvalStep2Date_;
}
void Kunde::setApprovalStep2Date(const ::trantor::Date &pApprovalStep2Date) noexcept
{
    approvalStep2Date_ = std::make_shared<::trantor::Date>(pApprovalStep2Date);
    dirtyFlag_[116] = true;
}
void Kunde::setApprovalStep2DateToNull() noexcept
{
    approvalStep2Date_.reset();
    dirtyFlag_[116] = true;
}

const std::string &Kunde::getValueOfApprovalStep3Cd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(approvalStep3Cd_)
        return *approvalStep3Cd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApprovalStep3Cd() const noexcept
{
    return approvalStep3Cd_;
}
void Kunde::setApprovalStep3Cd(const std::string &pApprovalStep3Cd) noexcept
{
    approvalStep3Cd_ = std::make_shared<std::string>(pApprovalStep3Cd);
    dirtyFlag_[117] = true;
}
void Kunde::setApprovalStep3Cd(std::string &&pApprovalStep3Cd) noexcept
{
    approvalStep3Cd_ = std::make_shared<std::string>(std::move(pApprovalStep3Cd));
    dirtyFlag_[117] = true;
}
void Kunde::setApprovalStep3CdToNull() noexcept
{
    approvalStep3Cd_.reset();
    dirtyFlag_[117] = true;
}

const std::string &Kunde::getValueOfApprovalStep3User() const noexcept
{
    const static std::string defaultValue = std::string();
    if(approvalStep3User_)
        return *approvalStep3User_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApprovalStep3User() const noexcept
{
    return approvalStep3User_;
}
void Kunde::setApprovalStep3User(const std::string &pApprovalStep3User) noexcept
{
    approvalStep3User_ = std::make_shared<std::string>(pApprovalStep3User);
    dirtyFlag_[118] = true;
}
void Kunde::setApprovalStep3User(std::string &&pApprovalStep3User) noexcept
{
    approvalStep3User_ = std::make_shared<std::string>(std::move(pApprovalStep3User));
    dirtyFlag_[118] = true;
}
void Kunde::setApprovalStep3UserToNull() noexcept
{
    approvalStep3User_.reset();
    dirtyFlag_[118] = true;
}

const ::trantor::Date &Kunde::getValueOfApprovalStep3Date() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(approvalStep3Date_)
        return *approvalStep3Date_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getApprovalStep3Date() const noexcept
{
    return approvalStep3Date_;
}
void Kunde::setApprovalStep3Date(const ::trantor::Date &pApprovalStep3Date) noexcept
{
    approvalStep3Date_ = std::make_shared<::trantor::Date>(pApprovalStep3Date);
    dirtyFlag_[119] = true;
}
void Kunde::setApprovalStep3DateToNull() noexcept
{
    approvalStep3Date_.reset();
    dirtyFlag_[119] = true;
}

const std::string &Kunde::getValueOfApprovalStep4Cd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(approvalStep4Cd_)
        return *approvalStep4Cd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApprovalStep4Cd() const noexcept
{
    return approvalStep4Cd_;
}
void Kunde::setApprovalStep4Cd(const std::string &pApprovalStep4Cd) noexcept
{
    approvalStep4Cd_ = std::make_shared<std::string>(pApprovalStep4Cd);
    dirtyFlag_[120] = true;
}
void Kunde::setApprovalStep4Cd(std::string &&pApprovalStep4Cd) noexcept
{
    approvalStep4Cd_ = std::make_shared<std::string>(std::move(pApprovalStep4Cd));
    dirtyFlag_[120] = true;
}
void Kunde::setApprovalStep4CdToNull() noexcept
{
    approvalStep4Cd_.reset();
    dirtyFlag_[120] = true;
}

const std::string &Kunde::getValueOfApprovalStep4User() const noexcept
{
    const static std::string defaultValue = std::string();
    if(approvalStep4User_)
        return *approvalStep4User_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApprovalStep4User() const noexcept
{
    return approvalStep4User_;
}
void Kunde::setApprovalStep4User(const std::string &pApprovalStep4User) noexcept
{
    approvalStep4User_ = std::make_shared<std::string>(pApprovalStep4User);
    dirtyFlag_[121] = true;
}
void Kunde::setApprovalStep4User(std::string &&pApprovalStep4User) noexcept
{
    approvalStep4User_ = std::make_shared<std::string>(std::move(pApprovalStep4User));
    dirtyFlag_[121] = true;
}
void Kunde::setApprovalStep4UserToNull() noexcept
{
    approvalStep4User_.reset();
    dirtyFlag_[121] = true;
}

const ::trantor::Date &Kunde::getValueOfApprovalStep4Date() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(approvalStep4Date_)
        return *approvalStep4Date_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getApprovalStep4Date() const noexcept
{
    return approvalStep4Date_;
}
void Kunde::setApprovalStep4Date(const ::trantor::Date &pApprovalStep4Date) noexcept
{
    approvalStep4Date_ = std::make_shared<::trantor::Date>(pApprovalStep4Date);
    dirtyFlag_[122] = true;
}
void Kunde::setApprovalStep4DateToNull() noexcept
{
    approvalStep4Date_.reset();
    dirtyFlag_[122] = true;
}

const std::string &Kunde::getValueOfApprovalStep5Cd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(approvalStep5Cd_)
        return *approvalStep5Cd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApprovalStep5Cd() const noexcept
{
    return approvalStep5Cd_;
}
void Kunde::setApprovalStep5Cd(const std::string &pApprovalStep5Cd) noexcept
{
    approvalStep5Cd_ = std::make_shared<std::string>(pApprovalStep5Cd);
    dirtyFlag_[123] = true;
}
void Kunde::setApprovalStep5Cd(std::string &&pApprovalStep5Cd) noexcept
{
    approvalStep5Cd_ = std::make_shared<std::string>(std::move(pApprovalStep5Cd));
    dirtyFlag_[123] = true;
}
void Kunde::setApprovalStep5CdToNull() noexcept
{
    approvalStep5Cd_.reset();
    dirtyFlag_[123] = true;
}

const std::string &Kunde::getValueOfApprovalStep5User() const noexcept
{
    const static std::string defaultValue = std::string();
    if(approvalStep5User_)
        return *approvalStep5User_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApprovalStep5User() const noexcept
{
    return approvalStep5User_;
}
void Kunde::setApprovalStep5User(const std::string &pApprovalStep5User) noexcept
{
    approvalStep5User_ = std::make_shared<std::string>(pApprovalStep5User);
    dirtyFlag_[124] = true;
}
void Kunde::setApprovalStep5User(std::string &&pApprovalStep5User) noexcept
{
    approvalStep5User_ = std::make_shared<std::string>(std::move(pApprovalStep5User));
    dirtyFlag_[124] = true;
}
void Kunde::setApprovalStep5UserToNull() noexcept
{
    approvalStep5User_.reset();
    dirtyFlag_[124] = true;
}

const ::trantor::Date &Kunde::getValueOfApprovalStep5Date() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(approvalStep5Date_)
        return *approvalStep5Date_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getApprovalStep5Date() const noexcept
{
    return approvalStep5Date_;
}
void Kunde::setApprovalStep5Date(const ::trantor::Date &pApprovalStep5Date) noexcept
{
    approvalStep5Date_ = std::make_shared<::trantor::Date>(pApprovalStep5Date);
    dirtyFlag_[125] = true;
}
void Kunde::setApprovalStep5DateToNull() noexcept
{
    approvalStep5Date_.reset();
    dirtyFlag_[125] = true;
}

const std::string &Kunde::getValueOfApprovalStep1Bem() const noexcept
{
    const static std::string defaultValue = std::string();
    if(approvalStep1Bem_)
        return *approvalStep1Bem_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApprovalStep1Bem() const noexcept
{
    return approvalStep1Bem_;
}
void Kunde::setApprovalStep1Bem(const std::string &pApprovalStep1Bem) noexcept
{
    approvalStep1Bem_ = std::make_shared<std::string>(pApprovalStep1Bem);
    dirtyFlag_[126] = true;
}
void Kunde::setApprovalStep1Bem(std::string &&pApprovalStep1Bem) noexcept
{
    approvalStep1Bem_ = std::make_shared<std::string>(std::move(pApprovalStep1Bem));
    dirtyFlag_[126] = true;
}
void Kunde::setApprovalStep1BemToNull() noexcept
{
    approvalStep1Bem_.reset();
    dirtyFlag_[126] = true;
}

const std::string &Kunde::getValueOfApprovalStep2Bem() const noexcept
{
    const static std::string defaultValue = std::string();
    if(approvalStep2Bem_)
        return *approvalStep2Bem_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApprovalStep2Bem() const noexcept
{
    return approvalStep2Bem_;
}
void Kunde::setApprovalStep2Bem(const std::string &pApprovalStep2Bem) noexcept
{
    approvalStep2Bem_ = std::make_shared<std::string>(pApprovalStep2Bem);
    dirtyFlag_[127] = true;
}
void Kunde::setApprovalStep2Bem(std::string &&pApprovalStep2Bem) noexcept
{
    approvalStep2Bem_ = std::make_shared<std::string>(std::move(pApprovalStep2Bem));
    dirtyFlag_[127] = true;
}
void Kunde::setApprovalStep2BemToNull() noexcept
{
    approvalStep2Bem_.reset();
    dirtyFlag_[127] = true;
}

const std::string &Kunde::getValueOfApprovalStep3Bem() const noexcept
{
    const static std::string defaultValue = std::string();
    if(approvalStep3Bem_)
        return *approvalStep3Bem_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApprovalStep3Bem() const noexcept
{
    return approvalStep3Bem_;
}
void Kunde::setApprovalStep3Bem(const std::string &pApprovalStep3Bem) noexcept
{
    approvalStep3Bem_ = std::make_shared<std::string>(pApprovalStep3Bem);
    dirtyFlag_[128] = true;
}
void Kunde::setApprovalStep3Bem(std::string &&pApprovalStep3Bem) noexcept
{
    approvalStep3Bem_ = std::make_shared<std::string>(std::move(pApprovalStep3Bem));
    dirtyFlag_[128] = true;
}
void Kunde::setApprovalStep3BemToNull() noexcept
{
    approvalStep3Bem_.reset();
    dirtyFlag_[128] = true;
}

const std::string &Kunde::getValueOfApprovalStep4Bem() const noexcept
{
    const static std::string defaultValue = std::string();
    if(approvalStep4Bem_)
        return *approvalStep4Bem_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApprovalStep4Bem() const noexcept
{
    return approvalStep4Bem_;
}
void Kunde::setApprovalStep4Bem(const std::string &pApprovalStep4Bem) noexcept
{
    approvalStep4Bem_ = std::make_shared<std::string>(pApprovalStep4Bem);
    dirtyFlag_[129] = true;
}
void Kunde::setApprovalStep4Bem(std::string &&pApprovalStep4Bem) noexcept
{
    approvalStep4Bem_ = std::make_shared<std::string>(std::move(pApprovalStep4Bem));
    dirtyFlag_[129] = true;
}
void Kunde::setApprovalStep4BemToNull() noexcept
{
    approvalStep4Bem_.reset();
    dirtyFlag_[129] = true;
}

const std::string &Kunde::getValueOfApprovalStep5Bem() const noexcept
{
    const static std::string defaultValue = std::string();
    if(approvalStep5Bem_)
        return *approvalStep5Bem_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApprovalStep5Bem() const noexcept
{
    return approvalStep5Bem_;
}
void Kunde::setApprovalStep5Bem(const std::string &pApprovalStep5Bem) noexcept
{
    approvalStep5Bem_ = std::make_shared<std::string>(pApprovalStep5Bem);
    dirtyFlag_[130] = true;
}
void Kunde::setApprovalStep5Bem(std::string &&pApprovalStep5Bem) noexcept
{
    approvalStep5Bem_ = std::make_shared<std::string>(std::move(pApprovalStep5Bem));
    dirtyFlag_[130] = true;
}
void Kunde::setApprovalStep5BemToNull() noexcept
{
    approvalStep5Bem_.reset();
    dirtyFlag_[130] = true;
}

const double &Kunde::getValueOfApprovalStep1AssesCd() const noexcept
{
    const static double defaultValue = double();
    if(approvalStep1AssesCd_)
        return *approvalStep1AssesCd_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getApprovalStep1AssesCd() const noexcept
{
    return approvalStep1AssesCd_;
}
void Kunde::setApprovalStep1AssesCd(const double &pApprovalStep1AssesCd) noexcept
{
    approvalStep1AssesCd_ = std::make_shared<double>(pApprovalStep1AssesCd);
    dirtyFlag_[131] = true;
}
void Kunde::setApprovalStep1AssesCdToNull() noexcept
{
    approvalStep1AssesCd_.reset();
    dirtyFlag_[131] = true;
}

const double &Kunde::getValueOfApprovalStep2AssesCd() const noexcept
{
    const static double defaultValue = double();
    if(approvalStep2AssesCd_)
        return *approvalStep2AssesCd_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getApprovalStep2AssesCd() const noexcept
{
    return approvalStep2AssesCd_;
}
void Kunde::setApprovalStep2AssesCd(const double &pApprovalStep2AssesCd) noexcept
{
    approvalStep2AssesCd_ = std::make_shared<double>(pApprovalStep2AssesCd);
    dirtyFlag_[132] = true;
}
void Kunde::setApprovalStep2AssesCdToNull() noexcept
{
    approvalStep2AssesCd_.reset();
    dirtyFlag_[132] = true;
}

const double &Kunde::getValueOfApprovalStep3AssesCd() const noexcept
{
    const static double defaultValue = double();
    if(approvalStep3AssesCd_)
        return *approvalStep3AssesCd_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getApprovalStep3AssesCd() const noexcept
{
    return approvalStep3AssesCd_;
}
void Kunde::setApprovalStep3AssesCd(const double &pApprovalStep3AssesCd) noexcept
{
    approvalStep3AssesCd_ = std::make_shared<double>(pApprovalStep3AssesCd);
    dirtyFlag_[133] = true;
}
void Kunde::setApprovalStep3AssesCdToNull() noexcept
{
    approvalStep3AssesCd_.reset();
    dirtyFlag_[133] = true;
}

const double &Kunde::getValueOfApprovalStep4AssesCd() const noexcept
{
    const static double defaultValue = double();
    if(approvalStep4AssesCd_)
        return *approvalStep4AssesCd_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getApprovalStep4AssesCd() const noexcept
{
    return approvalStep4AssesCd_;
}
void Kunde::setApprovalStep4AssesCd(const double &pApprovalStep4AssesCd) noexcept
{
    approvalStep4AssesCd_ = std::make_shared<double>(pApprovalStep4AssesCd);
    dirtyFlag_[134] = true;
}
void Kunde::setApprovalStep4AssesCdToNull() noexcept
{
    approvalStep4AssesCd_.reset();
    dirtyFlag_[134] = true;
}

const double &Kunde::getValueOfApprovalStep5AssesCd() const noexcept
{
    const static double defaultValue = double();
    if(approvalStep5AssesCd_)
        return *approvalStep5AssesCd_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getApprovalStep5AssesCd() const noexcept
{
    return approvalStep5AssesCd_;
}
void Kunde::setApprovalStep5AssesCd(const double &pApprovalStep5AssesCd) noexcept
{
    approvalStep5AssesCd_ = std::make_shared<double>(pApprovalStep5AssesCd);
    dirtyFlag_[135] = true;
}
void Kunde::setApprovalStep5AssesCdToNull() noexcept
{
    approvalStep5AssesCd_.reset();
    dirtyFlag_[135] = true;
}

const double &Kunde::getValueOfApprovalStatusCd() const noexcept
{
    const static double defaultValue = double();
    if(approvalStatusCd_)
        return *approvalStatusCd_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getApprovalStatusCd() const noexcept
{
    return approvalStatusCd_;
}
void Kunde::setApprovalStatusCd(const double &pApprovalStatusCd) noexcept
{
    approvalStatusCd_ = std::make_shared<double>(pApprovalStatusCd);
    dirtyFlag_[136] = true;
}
void Kunde::setApprovalStatusCdToNull() noexcept
{
    approvalStatusCd_.reset();
    dirtyFlag_[136] = true;
}

const std::string &Kunde::getValueOfClientStatusCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(clientStatusCd_)
        return *clientStatusCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getClientStatusCd() const noexcept
{
    return clientStatusCd_;
}
void Kunde::setClientStatusCd(const std::string &pClientStatusCd) noexcept
{
    clientStatusCd_ = std::make_shared<std::string>(pClientStatusCd);
    dirtyFlag_[137] = true;
}
void Kunde::setClientStatusCd(std::string &&pClientStatusCd) noexcept
{
    clientStatusCd_ = std::make_shared<std::string>(std::move(pClientStatusCd));
    dirtyFlag_[137] = true;
}
void Kunde::setClientStatusCdToNull() noexcept
{
    clientStatusCd_.reset();
    dirtyFlag_[137] = true;
}

const std::string &Kunde::getValueOfDischargeOrdersCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(dischargeOrdersCd_)
        return *dischargeOrdersCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getDischargeOrdersCd() const noexcept
{
    return dischargeOrdersCd_;
}
void Kunde::setDischargeOrdersCd(const std::string &pDischargeOrdersCd) noexcept
{
    dischargeOrdersCd_ = std::make_shared<std::string>(pDischargeOrdersCd);
    dirtyFlag_[138] = true;
}
void Kunde::setDischargeOrdersCd(std::string &&pDischargeOrdersCd) noexcept
{
    dischargeOrdersCd_ = std::make_shared<std::string>(std::move(pDischargeOrdersCd));
    dirtyFlag_[138] = true;
}
void Kunde::setDischargeOrdersCdToNull() noexcept
{
    dischargeOrdersCd_.reset();
    dirtyFlag_[138] = true;
}

const std::string &Kunde::getValueOfPrintSummaryHoldmailOnlyCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(printSummaryHoldmailOnlyCd_)
        return *printSummaryHoldmailOnlyCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getPrintSummaryHoldmailOnlyCd() const noexcept
{
    return printSummaryHoldmailOnlyCd_;
}
void Kunde::setPrintSummaryHoldmailOnlyCd(const std::string &pPrintSummaryHoldmailOnlyCd) noexcept
{
    printSummaryHoldmailOnlyCd_ = std::make_shared<std::string>(pPrintSummaryHoldmailOnlyCd);
    dirtyFlag_[139] = true;
}
void Kunde::setPrintSummaryHoldmailOnlyCd(std::string &&pPrintSummaryHoldmailOnlyCd) noexcept
{
    printSummaryHoldmailOnlyCd_ = std::make_shared<std::string>(std::move(pPrintSummaryHoldmailOnlyCd));
    dirtyFlag_[139] = true;
}
void Kunde::setPrintSummaryHoldmailOnlyCdToNull() noexcept
{
    printSummaryHoldmailOnlyCd_.reset();
    dirtyFlag_[139] = true;
}

const std::string &Kunde::getValueOfEbankingContractCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(ebankingContractCd_)
        return *ebankingContractCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getEbankingContractCd() const noexcept
{
    return ebankingContractCd_;
}
void Kunde::setEbankingContractCd(const std::string &pEbankingContractCd) noexcept
{
    ebankingContractCd_ = std::make_shared<std::string>(pEbankingContractCd);
    dirtyFlag_[140] = true;
}
void Kunde::setEbankingContractCd(std::string &&pEbankingContractCd) noexcept
{
    ebankingContractCd_ = std::make_shared<std::string>(std::move(pEbankingContractCd));
    dirtyFlag_[140] = true;
}
void Kunde::setEbankingContractCdToNull() noexcept
{
    ebankingContractCd_.reset();
    dirtyFlag_[140] = true;
}

const std::string &Kunde::getValueOfEbankingContractLanguageCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(ebankingContractLanguageCd_)
        return *ebankingContractLanguageCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getEbankingContractLanguageCd() const noexcept
{
    return ebankingContractLanguageCd_;
}
void Kunde::setEbankingContractLanguageCd(const std::string &pEbankingContractLanguageCd) noexcept
{
    ebankingContractLanguageCd_ = std::make_shared<std::string>(pEbankingContractLanguageCd);
    dirtyFlag_[141] = true;
}
void Kunde::setEbankingContractLanguageCd(std::string &&pEbankingContractLanguageCd) noexcept
{
    ebankingContractLanguageCd_ = std::make_shared<std::string>(std::move(pEbankingContractLanguageCd));
    dirtyFlag_[141] = true;
}
void Kunde::setEbankingContractLanguageCdToNull() noexcept
{
    ebankingContractLanguageCd_.reset();
    dirtyFlag_[141] = true;
}

const ::trantor::Date &Kunde::getValueOfApsysDtechdiaryl() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(apsysDtechdiaryl_)
        return *apsysDtechdiaryl_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getApsysDtechdiaryl() const noexcept
{
    return apsysDtechdiaryl_;
}
void Kunde::setApsysDtechdiaryl(const ::trantor::Date &pApsysDtechdiaryl) noexcept
{
    apsysDtechdiaryl_ = std::make_shared<::trantor::Date>(pApsysDtechdiaryl);
    dirtyFlag_[142] = true;
}
void Kunde::setApsysDtechdiarylToNull() noexcept
{
    apsysDtechdiaryl_.reset();
    dirtyFlag_[142] = true;
}

const std::string &Kunde::getValueOfApsysMotdiarys() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysMotdiarys_)
        return *apsysMotdiarys_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysMotdiarys() const noexcept
{
    return apsysMotdiarys_;
}
void Kunde::setApsysMotdiarys(const std::string &pApsysMotdiarys) noexcept
{
    apsysMotdiarys_ = std::make_shared<std::string>(pApsysMotdiarys);
    dirtyFlag_[143] = true;
}
void Kunde::setApsysMotdiarys(std::string &&pApsysMotdiarys) noexcept
{
    apsysMotdiarys_ = std::make_shared<std::string>(std::move(pApsysMotdiarys));
    dirtyFlag_[143] = true;
}
void Kunde::setApsysMotdiarysToNull() noexcept
{
    apsysMotdiarys_.reset();
    dirtyFlag_[143] = true;
}

const std::string &Kunde::getValueOfApsysIdtypcliirss() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysIdtypcliirss_)
        return *apsysIdtypcliirss_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysIdtypcliirss() const noexcept
{
    return apsysIdtypcliirss_;
}
void Kunde::setApsysIdtypcliirss(const std::string &pApsysIdtypcliirss) noexcept
{
    apsysIdtypcliirss_ = std::make_shared<std::string>(pApsysIdtypcliirss);
    dirtyFlag_[144] = true;
}
void Kunde::setApsysIdtypcliirss(std::string &&pApsysIdtypcliirss) noexcept
{
    apsysIdtypcliirss_ = std::make_shared<std::string>(std::move(pApsysIdtypcliirss));
    dirtyFlag_[144] = true;
}
void Kunde::setApsysIdtypcliirssToNull() noexcept
{
    apsysIdtypcliirss_.reset();
    dirtyFlag_[144] = true;
}

const std::string &Kunde::getValueOfApsysIdrciqis() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysIdrciqis_)
        return *apsysIdrciqis_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysIdrciqis() const noexcept
{
    return apsysIdrciqis_;
}
void Kunde::setApsysIdrciqis(const std::string &pApsysIdrciqis) noexcept
{
    apsysIdrciqis_ = std::make_shared<std::string>(pApsysIdrciqis);
    dirtyFlag_[145] = true;
}
void Kunde::setApsysIdrciqis(std::string &&pApsysIdrciqis) noexcept
{
    apsysIdrciqis_ = std::make_shared<std::string>(std::move(pApsysIdrciqis));
    dirtyFlag_[145] = true;
}
void Kunde::setApsysIdrciqisToNull() noexcept
{
    apsysIdrciqis_.reset();
    dirtyFlag_[145] = true;
}

const std::string &Kunde::getValueOfApsysIdrcifatcas() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysIdrcifatcas_)
        return *apsysIdrcifatcas_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysIdrcifatcas() const noexcept
{
    return apsysIdrcifatcas_;
}
void Kunde::setApsysIdrcifatcas(const std::string &pApsysIdrcifatcas) noexcept
{
    apsysIdrcifatcas_ = std::make_shared<std::string>(pApsysIdrcifatcas);
    dirtyFlag_[146] = true;
}
void Kunde::setApsysIdrcifatcas(std::string &&pApsysIdrcifatcas) noexcept
{
    apsysIdrcifatcas_ = std::make_shared<std::string>(std::move(pApsysIdrcifatcas));
    dirtyFlag_[146] = true;
}
void Kunde::setApsysIdrcifatcasToNull() noexcept
{
    apsysIdrcifatcas_.reset();
    dirtyFlag_[146] = true;
}

const double &Kunde::getValueOfMailingTarifTypeCd() const noexcept
{
    const static double defaultValue = double();
    if(mailingTarifTypeCd_)
        return *mailingTarifTypeCd_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getMailingTarifTypeCd() const noexcept
{
    return mailingTarifTypeCd_;
}
void Kunde::setMailingTarifTypeCd(const double &pMailingTarifTypeCd) noexcept
{
    mailingTarifTypeCd_ = std::make_shared<double>(pMailingTarifTypeCd);
    dirtyFlag_[147] = true;
}
void Kunde::setMailingTarifTypeCdToNull() noexcept
{
    mailingTarifTypeCd_.reset();
    dirtyFlag_[147] = true;
}

const std::string &Kunde::getValueOfRegisteredCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(registeredCd_)
        return *registeredCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getRegisteredCd() const noexcept
{
    return registeredCd_;
}
void Kunde::setRegisteredCd(const std::string &pRegisteredCd) noexcept
{
    registeredCd_ = std::make_shared<std::string>(pRegisteredCd);
    dirtyFlag_[148] = true;
}
void Kunde::setRegisteredCd(std::string &&pRegisteredCd) noexcept
{
    registeredCd_ = std::make_shared<std::string>(std::move(pRegisteredCd));
    dirtyFlag_[148] = true;
}
void Kunde::setRegisteredCdToNull() noexcept
{
    registeredCd_.reset();
    dirtyFlag_[148] = true;
}

const std::string &Kunde::getValueOfRegisteredMailCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(registeredMailCd_)
        return *registeredMailCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getRegisteredMailCd() const noexcept
{
    return registeredMailCd_;
}
void Kunde::setRegisteredMailCd(const std::string &pRegisteredMailCd) noexcept
{
    registeredMailCd_ = std::make_shared<std::string>(pRegisteredMailCd);
    dirtyFlag_[149] = true;
}
void Kunde::setRegisteredMailCd(std::string &&pRegisteredMailCd) noexcept
{
    registeredMailCd_ = std::make_shared<std::string>(std::move(pRegisteredMailCd));
    dirtyFlag_[149] = true;
}
void Kunde::setRegisteredMailCdToNull() noexcept
{
    registeredMailCd_.reset();
    dirtyFlag_[149] = true;
}

const double &Kunde::getValueOfApsysNbperscpartiel() const noexcept
{
    const static double defaultValue = double();
    if(apsysNbperscpartiel_)
        return *apsysNbperscpartiel_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getApsysNbperscpartiel() const noexcept
{
    return apsysNbperscpartiel_;
}
void Kunde::setApsysNbperscpartiel(const double &pApsysNbperscpartiel) noexcept
{
    apsysNbperscpartiel_ = std::make_shared<double>(pApsysNbperscpartiel);
    dirtyFlag_[150] = true;
}
void Kunde::setApsysNbperscpartielToNull() noexcept
{
    apsysNbperscpartiel_.reset();
    dirtyFlag_[150] = true;
}

const std::string &Kunde::getValueOfAssetValueTierCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(assetValueTierCd_)
        return *assetValueTierCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getAssetValueTierCd() const noexcept
{
    return assetValueTierCd_;
}
void Kunde::setAssetValueTierCd(const std::string &pAssetValueTierCd) noexcept
{
    assetValueTierCd_ = std::make_shared<std::string>(pAssetValueTierCd);
    dirtyFlag_[151] = true;
}
void Kunde::setAssetValueTierCd(std::string &&pAssetValueTierCd) noexcept
{
    assetValueTierCd_ = std::make_shared<std::string>(std::move(pAssetValueTierCd));
    dirtyFlag_[151] = true;
}
void Kunde::setAssetValueTierCdToNull() noexcept
{
    assetValueTierCd_.reset();
    dirtyFlag_[151] = true;
}

const std::string &Kunde::getValueOfRelationshipTypeAmlCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(relationshipTypeAmlCd_)
        return *relationshipTypeAmlCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getRelationshipTypeAmlCd() const noexcept
{
    return relationshipTypeAmlCd_;
}
void Kunde::setRelationshipTypeAmlCd(const std::string &pRelationshipTypeAmlCd) noexcept
{
    relationshipTypeAmlCd_ = std::make_shared<std::string>(pRelationshipTypeAmlCd);
    dirtyFlag_[152] = true;
}
void Kunde::setRelationshipTypeAmlCd(std::string &&pRelationshipTypeAmlCd) noexcept
{
    relationshipTypeAmlCd_ = std::make_shared<std::string>(std::move(pRelationshipTypeAmlCd));
    dirtyFlag_[152] = true;
}
void Kunde::setRelationshipTypeAmlCdToNull() noexcept
{
    relationshipTypeAmlCd_.reset();
    dirtyFlag_[152] = true;
}

const std::string &Kunde::getValueOfCbAssetValueTierCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(cbAssetValueTierCd_)
        return *cbAssetValueTierCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getCbAssetValueTierCd() const noexcept
{
    return cbAssetValueTierCd_;
}
void Kunde::setCbAssetValueTierCd(const std::string &pCbAssetValueTierCd) noexcept
{
    cbAssetValueTierCd_ = std::make_shared<std::string>(pCbAssetValueTierCd);
    dirtyFlag_[153] = true;
}
void Kunde::setCbAssetValueTierCd(std::string &&pCbAssetValueTierCd) noexcept
{
    cbAssetValueTierCd_ = std::make_shared<std::string>(std::move(pCbAssetValueTierCd));
    dirtyFlag_[153] = true;
}
void Kunde::setCbAssetValueTierCdToNull() noexcept
{
    cbAssetValueTierCd_.reset();
    dirtyFlag_[153] = true;
}

const double &Kunde::getValueOfApprovalScore() const noexcept
{
    const static double defaultValue = double();
    if(approvalScore_)
        return *approvalScore_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getApprovalScore() const noexcept
{
    return approvalScore_;
}
void Kunde::setApprovalScore(const double &pApprovalScore) noexcept
{
    approvalScore_ = std::make_shared<double>(pApprovalScore);
    dirtyFlag_[154] = true;
}
void Kunde::setApprovalScoreToNull() noexcept
{
    approvalScore_.reset();
    dirtyFlag_[154] = true;
}

const double &Kunde::getValueOfApprovalScoreSteps() const noexcept
{
    const static double defaultValue = double();
    if(approvalScoreSteps_)
        return *approvalScoreSteps_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getApprovalScoreSteps() const noexcept
{
    return approvalScoreSteps_;
}
void Kunde::setApprovalScoreSteps(const double &pApprovalScoreSteps) noexcept
{
    approvalScoreSteps_ = std::make_shared<double>(pApprovalScoreSteps);
    dirtyFlag_[155] = true;
}
void Kunde::setApprovalScoreStepsToNull() noexcept
{
    approvalScoreSteps_.reset();
    dirtyFlag_[155] = true;
}

const ::trantor::Date &Kunde::getValueOfApsysDtdebpartl() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(apsysDtdebpartl_)
        return *apsysDtdebpartl_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getApsysDtdebpartl() const noexcept
{
    return apsysDtdebpartl_;
}
void Kunde::setApsysDtdebpartl(const ::trantor::Date &pApsysDtdebpartl) noexcept
{
    apsysDtdebpartl_ = std::make_shared<::trantor::Date>(pApsysDtdebpartl);
    dirtyFlag_[156] = true;
}
void Kunde::setApsysDtdebpartlToNull() noexcept
{
    apsysDtdebpartl_.reset();
    dirtyFlag_[156] = true;
}

const ::trantor::Date &Kunde::getValueOfApsysDtfinpartl() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(apsysDtfinpartl_)
        return *apsysDtfinpartl_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getApsysDtfinpartl() const noexcept
{
    return apsysDtfinpartl_;
}
void Kunde::setApsysDtfinpartl(const ::trantor::Date &pApsysDtfinpartl) noexcept
{
    apsysDtfinpartl_ = std::make_shared<::trantor::Date>(pApsysDtfinpartl);
    dirtyFlag_[157] = true;
}
void Kunde::setApsysDtfinpartlToNull() noexcept
{
    apsysDtfinpartl_.reset();
    dirtyFlag_[157] = true;
}

const std::string &Kunde::getValueOfApsysCdmotifclos() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysCdmotifclos_)
        return *apsysCdmotifclos_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysCdmotifclos() const noexcept
{
    return apsysCdmotifclos_;
}
void Kunde::setApsysCdmotifclos(const std::string &pApsysCdmotifclos) noexcept
{
    apsysCdmotifclos_ = std::make_shared<std::string>(pApsysCdmotifclos);
    dirtyFlag_[158] = true;
}
void Kunde::setApsysCdmotifclos(std::string &&pApsysCdmotifclos) noexcept
{
    apsysCdmotifclos_ = std::make_shared<std::string>(std::move(pApsysCdmotifclos));
    dirtyFlag_[158] = true;
}
void Kunde::setApsysCdmotifclosToNull() noexcept
{
    apsysCdmotifclos_.reset();
    dirtyFlag_[158] = true;
}

const std::string &Kunde::getValueOfApsysCdnaturecpartieemirc() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysCdnaturecpartieemirc_)
        return *apsysCdnaturecpartieemirc_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysCdnaturecpartieemirc() const noexcept
{
    return apsysCdnaturecpartieemirc_;
}
void Kunde::setApsysCdnaturecpartieemirc(const std::string &pApsysCdnaturecpartieemirc) noexcept
{
    apsysCdnaturecpartieemirc_ = std::make_shared<std::string>(pApsysCdnaturecpartieemirc);
    dirtyFlag_[159] = true;
}
void Kunde::setApsysCdnaturecpartieemirc(std::string &&pApsysCdnaturecpartieemirc) noexcept
{
    apsysCdnaturecpartieemirc_ = std::make_shared<std::string>(std::move(pApsysCdnaturecpartieemirc));
    dirtyFlag_[159] = true;
}
void Kunde::setApsysCdnaturecpartieemircToNull() noexcept
{
    apsysCdnaturecpartieemirc_.reset();
    dirtyFlag_[159] = true;
}

const std::string &Kunde::getValueOfApsysFlagotheremirc() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysFlagotheremirc_)
        return *apsysFlagotheremirc_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysFlagotheremirc() const noexcept
{
    return apsysFlagotheremirc_;
}
void Kunde::setApsysFlagotheremirc(const std::string &pApsysFlagotheremirc) noexcept
{
    apsysFlagotheremirc_ = std::make_shared<std::string>(pApsysFlagotheremirc);
    dirtyFlag_[160] = true;
}
void Kunde::setApsysFlagotheremirc(std::string &&pApsysFlagotheremirc) noexcept
{
    apsysFlagotheremirc_ = std::make_shared<std::string>(std::move(pApsysFlagotheremirc));
    dirtyFlag_[160] = true;
}
void Kunde::setApsysFlagotheremircToNull() noexcept
{
    apsysFlagotheremirc_.reset();
    dirtyFlag_[160] = true;
}

const std::string &Kunde::getValueOfApsysCdindusemirs() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysCdindusemirs_)
        return *apsysCdindusemirs_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysCdindusemirs() const noexcept
{
    return apsysCdindusemirs_;
}
void Kunde::setApsysCdindusemirs(const std::string &pApsysCdindusemirs) noexcept
{
    apsysCdindusemirs_ = std::make_shared<std::string>(pApsysCdindusemirs);
    dirtyFlag_[161] = true;
}
void Kunde::setApsysCdindusemirs(std::string &&pApsysCdindusemirs) noexcept
{
    apsysCdindusemirs_ = std::make_shared<std::string>(std::move(pApsysCdindusemirs));
    dirtyFlag_[161] = true;
}
void Kunde::setApsysCdindusemirsToNull() noexcept
{
    apsysCdindusemirs_.reset();
    dirtyFlag_[161] = true;
}

const ::trantor::Date &Kunde::getValueOfOpenedInApsysDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(openedInApsysDate_)
        return *openedInApsysDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getOpenedInApsysDate() const noexcept
{
    return openedInApsysDate_;
}
void Kunde::setOpenedInApsysDate(const ::trantor::Date &pOpenedInApsysDate) noexcept
{
    openedInApsysDate_ = std::make_shared<::trantor::Date>(pOpenedInApsysDate);
    dirtyFlag_[162] = true;
}
void Kunde::setOpenedInApsysDateToNull() noexcept
{
    openedInApsysDate_.reset();
    dirtyFlag_[162] = true;
}

const std::string &Kunde::getValueOfApsysCdnaturecpartiefmiac() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysCdnaturecpartiefmiac_)
        return *apsysCdnaturecpartiefmiac_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysCdnaturecpartiefmiac() const noexcept
{
    return apsysCdnaturecpartiefmiac_;
}
void Kunde::setApsysCdnaturecpartiefmiac(const std::string &pApsysCdnaturecpartiefmiac) noexcept
{
    apsysCdnaturecpartiefmiac_ = std::make_shared<std::string>(pApsysCdnaturecpartiefmiac);
    dirtyFlag_[163] = true;
}
void Kunde::setApsysCdnaturecpartiefmiac(std::string &&pApsysCdnaturecpartiefmiac) noexcept
{
    apsysCdnaturecpartiefmiac_ = std::make_shared<std::string>(std::move(pApsysCdnaturecpartiefmiac));
    dirtyFlag_[163] = true;
}
void Kunde::setApsysCdnaturecpartiefmiacToNull() noexcept
{
    apsysCdnaturecpartiefmiac_.reset();
    dirtyFlag_[163] = true;
}

const std::string &Kunde::getValueOfEbankingClosedCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(ebankingClosedCd_)
        return *ebankingClosedCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getEbankingClosedCd() const noexcept
{
    return ebankingClosedCd_;
}
void Kunde::setEbankingClosedCd(const std::string &pEbankingClosedCd) noexcept
{
    ebankingClosedCd_ = std::make_shared<std::string>(pEbankingClosedCd);
    dirtyFlag_[164] = true;
}
void Kunde::setEbankingClosedCd(std::string &&pEbankingClosedCd) noexcept
{
    ebankingClosedCd_ = std::make_shared<std::string>(std::move(pEbankingClosedCd));
    dirtyFlag_[164] = true;
}
void Kunde::setEbankingClosedCdToNull() noexcept
{
    ebankingClosedCd_.reset();
    dirtyFlag_[164] = true;
}

const ::trantor::Date &Kunde::getValueOfEbankingClosingdate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(ebankingClosingdate_)
        return *ebankingClosingdate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getEbankingClosingdate() const noexcept
{
    return ebankingClosingdate_;
}
void Kunde::setEbankingClosingdate(const ::trantor::Date &pEbankingClosingdate) noexcept
{
    ebankingClosingdate_ = std::make_shared<::trantor::Date>(pEbankingClosingdate);
    dirtyFlag_[165] = true;
}
void Kunde::setEbankingClosingdateToNull() noexcept
{
    ebankingClosingdate_.reset();
    dirtyFlag_[165] = true;
}

const ::trantor::Date &Kunde::getValueOfKycReviewProcessStartDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(kycReviewProcessStartDate_)
        return *kycReviewProcessStartDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getKycReviewProcessStartDate() const noexcept
{
    return kycReviewProcessStartDate_;
}
void Kunde::setKycReviewProcessStartDate(const ::trantor::Date &pKycReviewProcessStartDate) noexcept
{
    kycReviewProcessStartDate_ = std::make_shared<::trantor::Date>(pKycReviewProcessStartDate);
    dirtyFlag_[166] = true;
}
void Kunde::setKycReviewProcessStartDateToNull() noexcept
{
    kycReviewProcessStartDate_.reset();
    dirtyFlag_[166] = true;
}

const std::string &Kunde::getValueOfRemarks() const noexcept
{
    const static std::string defaultValue = std::string();
    if(remarks_)
        return *remarks_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getRemarks() const noexcept
{
    return remarks_;
}
void Kunde::setRemarks(const std::string &pRemarks) noexcept
{
    remarks_ = std::make_shared<std::string>(pRemarks);
    dirtyFlag_[167] = true;
}
void Kunde::setRemarks(std::string &&pRemarks) noexcept
{
    remarks_ = std::make_shared<std::string>(std::move(pRemarks));
    dirtyFlag_[167] = true;
}
void Kunde::setRemarksToNull() noexcept
{
    remarks_.reset();
    dirtyFlag_[167] = true;
}

const double &Kunde::getValueOfTransactionBlCountryCd() const noexcept
{
    const static double defaultValue = double();
    if(transactionBlCountryCd_)
        return *transactionBlCountryCd_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getTransactionBlCountryCd() const noexcept
{
    return transactionBlCountryCd_;
}
void Kunde::setTransactionBlCountryCd(const double &pTransactionBlCountryCd) noexcept
{
    transactionBlCountryCd_ = std::make_shared<double>(pTransactionBlCountryCd);
    dirtyFlag_[168] = true;
}
void Kunde::setTransactionBlCountryCdToNull() noexcept
{
    transactionBlCountryCd_.reset();
    dirtyFlag_[168] = true;
}

const double &Kunde::getValueOfClientgroupCd() const noexcept
{
    const static double defaultValue = double();
    if(clientgroupCd_)
        return *clientgroupCd_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getClientgroupCd() const noexcept
{
    return clientgroupCd_;
}
void Kunde::setClientgroupCd(const double &pClientgroupCd) noexcept
{
    clientgroupCd_ = std::make_shared<double>(pClientgroupCd);
    dirtyFlag_[169] = true;
}
void Kunde::setClientgroupCdToNull() noexcept
{
    clientgroupCd_.reset();
    dirtyFlag_[169] = true;
}

const double &Kunde::getValueOfRiskindexCalc() const noexcept
{
    const static double defaultValue = double();
    if(riskindexCalc_)
        return *riskindexCalc_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getRiskindexCalc() const noexcept
{
    return riskindexCalc_;
}
void Kunde::setRiskindexCalc(const double &pRiskindexCalc) noexcept
{
    riskindexCalc_ = std::make_shared<double>(pRiskindexCalc);
    dirtyFlag_[170] = true;
}
void Kunde::setRiskindexCalcToNull() noexcept
{
    riskindexCalc_.reset();
    dirtyFlag_[170] = true;
}

const ::trantor::Date &Kunde::getValueOfLastCalcCriMutdatum() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(lastCalcCriMutdatum_)
        return *lastCalcCriMutdatum_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getLastCalcCriMutdatum() const noexcept
{
    return lastCalcCriMutdatum_;
}
void Kunde::setLastCalcCriMutdatum(const ::trantor::Date &pLastCalcCriMutdatum) noexcept
{
    lastCalcCriMutdatum_ = std::make_shared<::trantor::Date>(pLastCalcCriMutdatum);
    dirtyFlag_[171] = true;
}
void Kunde::setLastCalcCriMutdatumToNull() noexcept
{
    lastCalcCriMutdatum_.reset();
    dirtyFlag_[171] = true;
}

const std::string &Kunde::getValueOfRisikokategorieCalcCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(risikokategorieCalcCd_)
        return *risikokategorieCalcCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getRisikokategorieCalcCd() const noexcept
{
    return risikokategorieCalcCd_;
}
void Kunde::setRisikokategorieCalcCd(const std::string &pRisikokategorieCalcCd) noexcept
{
    risikokategorieCalcCd_ = std::make_shared<std::string>(pRisikokategorieCalcCd);
    dirtyFlag_[172] = true;
}
void Kunde::setRisikokategorieCalcCd(std::string &&pRisikokategorieCalcCd) noexcept
{
    risikokategorieCalcCd_ = std::make_shared<std::string>(std::move(pRisikokategorieCalcCd));
    dirtyFlag_[172] = true;
}
void Kunde::setRisikokategorieCalcCdToNull() noexcept
{
    risikokategorieCalcCd_.reset();
    dirtyFlag_[172] = true;
}

const double &Kunde::getValueOfRiskindexGroup() const noexcept
{
    const static double defaultValue = double();
    if(riskindexGroup_)
        return *riskindexGroup_;
    return defaultValue;
}
const std::shared_ptr<double> &Kunde::getRiskindexGroup() const noexcept
{
    return riskindexGroup_;
}
void Kunde::setRiskindexGroup(const double &pRiskindexGroup) noexcept
{
    riskindexGroup_ = std::make_shared<double>(pRiskindexGroup);
    dirtyFlag_[173] = true;
}
void Kunde::setRiskindexGroupToNull() noexcept
{
    riskindexGroup_.reset();
    dirtyFlag_[173] = true;
}

const ::trantor::Date &Kunde::getValueOfEstAmountRemWithMutdatum() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(estAmountRemWithMutdatum_)
        return *estAmountRemWithMutdatum_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getEstAmountRemWithMutdatum() const noexcept
{
    return estAmountRemWithMutdatum_;
}
void Kunde::setEstAmountRemWithMutdatum(const ::trantor::Date &pEstAmountRemWithMutdatum) noexcept
{
    estAmountRemWithMutdatum_ = std::make_shared<::trantor::Date>(pEstAmountRemWithMutdatum);
    dirtyFlag_[174] = true;
}
void Kunde::setEstAmountRemWithMutdatumToNull() noexcept
{
    estAmountRemWithMutdatum_.reset();
    dirtyFlag_[174] = true;
}

const ::trantor::Date &Kunde::getValueOfGesamtvermoegenMutdatum() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(gesamtvermoegenMutdatum_)
        return *gesamtvermoegenMutdatum_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getGesamtvermoegenMutdatum() const noexcept
{
    return gesamtvermoegenMutdatum_;
}
void Kunde::setGesamtvermoegenMutdatum(const ::trantor::Date &pGesamtvermoegenMutdatum) noexcept
{
    gesamtvermoegenMutdatum_ = std::make_shared<::trantor::Date>(pGesamtvermoegenMutdatum);
    dirtyFlag_[175] = true;
}
void Kunde::setGesamtvermoegenMutdatumToNull() noexcept
{
    gesamtvermoegenMutdatum_.reset();
    dirtyFlag_[175] = true;
}

const ::trantor::Date &Kunde::getValueOfTransactBlCountryMutdatum() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(transactBlCountryMutdatum_)
        return *transactBlCountryMutdatum_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getTransactBlCountryMutdatum() const noexcept
{
    return transactBlCountryMutdatum_;
}
void Kunde::setTransactBlCountryMutdatum(const ::trantor::Date &pTransactBlCountryMutdatum) noexcept
{
    transactBlCountryMutdatum_ = std::make_shared<::trantor::Date>(pTransactBlCountryMutdatum);
    dirtyFlag_[176] = true;
}
void Kunde::setTransactBlCountryMutdatumToNull() noexcept
{
    transactBlCountryMutdatum_.reset();
    dirtyFlag_[176] = true;
}

const ::trantor::Date &Kunde::getValueOfAccountpurposeMutdatum() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(accountpurposeMutdatum_)
        return *accountpurposeMutdatum_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getAccountpurposeMutdatum() const noexcept
{
    return accountpurposeMutdatum_;
}
void Kunde::setAccountpurposeMutdatum(const ::trantor::Date &pAccountpurposeMutdatum) noexcept
{
    accountpurposeMutdatum_ = std::make_shared<::trantor::Date>(pAccountpurposeMutdatum);
    dirtyFlag_[177] = true;
}
void Kunde::setAccountpurposeMutdatumToNull() noexcept
{
    accountpurposeMutdatum_.reset();
    dirtyFlag_[177] = true;
}

const std::string &Kunde::getValueOfApsysFlagdeldatapersi() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysFlagdeldatapersi_)
        return *apsysFlagdeldatapersi_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysFlagdeldatapersi() const noexcept
{
    return apsysFlagdeldatapersi_;
}
void Kunde::setApsysFlagdeldatapersi(const std::string &pApsysFlagdeldatapersi) noexcept
{
    apsysFlagdeldatapersi_ = std::make_shared<std::string>(pApsysFlagdeldatapersi);
    dirtyFlag_[178] = true;
}
void Kunde::setApsysFlagdeldatapersi(std::string &&pApsysFlagdeldatapersi) noexcept
{
    apsysFlagdeldatapersi_ = std::make_shared<std::string>(std::move(pApsysFlagdeldatapersi));
    dirtyFlag_[178] = true;
}
void Kunde::setApsysFlagdeldatapersiToNull() noexcept
{
    apsysFlagdeldatapersi_.reset();
    dirtyFlag_[178] = true;
}

const ::trantor::Date &Kunde::getValueOfApsysDtwaitdeldatapersl() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(apsysDtwaitdeldatapersl_)
        return *apsysDtwaitdeldatapersl_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getApsysDtwaitdeldatapersl() const noexcept
{
    return apsysDtwaitdeldatapersl_;
}
void Kunde::setApsysDtwaitdeldatapersl(const ::trantor::Date &pApsysDtwaitdeldatapersl) noexcept
{
    apsysDtwaitdeldatapersl_ = std::make_shared<::trantor::Date>(pApsysDtwaitdeldatapersl);
    dirtyFlag_[179] = true;
}
void Kunde::setApsysDtwaitdeldataperslToNull() noexcept
{
    apsysDtwaitdeldatapersl_.reset();
    dirtyFlag_[179] = true;
}

const std::string &Kunde::getValueOfNameEnc() const noexcept
{
    const static std::string defaultValue = std::string();
    if(nameEnc_)
        return *nameEnc_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getNameEnc() const noexcept
{
    return nameEnc_;
}
void Kunde::setNameEnc(const std::string &pNameEnc) noexcept
{
    nameEnc_ = std::make_shared<std::string>(pNameEnc);
    dirtyFlag_[180] = true;
}
void Kunde::setNameEnc(std::string &&pNameEnc) noexcept
{
    nameEnc_ = std::make_shared<std::string>(std::move(pNameEnc));
    dirtyFlag_[180] = true;
}
void Kunde::setNameEncToNull() noexcept
{
    nameEnc_.reset();
    dirtyFlag_[180] = true;
}

const std::string &Kunde::getValueOfInApsysTempEntsperrenCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(inApsysTempEntsperrenCd_)
        return *inApsysTempEntsperrenCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getInApsysTempEntsperrenCd() const noexcept
{
    return inApsysTempEntsperrenCd_;
}
void Kunde::setInApsysTempEntsperrenCd(const std::string &pInApsysTempEntsperrenCd) noexcept
{
    inApsysTempEntsperrenCd_ = std::make_shared<std::string>(pInApsysTempEntsperrenCd);
    dirtyFlag_[181] = true;
}
void Kunde::setInApsysTempEntsperrenCd(std::string &&pInApsysTempEntsperrenCd) noexcept
{
    inApsysTempEntsperrenCd_ = std::make_shared<std::string>(std::move(pInApsysTempEntsperrenCd));
    dirtyFlag_[181] = true;
}
void Kunde::setInApsysTempEntsperrenCdToNull() noexcept
{
    inApsysTempEntsperrenCd_.reset();
    dirtyFlag_[181] = true;
}

const std::string &Kunde::getValueOfInApsysTempEntspUserid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(inApsysTempEntspUserid_)
        return *inApsysTempEntspUserid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getInApsysTempEntspUserid() const noexcept
{
    return inApsysTempEntspUserid_;
}
void Kunde::setInApsysTempEntspUserid(const std::string &pInApsysTempEntspUserid) noexcept
{
    inApsysTempEntspUserid_ = std::make_shared<std::string>(pInApsysTempEntspUserid);
    dirtyFlag_[182] = true;
}
void Kunde::setInApsysTempEntspUserid(std::string &&pInApsysTempEntspUserid) noexcept
{
    inApsysTempEntspUserid_ = std::make_shared<std::string>(std::move(pInApsysTempEntspUserid));
    dirtyFlag_[182] = true;
}
void Kunde::setInApsysTempEntspUseridToNull() noexcept
{
    inApsysTempEntspUserid_.reset();
    dirtyFlag_[182] = true;
}

const ::trantor::Date &Kunde::getValueOfInApsysTempEntspDatum() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(inApsysTempEntspDatum_)
        return *inApsysTempEntspDatum_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getInApsysTempEntspDatum() const noexcept
{
    return inApsysTempEntspDatum_;
}
void Kunde::setInApsysTempEntspDatum(const ::trantor::Date &pInApsysTempEntspDatum) noexcept
{
    inApsysTempEntspDatum_ = std::make_shared<::trantor::Date>(pInApsysTempEntspDatum);
    dirtyFlag_[183] = true;
}
void Kunde::setInApsysTempEntspDatumToNull() noexcept
{
    inApsysTempEntspDatum_.reset();
    dirtyFlag_[183] = true;
}

const std::string &Kunde::getValueOfApsysCdregs() const noexcept
{
    const static std::string defaultValue = std::string();
    if(apsysCdregs_)
        return *apsysCdregs_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getApsysCdregs() const noexcept
{
    return apsysCdregs_;
}
void Kunde::setApsysCdregs(const std::string &pApsysCdregs) noexcept
{
    apsysCdregs_ = std::make_shared<std::string>(pApsysCdregs);
    dirtyFlag_[184] = true;
}
void Kunde::setApsysCdregs(std::string &&pApsysCdregs) noexcept
{
    apsysCdregs_ = std::make_shared<std::string>(std::move(pApsysCdregs));
    dirtyFlag_[184] = true;
}
void Kunde::setApsysCdregsToNull() noexcept
{
    apsysCdregs_.reset();
    dirtyFlag_[184] = true;
}

const std::string &Kunde::getValueOfRetentionOnHold() const noexcept
{
    const static std::string defaultValue = std::string();
    if(retentionOnHold_)
        return *retentionOnHold_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getRetentionOnHold() const noexcept
{
    return retentionOnHold_;
}
void Kunde::setRetentionOnHold(const std::string &pRetentionOnHold) noexcept
{
    retentionOnHold_ = std::make_shared<std::string>(pRetentionOnHold);
    dirtyFlag_[185] = true;
}
void Kunde::setRetentionOnHold(std::string &&pRetentionOnHold) noexcept
{
    retentionOnHold_ = std::make_shared<std::string>(std::move(pRetentionOnHold));
    dirtyFlag_[185] = true;
}
void Kunde::setRetentionOnHoldToNull() noexcept
{
    retentionOnHold_.reset();
    dirtyFlag_[185] = true;
}

const ::trantor::Date &Kunde::getValueOfRetentionOnHoldDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(retentionOnHoldDate_)
        return *retentionOnHoldDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getRetentionOnHoldDate() const noexcept
{
    return retentionOnHoldDate_;
}
void Kunde::setRetentionOnHoldDate(const ::trantor::Date &pRetentionOnHoldDate) noexcept
{
    retentionOnHoldDate_ = std::make_shared<::trantor::Date>(pRetentionOnHoldDate);
    dirtyFlag_[186] = true;
}
void Kunde::setRetentionOnHoldDateToNull() noexcept
{
    retentionOnHoldDate_.reset();
    dirtyFlag_[186] = true;
}

const std::string &Kunde::getValueOfRetentionOnHoldReason() const noexcept
{
    const static std::string defaultValue = std::string();
    if(retentionOnHoldReason_)
        return *retentionOnHoldReason_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getRetentionOnHoldReason() const noexcept
{
    return retentionOnHoldReason_;
}
void Kunde::setRetentionOnHoldReason(const std::string &pRetentionOnHoldReason) noexcept
{
    retentionOnHoldReason_ = std::make_shared<std::string>(pRetentionOnHoldReason);
    dirtyFlag_[187] = true;
}
void Kunde::setRetentionOnHoldReason(std::string &&pRetentionOnHoldReason) noexcept
{
    retentionOnHoldReason_ = std::make_shared<std::string>(std::move(pRetentionOnHoldReason));
    dirtyFlag_[187] = true;
}
void Kunde::setRetentionOnHoldReasonToNull() noexcept
{
    retentionOnHoldReason_.reset();
    dirtyFlag_[187] = true;
}

const std::string &Kunde::getValueOfLogicalErasure() const noexcept
{
    const static std::string defaultValue = std::string();
    if(logicalErasure_)
        return *logicalErasure_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getLogicalErasure() const noexcept
{
    return logicalErasure_;
}
void Kunde::setLogicalErasure(const std::string &pLogicalErasure) noexcept
{
    logicalErasure_ = std::make_shared<std::string>(pLogicalErasure);
    dirtyFlag_[188] = true;
}
void Kunde::setLogicalErasure(std::string &&pLogicalErasure) noexcept
{
    logicalErasure_ = std::make_shared<std::string>(std::move(pLogicalErasure));
    dirtyFlag_[188] = true;
}
void Kunde::setLogicalErasureToNull() noexcept
{
    logicalErasure_.reset();
    dirtyFlag_[188] = true;
}

const ::trantor::Date &Kunde::getValueOfLogicalErasureDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(logicalErasureDate_)
        return *logicalErasureDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Kunde::getLogicalErasureDate() const noexcept
{
    return logicalErasureDate_;
}
void Kunde::setLogicalErasureDate(const ::trantor::Date &pLogicalErasureDate) noexcept
{
    logicalErasureDate_ = std::make_shared<::trantor::Date>(pLogicalErasureDate);
    dirtyFlag_[189] = true;
}
void Kunde::setLogicalErasureDateToNull() noexcept
{
    logicalErasureDate_.reset();
    dirtyFlag_[189] = true;
}

const std::string &Kunde::getValueOfLogicalErasureReason() const noexcept
{
    const static std::string defaultValue = std::string();
    if(logicalErasureReason_)
        return *logicalErasureReason_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getLogicalErasureReason() const noexcept
{
    return logicalErasureReason_;
}
void Kunde::setLogicalErasureReason(const std::string &pLogicalErasureReason) noexcept
{
    logicalErasureReason_ = std::make_shared<std::string>(pLogicalErasureReason);
    dirtyFlag_[190] = true;
}
void Kunde::setLogicalErasureReason(std::string &&pLogicalErasureReason) noexcept
{
    logicalErasureReason_ = std::make_shared<std::string>(std::move(pLogicalErasureReason));
    dirtyFlag_[190] = true;
}
void Kunde::setLogicalErasureReasonToNull() noexcept
{
    logicalErasureReason_.reset();
    dirtyFlag_[190] = true;
}

const std::string &Kunde::getValueOfComplianceMinRiskCategory() const noexcept
{
    const static std::string defaultValue = std::string();
    if(complianceMinRiskCategory_)
        return *complianceMinRiskCategory_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getComplianceMinRiskCategory() const noexcept
{
    return complianceMinRiskCategory_;
}
void Kunde::setComplianceMinRiskCategory(const std::string &pComplianceMinRiskCategory) noexcept
{
    complianceMinRiskCategory_ = std::make_shared<std::string>(pComplianceMinRiskCategory);
    dirtyFlag_[191] = true;
}
void Kunde::setComplianceMinRiskCategory(std::string &&pComplianceMinRiskCategory) noexcept
{
    complianceMinRiskCategory_ = std::make_shared<std::string>(std::move(pComplianceMinRiskCategory));
    dirtyFlag_[191] = true;
}
void Kunde::setComplianceMinRiskCategoryToNull() noexcept
{
    complianceMinRiskCategory_.reset();
    dirtyFlag_[191] = true;
}

const std::string &Kunde::getValueOfComplianceMinRiskComment() const noexcept
{
    const static std::string defaultValue = std::string();
    if(complianceMinRiskComment_)
        return *complianceMinRiskComment_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getComplianceMinRiskComment() const noexcept
{
    return complianceMinRiskComment_;
}
void Kunde::setComplianceMinRiskComment(const std::string &pComplianceMinRiskComment) noexcept
{
    complianceMinRiskComment_ = std::make_shared<std::string>(pComplianceMinRiskComment);
    dirtyFlag_[192] = true;
}
void Kunde::setComplianceMinRiskComment(std::string &&pComplianceMinRiskComment) noexcept
{
    complianceMinRiskComment_ = std::make_shared<std::string>(std::move(pComplianceMinRiskComment));
    dirtyFlag_[192] = true;
}
void Kunde::setComplianceMinRiskCommentToNull() noexcept
{
    complianceMinRiskComment_.reset();
    dirtyFlag_[192] = true;
}

const std::string &Kunde::getValueOfClientStructureCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(clientStructureCd_)
        return *clientStructureCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getClientStructureCd() const noexcept
{
    return clientStructureCd_;
}
void Kunde::setClientStructureCd(const std::string &pClientStructureCd) noexcept
{
    clientStructureCd_ = std::make_shared<std::string>(pClientStructureCd);
    dirtyFlag_[193] = true;
}
void Kunde::setClientStructureCd(std::string &&pClientStructureCd) noexcept
{
    clientStructureCd_ = std::make_shared<std::string>(std::move(pClientStructureCd));
    dirtyFlag_[193] = true;
}
void Kunde::setClientStructureCdToNull() noexcept
{
    clientStructureCd_.reset();
    dirtyFlag_[193] = true;
}

const std::string &Kunde::getValueOfClientSubstructureCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(clientSubstructureCd_)
        return *clientSubstructureCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Kunde::getClientSubstructureCd() const noexcept
{
    return clientSubstructureCd_;
}
void Kunde::setClientSubstructureCd(const std::string &pClientSubstructureCd) noexcept
{
    clientSubstructureCd_ = std::make_shared<std::string>(pClientSubstructureCd);
    dirtyFlag_[194] = true;
}
void Kunde::setClientSubstructureCd(std::string &&pClientSubstructureCd) noexcept
{
    clientSubstructureCd_ = std::make_shared<std::string>(std::move(pClientSubstructureCd));
    dirtyFlag_[194] = true;
}
void Kunde::setClientSubstructureCdToNull() noexcept
{
    clientSubstructureCd_.reset();
    dirtyFlag_[194] = true;
}

void Kunde::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Kunde::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "KUNDENID",
        "BEZEICHNUNG",
        "KUNDESEIT",
        "VERTRAGSPARTEI_CD",
        "LOESCH_CD",
        "LOESCHDATUM",
        "CRTDATUM",
        "CRTUSER",
        "MUTDATUM",
        "MUTUSER",
        "PSEUDOACCOUNT_CD",
        "KUNDEBESUCH",
        "BEZEICHNUNGVERTRAG",
        "PSEUDONYM",
        "RECHTSDOMIZIL_CD",
        "KORRESPONDENZSPRACH_CD",
        "MIT_PROFIL_CD",
        "GEMEINSCHAFTSKONTO_CD",
        "PIN",
        "VERWENDUNGSZWECK",
        "IDENTIFIKATIONSART_CD",
        "VERMOEGENSURSPRUNG_CD",
        "VERMOEGENSURSPRUNG",
        "GELDVONKONTO",
        "BISHERIGEBETREUUNG",
        "BISHERIGEBETREUUNGSEIT",
        "MANUALOPEN_CD",
        "EIN_VERMOEGEN_CD",
        "REGIONZAHLUNG_CD",
        "EIN_VERMOEGENART_CD",
        "SPEZ_WUENSCHE_CD",
        "MANAGER_CD",
        "RISKINDEX",
        "RISKINDEX_GUELTISEIT",
        "RISKINDEX_LETZTEBERECHNUNG",
        "KONTOEROEFFNUNGSART_CD",
        "RISKINDEXBERECHNEN_CD",
        "KUNDENNATUR_CD",
        "RISIKOKATEGORIE_CD",
        "PEP_CD",
        "SPEZIALKATEGORIE_CD",
        "NATURE_CD",
        "NAME",
        "LEDIGERNAME",
        "VORNAME",
        "CDPARTC",
        "NATIONALITAET_CD",
        "RISIKOLAND_CD",
        "PERSOENLICHBEKANNT_CD",
        "RISIKOTAETIGKEIT_CD",
        "STEUERDOMIZIL_CD",
        "EU_TAXSTATUS_CD",
        "TIN",
        "APSYS_CDROLPERSI",
        "VERTRAGSPRACH_CD",
        "VERMOEGENSKATEGORIE_IHAG_CD",
        "APSYS_INTISHS",
        "APSYS_INTILGS",
        "GESAMTVERMOEGEN_CD",
        "COMPLIANCE_OK_CD",
        "COMPLIANCE_OK_BEMERKUNG",
        "COMPLIANCE_OK_DATUM",
        "COMPLIANCE_OK_USERID",
        "EIN_VERMOEGEN",
        "SEGMENTIERUNG_CD",
        "AKTID",
        "VALIDID",
        "VALID_CD",
        "VALIDUSER",
        "ENC_SALT",
        "BEZEICHNUNG_ENC",
        "APSYS_CDMOTIFPARTS",
        "APSYS_CDINDUS0S",
        "APSYS_FLAGPREAVISEXEC",
        "APSYS_CDAVIOBISPECC",
        "APSYS_FLAGHISPERC",
        "APSYS_REPAMANUC",
        "APSYS_PERDEVCALC",
        "APSYS_FLAGUKTAXC",
        "APSYS_CDNOGAS",
        "APSYS_STATFISCC",
        "APSYS_FLAGFWTI",
        "APSYS_FLAGFWTUKNRSDI",
        "APSYS_FLAGFWTTAXSPEGEI",
        "APSYS_CDFWTOPTREGULFISCANCC",
        "APSYS_CDFWTSTATREGULFISCANCC",
        "APSYS_CDFWTOPTREGULFISCFUTC",
        "STEUERLAND_ABGST_CD",
        "APSYS_CDNATURES",
        "APSYS_SHNAS",
        "APSYS_CDPYHQDOMIS",
        "APSYS_CDPERMI",
        "APSYS_IDRCIS",
        "APSYS_FLAGISTTC",
        "APSYS_DEVEVALS",
        "APSYS_IDSTRUCS",
        "APSYS_SUIVIAGTS",
        "APSYS_CDINDUSCSSFS",
        "APSYS_CDINDUSBLUXS",
        "APSYS_CDINDUSSBUBA",
        "APSYS_CDINDUSSBNS",
        "APSYS_GRMTEVALS",
        "APSYS_IDPOCS",
        "APSYS_INFO",
        "APSYS_IDENTS",
        "APSYS_STATUS_OPEC",
        "APSYS_ERRI",
        "NATIONALITAET2_CD",
        "NATIONALITAET3_CD",
        "VERMOEGENSURSPRUNG2_CD",
        "VERMOEGENSURSPRUNG2",
        "APPROVAL_STEP1_CD",
        "APPROVAL_STEP1_USER",
        "APPROVAL_STEP1_DATE",
        "APPROVAL_STEP2_CD",
        "APPROVAL_STEP2_USER",
        "APPROVAL_STEP2_DATE",
        "APPROVAL_STEP3_CD",
        "APPROVAL_STEP3_USER",
        "APPROVAL_STEP3_DATE",
        "APPROVAL_STEP4_CD",
        "APPROVAL_STEP4_USER",
        "APPROVAL_STEP4_DATE",
        "APPROVAL_STEP5_CD",
        "APPROVAL_STEP5_USER",
        "APPROVAL_STEP5_DATE",
        "APPROVAL_STEP1_BEM",
        "APPROVAL_STEP2_BEM",
        "APPROVAL_STEP3_BEM",
        "APPROVAL_STEP4_BEM",
        "APPROVAL_STEP5_BEM",
        "APPROVAL_STEP1_ASSES_CD",
        "APPROVAL_STEP2_ASSES_CD",
        "APPROVAL_STEP3_ASSES_CD",
        "APPROVAL_STEP4_ASSES_CD",
        "APPROVAL_STEP5_ASSES_CD",
        "APPROVAL_STATUS_CD",
        "CLIENT_STATUS_CD",
        "DISCHARGE_ORDERS_CD",
        "PRINT_SUMMARY_HOLDMAIL_ONLY_CD",
        "EBANKING_CONTRACT_CD",
        "EBANKING_CONTRACT_LANGUAGE_CD",
        "APSYS_DTECHDIARYL",
        "APSYS_MOTDIARYS",
        "APSYS_IDTYPCLIIRSS",
        "APSYS_IDRCIQIS",
        "APSYS_IDRCIFATCAS",
        "MAILING_TARIF_TYPE_CD",
        "REGISTERED_CD",
        "REGISTERED_MAIL_CD",
        "APSYS_NBPERSCPARTIEL",
        "ASSET_VALUE_TIER_CD",
        "RELATIONSHIP_TYPE_AML_CD",
        "CB_ASSET_VALUE_TIER_CD",
        "APPROVAL_SCORE",
        "APPROVAL_SCORE_STEPS",
        "APSYS_DTDEBPARTL",
        "APSYS_DTFINPARTL",
        "APSYS_CDMOTIFCLOS",
        "APSYS_CDNATURECPARTIEEMIRC",
        "APSYS_FLAGOTHEREMIRC",
        "APSYS_CDINDUSEMIRS",
        "OPENED_IN_APSYS_DATE",
        "APSYS_CDNATURECPARTIEFMIAC",
        "EBANKING_CLOSED_CD",
        "EBANKING_CLOSINGDATE",
        "KYC_REVIEW_PROCESS_START_DATE",
        "REMARKS",
        "TRANSACTION_BL_COUNTRY_CD",
        "CLIENTGROUP_CD",
        "RISKINDEX_CALC",
        "LAST_CALC_CRI_MUTDATUM",
        "RISIKOKATEGORIE_CALC_CD",
        "RISKINDEX_GROUP",
        "EST_AMOUNT_REM_WITH_MUTDATUM",
        "GESAMTVERMOEGEN_MUTDATUM",
        "TRANSACT_BL_COUNTRY_MUTDATUM",
        "ACCOUNTPURPOSE_MUTDATUM",
        "APSYS_FLAGDELDATAPERSI",
        "APSYS_DTWAITDELDATAPERSL",
        "NAME_ENC",
        "IN_APSYS_TEMP_ENTSPERREN_CD",
        "IN_APSYS_TEMP_ENTSP_USERID",
        "IN_APSYS_TEMP_ENTSP_DATUM",
        "APSYS_CDREGS",
        "RETENTION_ON_HOLD",
        "RETENTION_ON_HOLD_DATE",
        "RETENTION_ON_HOLD_REASON",
        "LOGICAL_ERASURE",
        "LOGICAL_ERASURE_DATE",
        "LOGICAL_ERASURE_REASON",
        "COMPLIANCE_MIN_RISK_CATEGORY",
        "COMPLIANCE_MIN_RISK_COMMENT",
        "CLIENT_STRUCTURE_CD",
        "CLIENT_SUBSTRUCTURE_CD"
    };
    return inCols;
}

void Kunde::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getKundenid())
        {
            binder << getValueOfKundenid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getBezeichnung())
        {
            binder << getValueOfBezeichnung();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getKundeseit())
        {
            binder << getValueOfKundeseit();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getVertragsparteiCd())
        {
            binder << getValueOfVertragsparteiCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getLoeschCd())
        {
            binder << getValueOfLoeschCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getLoeschdatum())
        {
            binder << getValueOfLoeschdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCrtdatum())
        {
            binder << getValueOfCrtdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCrtuser())
        {
            binder << getValueOfCrtuser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getMutdatum())
        {
            binder << getValueOfMutdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getMutuser())
        {
            binder << getValueOfMutuser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getPseudoaccountCd())
        {
            binder << getValueOfPseudoaccountCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getKundebesuch())
        {
            binder << getValueOfKundebesuch();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getBezeichnungvertrag())
        {
            binder << getValueOfBezeichnungvertrag();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getPseudonym())
        {
            binder << getValueOfPseudonym();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getRechtsdomizilCd())
        {
            binder << getValueOfRechtsdomizilCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getKorrespondenzsprachCd())
        {
            binder << getValueOfKorrespondenzsprachCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getMitProfilCd())
        {
            binder << getValueOfMitProfilCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getGemeinschaftskontoCd())
        {
            binder << getValueOfGemeinschaftskontoCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getPin())
        {
            binder << getValueOfPin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getVerwendungszweck())
        {
            binder << getValueOfVerwendungszweck();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getIdentifikationsartCd())
        {
            binder << getValueOfIdentifikationsartCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getVermoegensursprungCd())
        {
            binder << getValueOfVermoegensursprungCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getVermoegensursprung())
        {
            binder << getValueOfVermoegensursprung();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getGeldvonkonto())
        {
            binder << getValueOfGeldvonkonto();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getBisherigebetreuung())
        {
            binder << getValueOfBisherigebetreuung();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getBisherigebetreuungseit())
        {
            binder << getValueOfBisherigebetreuungseit();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[26])
    {
        if(getManualopenCd())
        {
            binder << getValueOfManualopenCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[27])
    {
        if(getEinVermoegenCd())
        {
            binder << getValueOfEinVermoegenCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[28])
    {
        if(getRegionzahlungCd())
        {
            binder << getValueOfRegionzahlungCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[29])
    {
        if(getEinVermoegenartCd())
        {
            binder << getValueOfEinVermoegenartCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[30])
    {
        if(getSpezWuenscheCd())
        {
            binder << getValueOfSpezWuenscheCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[31])
    {
        if(getManagerCd())
        {
            binder << getValueOfManagerCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[32])
    {
        if(getRiskindex())
        {
            binder << getValueOfRiskindex();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[33])
    {
        if(getRiskindexGueltiseit())
        {
            binder << getValueOfRiskindexGueltiseit();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[34])
    {
        if(getRiskindexLetzteberechnung())
        {
            binder << getValueOfRiskindexLetzteberechnung();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[35])
    {
        if(getKontoeroeffnungsartCd())
        {
            binder << getValueOfKontoeroeffnungsartCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[36])
    {
        if(getRiskindexberechnenCd())
        {
            binder << getValueOfRiskindexberechnenCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[37])
    {
        if(getKundennaturCd())
        {
            binder << getValueOfKundennaturCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[38])
    {
        if(getRisikokategorieCd())
        {
            binder << getValueOfRisikokategorieCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[39])
    {
        if(getPepCd())
        {
            binder << getValueOfPepCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[40])
    {
        if(getSpezialkategorieCd())
        {
            binder << getValueOfSpezialkategorieCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[41])
    {
        if(getNatureCd())
        {
            binder << getValueOfNatureCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[42])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[43])
    {
        if(getLedigername())
        {
            binder << getValueOfLedigername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[44])
    {
        if(getVorname())
        {
            binder << getValueOfVorname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[45])
    {
        if(getCdpartc())
        {
            binder << getValueOfCdpartc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[46])
    {
        if(getNationalitaetCd())
        {
            binder << getValueOfNationalitaetCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[47])
    {
        if(getRisikolandCd())
        {
            binder << getValueOfRisikolandCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[48])
    {
        if(getPersoenlichbekanntCd())
        {
            binder << getValueOfPersoenlichbekanntCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[49])
    {
        if(getRisikotaetigkeitCd())
        {
            binder << getValueOfRisikotaetigkeitCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[50])
    {
        if(getSteuerdomizilCd())
        {
            binder << getValueOfSteuerdomizilCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[51])
    {
        if(getEuTaxstatusCd())
        {
            binder << getValueOfEuTaxstatusCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[52])
    {
        if(getTin())
        {
            binder << getValueOfTin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[53])
    {
        if(getApsysCdrolpersi())
        {
            binder << getValueOfApsysCdrolpersi();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[54])
    {
        if(getVertragsprachCd())
        {
            binder << getValueOfVertragsprachCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[55])
    {
        if(getVermoegenskategorieIhagCd())
        {
            binder << getValueOfVermoegenskategorieIhagCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[56])
    {
        if(getApsysIntishs())
        {
            binder << getValueOfApsysIntishs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[57])
    {
        if(getApsysIntilgs())
        {
            binder << getValueOfApsysIntilgs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[58])
    {
        if(getGesamtvermoegenCd())
        {
            binder << getValueOfGesamtvermoegenCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[59])
    {
        if(getComplianceOkCd())
        {
            binder << getValueOfComplianceOkCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[60])
    {
        if(getComplianceOkBemerkung())
        {
            binder << getValueOfComplianceOkBemerkung();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[61])
    {
        if(getComplianceOkDatum())
        {
            binder << getValueOfComplianceOkDatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[62])
    {
        if(getComplianceOkUserid())
        {
            binder << getValueOfComplianceOkUserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[63])
    {
        if(getEinVermoegen())
        {
            binder << getValueOfEinVermoegen();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[64])
    {
        if(getSegmentierungCd())
        {
            binder << getValueOfSegmentierungCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[65])
    {
        if(getAktid())
        {
            binder << getValueOfAktid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[66])
    {
        if(getValidid())
        {
            binder << getValueOfValidid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[67])
    {
        if(getValidCd())
        {
            binder << getValueOfValidCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[68])
    {
        if(getValiduser())
        {
            binder << getValueOfValiduser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[69])
    {
        if(getEncSalt())
        {
            binder << getValueOfEncSalt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[70])
    {
        if(getBezeichnungEnc())
        {
            binder << getValueOfBezeichnungEnc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[71])
    {
        if(getApsysCdmotifparts())
        {
            binder << getValueOfApsysCdmotifparts();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[72])
    {
        if(getApsysCdindus0s())
        {
            binder << getValueOfApsysCdindus0s();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[73])
    {
        if(getApsysFlagpreavisexec())
        {
            binder << getValueOfApsysFlagpreavisexec();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[74])
    {
        if(getApsysCdaviobispecc())
        {
            binder << getValueOfApsysCdaviobispecc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[75])
    {
        if(getApsysFlaghisperc())
        {
            binder << getValueOfApsysFlaghisperc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[76])
    {
        if(getApsysRepamanuc())
        {
            binder << getValueOfApsysRepamanuc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[77])
    {
        if(getApsysPerdevcalc())
        {
            binder << getValueOfApsysPerdevcalc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[78])
    {
        if(getApsysFlaguktaxc())
        {
            binder << getValueOfApsysFlaguktaxc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[79])
    {
        if(getApsysCdnogas())
        {
            binder << getValueOfApsysCdnogas();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[80])
    {
        if(getApsysStatfiscc())
        {
            binder << getValueOfApsysStatfiscc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[81])
    {
        if(getApsysFlagfwti())
        {
            binder << getValueOfApsysFlagfwti();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[82])
    {
        if(getApsysFlagfwtuknrsdi())
        {
            binder << getValueOfApsysFlagfwtuknrsdi();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[83])
    {
        if(getApsysFlagfwttaxspegei())
        {
            binder << getValueOfApsysFlagfwttaxspegei();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[84])
    {
        if(getApsysCdfwtoptregulfiscancc())
        {
            binder << getValueOfApsysCdfwtoptregulfiscancc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[85])
    {
        if(getApsysCdfwtstatregulfiscancc())
        {
            binder << getValueOfApsysCdfwtstatregulfiscancc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[86])
    {
        if(getApsysCdfwtoptregulfiscfutc())
        {
            binder << getValueOfApsysCdfwtoptregulfiscfutc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[87])
    {
        if(getSteuerlandAbgstCd())
        {
            binder << getValueOfSteuerlandAbgstCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[88])
    {
        if(getApsysCdnatures())
        {
            binder << getValueOfApsysCdnatures();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[89])
    {
        if(getApsysShnas())
        {
            binder << getValueOfApsysShnas();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[90])
    {
        if(getApsysCdpyhqdomis())
        {
            binder << getValueOfApsysCdpyhqdomis();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[91])
    {
        if(getApsysCdpermi())
        {
            binder << getValueOfApsysCdpermi();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[92])
    {
        if(getApsysIdrcis())
        {
            binder << getValueOfApsysIdrcis();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[93])
    {
        if(getApsysFlagisttc())
        {
            binder << getValueOfApsysFlagisttc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[94])
    {
        if(getApsysDevevals())
        {
            binder << getValueOfApsysDevevals();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[95])
    {
        if(getApsysIdstrucs())
        {
            binder << getValueOfApsysIdstrucs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[96])
    {
        if(getApsysSuiviagts())
        {
            binder << getValueOfApsysSuiviagts();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[97])
    {
        if(getApsysCdinduscssfs())
        {
            binder << getValueOfApsysCdinduscssfs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[98])
    {
        if(getApsysCdindusbluxs())
        {
            binder << getValueOfApsysCdindusbluxs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[99])
    {
        if(getApsysCdindussbuba())
        {
            binder << getValueOfApsysCdindussbuba();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[100])
    {
        if(getApsysCdindussbns())
        {
            binder << getValueOfApsysCdindussbns();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[101])
    {
        if(getApsysGrmtevals())
        {
            binder << getValueOfApsysGrmtevals();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[102])
    {
        if(getApsysIdpocs())
        {
            binder << getValueOfApsysIdpocs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[103])
    {
        if(getApsysInfo())
        {
            binder << getValueOfApsysInfo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[104])
    {
        if(getApsysIdents())
        {
            binder << getValueOfApsysIdents();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[105])
    {
        if(getApsysStatusOpec())
        {
            binder << getValueOfApsysStatusOpec();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[106])
    {
        if(getApsysErri())
        {
            binder << getValueOfApsysErri();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[107])
    {
        if(getNationalitaet2Cd())
        {
            binder << getValueOfNationalitaet2Cd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[108])
    {
        if(getNationalitaet3Cd())
        {
            binder << getValueOfNationalitaet3Cd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[109])
    {
        if(getVermoegensursprung2Cd())
        {
            binder << getValueOfVermoegensursprung2Cd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[110])
    {
        if(getVermoegensursprung2())
        {
            binder << getValueOfVermoegensursprung2();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[111])
    {
        if(getApprovalStep1Cd())
        {
            binder << getValueOfApprovalStep1Cd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[112])
    {
        if(getApprovalStep1User())
        {
            binder << getValueOfApprovalStep1User();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[113])
    {
        if(getApprovalStep1Date())
        {
            binder << getValueOfApprovalStep1Date();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[114])
    {
        if(getApprovalStep2Cd())
        {
            binder << getValueOfApprovalStep2Cd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[115])
    {
        if(getApprovalStep2User())
        {
            binder << getValueOfApprovalStep2User();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[116])
    {
        if(getApprovalStep2Date())
        {
            binder << getValueOfApprovalStep2Date();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[117])
    {
        if(getApprovalStep3Cd())
        {
            binder << getValueOfApprovalStep3Cd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[118])
    {
        if(getApprovalStep3User())
        {
            binder << getValueOfApprovalStep3User();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[119])
    {
        if(getApprovalStep3Date())
        {
            binder << getValueOfApprovalStep3Date();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[120])
    {
        if(getApprovalStep4Cd())
        {
            binder << getValueOfApprovalStep4Cd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[121])
    {
        if(getApprovalStep4User())
        {
            binder << getValueOfApprovalStep4User();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[122])
    {
        if(getApprovalStep4Date())
        {
            binder << getValueOfApprovalStep4Date();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[123])
    {
        if(getApprovalStep5Cd())
        {
            binder << getValueOfApprovalStep5Cd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[124])
    {
        if(getApprovalStep5User())
        {
            binder << getValueOfApprovalStep5User();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[125])
    {
        if(getApprovalStep5Date())
        {
            binder << getValueOfApprovalStep5Date();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[126])
    {
        if(getApprovalStep1Bem())
        {
            binder << getValueOfApprovalStep1Bem();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[127])
    {
        if(getApprovalStep2Bem())
        {
            binder << getValueOfApprovalStep2Bem();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[128])
    {
        if(getApprovalStep3Bem())
        {
            binder << getValueOfApprovalStep3Bem();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[129])
    {
        if(getApprovalStep4Bem())
        {
            binder << getValueOfApprovalStep4Bem();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[130])
    {
        if(getApprovalStep5Bem())
        {
            binder << getValueOfApprovalStep5Bem();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[131])
    {
        if(getApprovalStep1AssesCd())
        {
            binder << getValueOfApprovalStep1AssesCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[132])
    {
        if(getApprovalStep2AssesCd())
        {
            binder << getValueOfApprovalStep2AssesCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[133])
    {
        if(getApprovalStep3AssesCd())
        {
            binder << getValueOfApprovalStep3AssesCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[134])
    {
        if(getApprovalStep4AssesCd())
        {
            binder << getValueOfApprovalStep4AssesCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[135])
    {
        if(getApprovalStep5AssesCd())
        {
            binder << getValueOfApprovalStep5AssesCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[136])
    {
        if(getApprovalStatusCd())
        {
            binder << getValueOfApprovalStatusCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[137])
    {
        if(getClientStatusCd())
        {
            binder << getValueOfClientStatusCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[138])
    {
        if(getDischargeOrdersCd())
        {
            binder << getValueOfDischargeOrdersCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[139])
    {
        if(getPrintSummaryHoldmailOnlyCd())
        {
            binder << getValueOfPrintSummaryHoldmailOnlyCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[140])
    {
        if(getEbankingContractCd())
        {
            binder << getValueOfEbankingContractCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[141])
    {
        if(getEbankingContractLanguageCd())
        {
            binder << getValueOfEbankingContractLanguageCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[142])
    {
        if(getApsysDtechdiaryl())
        {
            binder << getValueOfApsysDtechdiaryl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[143])
    {
        if(getApsysMotdiarys())
        {
            binder << getValueOfApsysMotdiarys();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[144])
    {
        if(getApsysIdtypcliirss())
        {
            binder << getValueOfApsysIdtypcliirss();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[145])
    {
        if(getApsysIdrciqis())
        {
            binder << getValueOfApsysIdrciqis();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[146])
    {
        if(getApsysIdrcifatcas())
        {
            binder << getValueOfApsysIdrcifatcas();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[147])
    {
        if(getMailingTarifTypeCd())
        {
            binder << getValueOfMailingTarifTypeCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[148])
    {
        if(getRegisteredCd())
        {
            binder << getValueOfRegisteredCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[149])
    {
        if(getRegisteredMailCd())
        {
            binder << getValueOfRegisteredMailCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[150])
    {
        if(getApsysNbperscpartiel())
        {
            binder << getValueOfApsysNbperscpartiel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[151])
    {
        if(getAssetValueTierCd())
        {
            binder << getValueOfAssetValueTierCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[152])
    {
        if(getRelationshipTypeAmlCd())
        {
            binder << getValueOfRelationshipTypeAmlCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[153])
    {
        if(getCbAssetValueTierCd())
        {
            binder << getValueOfCbAssetValueTierCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[154])
    {
        if(getApprovalScore())
        {
            binder << getValueOfApprovalScore();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[155])
    {
        if(getApprovalScoreSteps())
        {
            binder << getValueOfApprovalScoreSteps();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[156])
    {
        if(getApsysDtdebpartl())
        {
            binder << getValueOfApsysDtdebpartl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[157])
    {
        if(getApsysDtfinpartl())
        {
            binder << getValueOfApsysDtfinpartl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[158])
    {
        if(getApsysCdmotifclos())
        {
            binder << getValueOfApsysCdmotifclos();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[159])
    {
        if(getApsysCdnaturecpartieemirc())
        {
            binder << getValueOfApsysCdnaturecpartieemirc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[160])
    {
        if(getApsysFlagotheremirc())
        {
            binder << getValueOfApsysFlagotheremirc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[161])
    {
        if(getApsysCdindusemirs())
        {
            binder << getValueOfApsysCdindusemirs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[162])
    {
        if(getOpenedInApsysDate())
        {
            binder << getValueOfOpenedInApsysDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[163])
    {
        if(getApsysCdnaturecpartiefmiac())
        {
            binder << getValueOfApsysCdnaturecpartiefmiac();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[164])
    {
        if(getEbankingClosedCd())
        {
            binder << getValueOfEbankingClosedCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[165])
    {
        if(getEbankingClosingdate())
        {
            binder << getValueOfEbankingClosingdate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[166])
    {
        if(getKycReviewProcessStartDate())
        {
            binder << getValueOfKycReviewProcessStartDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[167])
    {
        if(getRemarks())
        {
            binder << getValueOfRemarks();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[168])
    {
        if(getTransactionBlCountryCd())
        {
            binder << getValueOfTransactionBlCountryCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[169])
    {
        if(getClientgroupCd())
        {
            binder << getValueOfClientgroupCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[170])
    {
        if(getRiskindexCalc())
        {
            binder << getValueOfRiskindexCalc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[171])
    {
        if(getLastCalcCriMutdatum())
        {
            binder << getValueOfLastCalcCriMutdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[172])
    {
        if(getRisikokategorieCalcCd())
        {
            binder << getValueOfRisikokategorieCalcCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[173])
    {
        if(getRiskindexGroup())
        {
            binder << getValueOfRiskindexGroup();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[174])
    {
        if(getEstAmountRemWithMutdatum())
        {
            binder << getValueOfEstAmountRemWithMutdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[175])
    {
        if(getGesamtvermoegenMutdatum())
        {
            binder << getValueOfGesamtvermoegenMutdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[176])
    {
        if(getTransactBlCountryMutdatum())
        {
            binder << getValueOfTransactBlCountryMutdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[177])
    {
        if(getAccountpurposeMutdatum())
        {
            binder << getValueOfAccountpurposeMutdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[178])
    {
        if(getApsysFlagdeldatapersi())
        {
            binder << getValueOfApsysFlagdeldatapersi();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[179])
    {
        if(getApsysDtwaitdeldatapersl())
        {
            binder << getValueOfApsysDtwaitdeldatapersl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[180])
    {
        if(getNameEnc())
        {
            binder << getValueOfNameEnc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[181])
    {
        if(getInApsysTempEntsperrenCd())
        {
            binder << getValueOfInApsysTempEntsperrenCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[182])
    {
        if(getInApsysTempEntspUserid())
        {
            binder << getValueOfInApsysTempEntspUserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[183])
    {
        if(getInApsysTempEntspDatum())
        {
            binder << getValueOfInApsysTempEntspDatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[184])
    {
        if(getApsysCdregs())
        {
            binder << getValueOfApsysCdregs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[185])
    {
        if(getRetentionOnHold())
        {
            binder << getValueOfRetentionOnHold();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[186])
    {
        if(getRetentionOnHoldDate())
        {
            binder << getValueOfRetentionOnHoldDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[187])
    {
        if(getRetentionOnHoldReason())
        {
            binder << getValueOfRetentionOnHoldReason();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[188])
    {
        if(getLogicalErasure())
        {
            binder << getValueOfLogicalErasure();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[189])
    {
        if(getLogicalErasureDate())
        {
            binder << getValueOfLogicalErasureDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[190])
    {
        if(getLogicalErasureReason())
        {
            binder << getValueOfLogicalErasureReason();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[191])
    {
        if(getComplianceMinRiskCategory())
        {
            binder << getValueOfComplianceMinRiskCategory();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[192])
    {
        if(getComplianceMinRiskComment())
        {
            binder << getValueOfComplianceMinRiskComment();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[193])
    {
        if(getClientStructureCd())
        {
            binder << getValueOfClientStructureCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[194])
    {
        if(getClientSubstructureCd())
        {
            binder << getValueOfClientSubstructureCd();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Kunde::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    if(dirtyFlag_[20])
    {
        ret.push_back(getColumnName(20));
    }
    if(dirtyFlag_[21])
    {
        ret.push_back(getColumnName(21));
    }
    if(dirtyFlag_[22])
    {
        ret.push_back(getColumnName(22));
    }
    if(dirtyFlag_[23])
    {
        ret.push_back(getColumnName(23));
    }
    if(dirtyFlag_[24])
    {
        ret.push_back(getColumnName(24));
    }
    if(dirtyFlag_[25])
    {
        ret.push_back(getColumnName(25));
    }
    if(dirtyFlag_[26])
    {
        ret.push_back(getColumnName(26));
    }
    if(dirtyFlag_[27])
    {
        ret.push_back(getColumnName(27));
    }
    if(dirtyFlag_[28])
    {
        ret.push_back(getColumnName(28));
    }
    if(dirtyFlag_[29])
    {
        ret.push_back(getColumnName(29));
    }
    if(dirtyFlag_[30])
    {
        ret.push_back(getColumnName(30));
    }
    if(dirtyFlag_[31])
    {
        ret.push_back(getColumnName(31));
    }
    if(dirtyFlag_[32])
    {
        ret.push_back(getColumnName(32));
    }
    if(dirtyFlag_[33])
    {
        ret.push_back(getColumnName(33));
    }
    if(dirtyFlag_[34])
    {
        ret.push_back(getColumnName(34));
    }
    if(dirtyFlag_[35])
    {
        ret.push_back(getColumnName(35));
    }
    if(dirtyFlag_[36])
    {
        ret.push_back(getColumnName(36));
    }
    if(dirtyFlag_[37])
    {
        ret.push_back(getColumnName(37));
    }
    if(dirtyFlag_[38])
    {
        ret.push_back(getColumnName(38));
    }
    if(dirtyFlag_[39])
    {
        ret.push_back(getColumnName(39));
    }
    if(dirtyFlag_[40])
    {
        ret.push_back(getColumnName(40));
    }
    if(dirtyFlag_[41])
    {
        ret.push_back(getColumnName(41));
    }
    if(dirtyFlag_[42])
    {
        ret.push_back(getColumnName(42));
    }
    if(dirtyFlag_[43])
    {
        ret.push_back(getColumnName(43));
    }
    if(dirtyFlag_[44])
    {
        ret.push_back(getColumnName(44));
    }
    if(dirtyFlag_[45])
    {
        ret.push_back(getColumnName(45));
    }
    if(dirtyFlag_[46])
    {
        ret.push_back(getColumnName(46));
    }
    if(dirtyFlag_[47])
    {
        ret.push_back(getColumnName(47));
    }
    if(dirtyFlag_[48])
    {
        ret.push_back(getColumnName(48));
    }
    if(dirtyFlag_[49])
    {
        ret.push_back(getColumnName(49));
    }
    if(dirtyFlag_[50])
    {
        ret.push_back(getColumnName(50));
    }
    if(dirtyFlag_[51])
    {
        ret.push_back(getColumnName(51));
    }
    if(dirtyFlag_[52])
    {
        ret.push_back(getColumnName(52));
    }
    if(dirtyFlag_[53])
    {
        ret.push_back(getColumnName(53));
    }
    if(dirtyFlag_[54])
    {
        ret.push_back(getColumnName(54));
    }
    if(dirtyFlag_[55])
    {
        ret.push_back(getColumnName(55));
    }
    if(dirtyFlag_[56])
    {
        ret.push_back(getColumnName(56));
    }
    if(dirtyFlag_[57])
    {
        ret.push_back(getColumnName(57));
    }
    if(dirtyFlag_[58])
    {
        ret.push_back(getColumnName(58));
    }
    if(dirtyFlag_[59])
    {
        ret.push_back(getColumnName(59));
    }
    if(dirtyFlag_[60])
    {
        ret.push_back(getColumnName(60));
    }
    if(dirtyFlag_[61])
    {
        ret.push_back(getColumnName(61));
    }
    if(dirtyFlag_[62])
    {
        ret.push_back(getColumnName(62));
    }
    if(dirtyFlag_[63])
    {
        ret.push_back(getColumnName(63));
    }
    if(dirtyFlag_[64])
    {
        ret.push_back(getColumnName(64));
    }
    if(dirtyFlag_[65])
    {
        ret.push_back(getColumnName(65));
    }
    if(dirtyFlag_[66])
    {
        ret.push_back(getColumnName(66));
    }
    if(dirtyFlag_[67])
    {
        ret.push_back(getColumnName(67));
    }
    if(dirtyFlag_[68])
    {
        ret.push_back(getColumnName(68));
    }
    if(dirtyFlag_[69])
    {
        ret.push_back(getColumnName(69));
    }
    if(dirtyFlag_[70])
    {
        ret.push_back(getColumnName(70));
    }
    if(dirtyFlag_[71])
    {
        ret.push_back(getColumnName(71));
    }
    if(dirtyFlag_[72])
    {
        ret.push_back(getColumnName(72));
    }
    if(dirtyFlag_[73])
    {
        ret.push_back(getColumnName(73));
    }
    if(dirtyFlag_[74])
    {
        ret.push_back(getColumnName(74));
    }
    if(dirtyFlag_[75])
    {
        ret.push_back(getColumnName(75));
    }
    if(dirtyFlag_[76])
    {
        ret.push_back(getColumnName(76));
    }
    if(dirtyFlag_[77])
    {
        ret.push_back(getColumnName(77));
    }
    if(dirtyFlag_[78])
    {
        ret.push_back(getColumnName(78));
    }
    if(dirtyFlag_[79])
    {
        ret.push_back(getColumnName(79));
    }
    if(dirtyFlag_[80])
    {
        ret.push_back(getColumnName(80));
    }
    if(dirtyFlag_[81])
    {
        ret.push_back(getColumnName(81));
    }
    if(dirtyFlag_[82])
    {
        ret.push_back(getColumnName(82));
    }
    if(dirtyFlag_[83])
    {
        ret.push_back(getColumnName(83));
    }
    if(dirtyFlag_[84])
    {
        ret.push_back(getColumnName(84));
    }
    if(dirtyFlag_[85])
    {
        ret.push_back(getColumnName(85));
    }
    if(dirtyFlag_[86])
    {
        ret.push_back(getColumnName(86));
    }
    if(dirtyFlag_[87])
    {
        ret.push_back(getColumnName(87));
    }
    if(dirtyFlag_[88])
    {
        ret.push_back(getColumnName(88));
    }
    if(dirtyFlag_[89])
    {
        ret.push_back(getColumnName(89));
    }
    if(dirtyFlag_[90])
    {
        ret.push_back(getColumnName(90));
    }
    if(dirtyFlag_[91])
    {
        ret.push_back(getColumnName(91));
    }
    if(dirtyFlag_[92])
    {
        ret.push_back(getColumnName(92));
    }
    if(dirtyFlag_[93])
    {
        ret.push_back(getColumnName(93));
    }
    if(dirtyFlag_[94])
    {
        ret.push_back(getColumnName(94));
    }
    if(dirtyFlag_[95])
    {
        ret.push_back(getColumnName(95));
    }
    if(dirtyFlag_[96])
    {
        ret.push_back(getColumnName(96));
    }
    if(dirtyFlag_[97])
    {
        ret.push_back(getColumnName(97));
    }
    if(dirtyFlag_[98])
    {
        ret.push_back(getColumnName(98));
    }
    if(dirtyFlag_[99])
    {
        ret.push_back(getColumnName(99));
    }
    if(dirtyFlag_[100])
    {
        ret.push_back(getColumnName(100));
    }
    if(dirtyFlag_[101])
    {
        ret.push_back(getColumnName(101));
    }
    if(dirtyFlag_[102])
    {
        ret.push_back(getColumnName(102));
    }
    if(dirtyFlag_[103])
    {
        ret.push_back(getColumnName(103));
    }
    if(dirtyFlag_[104])
    {
        ret.push_back(getColumnName(104));
    }
    if(dirtyFlag_[105])
    {
        ret.push_back(getColumnName(105));
    }
    if(dirtyFlag_[106])
    {
        ret.push_back(getColumnName(106));
    }
    if(dirtyFlag_[107])
    {
        ret.push_back(getColumnName(107));
    }
    if(dirtyFlag_[108])
    {
        ret.push_back(getColumnName(108));
    }
    if(dirtyFlag_[109])
    {
        ret.push_back(getColumnName(109));
    }
    if(dirtyFlag_[110])
    {
        ret.push_back(getColumnName(110));
    }
    if(dirtyFlag_[111])
    {
        ret.push_back(getColumnName(111));
    }
    if(dirtyFlag_[112])
    {
        ret.push_back(getColumnName(112));
    }
    if(dirtyFlag_[113])
    {
        ret.push_back(getColumnName(113));
    }
    if(dirtyFlag_[114])
    {
        ret.push_back(getColumnName(114));
    }
    if(dirtyFlag_[115])
    {
        ret.push_back(getColumnName(115));
    }
    if(dirtyFlag_[116])
    {
        ret.push_back(getColumnName(116));
    }
    if(dirtyFlag_[117])
    {
        ret.push_back(getColumnName(117));
    }
    if(dirtyFlag_[118])
    {
        ret.push_back(getColumnName(118));
    }
    if(dirtyFlag_[119])
    {
        ret.push_back(getColumnName(119));
    }
    if(dirtyFlag_[120])
    {
        ret.push_back(getColumnName(120));
    }
    if(dirtyFlag_[121])
    {
        ret.push_back(getColumnName(121));
    }
    if(dirtyFlag_[122])
    {
        ret.push_back(getColumnName(122));
    }
    if(dirtyFlag_[123])
    {
        ret.push_back(getColumnName(123));
    }
    if(dirtyFlag_[124])
    {
        ret.push_back(getColumnName(124));
    }
    if(dirtyFlag_[125])
    {
        ret.push_back(getColumnName(125));
    }
    if(dirtyFlag_[126])
    {
        ret.push_back(getColumnName(126));
    }
    if(dirtyFlag_[127])
    {
        ret.push_back(getColumnName(127));
    }
    if(dirtyFlag_[128])
    {
        ret.push_back(getColumnName(128));
    }
    if(dirtyFlag_[129])
    {
        ret.push_back(getColumnName(129));
    }
    if(dirtyFlag_[130])
    {
        ret.push_back(getColumnName(130));
    }
    if(dirtyFlag_[131])
    {
        ret.push_back(getColumnName(131));
    }
    if(dirtyFlag_[132])
    {
        ret.push_back(getColumnName(132));
    }
    if(dirtyFlag_[133])
    {
        ret.push_back(getColumnName(133));
    }
    if(dirtyFlag_[134])
    {
        ret.push_back(getColumnName(134));
    }
    if(dirtyFlag_[135])
    {
        ret.push_back(getColumnName(135));
    }
    if(dirtyFlag_[136])
    {
        ret.push_back(getColumnName(136));
    }
    if(dirtyFlag_[137])
    {
        ret.push_back(getColumnName(137));
    }
    if(dirtyFlag_[138])
    {
        ret.push_back(getColumnName(138));
    }
    if(dirtyFlag_[139])
    {
        ret.push_back(getColumnName(139));
    }
    if(dirtyFlag_[140])
    {
        ret.push_back(getColumnName(140));
    }
    if(dirtyFlag_[141])
    {
        ret.push_back(getColumnName(141));
    }
    if(dirtyFlag_[142])
    {
        ret.push_back(getColumnName(142));
    }
    if(dirtyFlag_[143])
    {
        ret.push_back(getColumnName(143));
    }
    if(dirtyFlag_[144])
    {
        ret.push_back(getColumnName(144));
    }
    if(dirtyFlag_[145])
    {
        ret.push_back(getColumnName(145));
    }
    if(dirtyFlag_[146])
    {
        ret.push_back(getColumnName(146));
    }
    if(dirtyFlag_[147])
    {
        ret.push_back(getColumnName(147));
    }
    if(dirtyFlag_[148])
    {
        ret.push_back(getColumnName(148));
    }
    if(dirtyFlag_[149])
    {
        ret.push_back(getColumnName(149));
    }
    if(dirtyFlag_[150])
    {
        ret.push_back(getColumnName(150));
    }
    if(dirtyFlag_[151])
    {
        ret.push_back(getColumnName(151));
    }
    if(dirtyFlag_[152])
    {
        ret.push_back(getColumnName(152));
    }
    if(dirtyFlag_[153])
    {
        ret.push_back(getColumnName(153));
    }
    if(dirtyFlag_[154])
    {
        ret.push_back(getColumnName(154));
    }
    if(dirtyFlag_[155])
    {
        ret.push_back(getColumnName(155));
    }
    if(dirtyFlag_[156])
    {
        ret.push_back(getColumnName(156));
    }
    if(dirtyFlag_[157])
    {
        ret.push_back(getColumnName(157));
    }
    if(dirtyFlag_[158])
    {
        ret.push_back(getColumnName(158));
    }
    if(dirtyFlag_[159])
    {
        ret.push_back(getColumnName(159));
    }
    if(dirtyFlag_[160])
    {
        ret.push_back(getColumnName(160));
    }
    if(dirtyFlag_[161])
    {
        ret.push_back(getColumnName(161));
    }
    if(dirtyFlag_[162])
    {
        ret.push_back(getColumnName(162));
    }
    if(dirtyFlag_[163])
    {
        ret.push_back(getColumnName(163));
    }
    if(dirtyFlag_[164])
    {
        ret.push_back(getColumnName(164));
    }
    if(dirtyFlag_[165])
    {
        ret.push_back(getColumnName(165));
    }
    if(dirtyFlag_[166])
    {
        ret.push_back(getColumnName(166));
    }
    if(dirtyFlag_[167])
    {
        ret.push_back(getColumnName(167));
    }
    if(dirtyFlag_[168])
    {
        ret.push_back(getColumnName(168));
    }
    if(dirtyFlag_[169])
    {
        ret.push_back(getColumnName(169));
    }
    if(dirtyFlag_[170])
    {
        ret.push_back(getColumnName(170));
    }
    if(dirtyFlag_[171])
    {
        ret.push_back(getColumnName(171));
    }
    if(dirtyFlag_[172])
    {
        ret.push_back(getColumnName(172));
    }
    if(dirtyFlag_[173])
    {
        ret.push_back(getColumnName(173));
    }
    if(dirtyFlag_[174])
    {
        ret.push_back(getColumnName(174));
    }
    if(dirtyFlag_[175])
    {
        ret.push_back(getColumnName(175));
    }
    if(dirtyFlag_[176])
    {
        ret.push_back(getColumnName(176));
    }
    if(dirtyFlag_[177])
    {
        ret.push_back(getColumnName(177));
    }
    if(dirtyFlag_[178])
    {
        ret.push_back(getColumnName(178));
    }
    if(dirtyFlag_[179])
    {
        ret.push_back(getColumnName(179));
    }
    if(dirtyFlag_[180])
    {
        ret.push_back(getColumnName(180));
    }
    if(dirtyFlag_[181])
    {
        ret.push_back(getColumnName(181));
    }
    if(dirtyFlag_[182])
    {
        ret.push_back(getColumnName(182));
    }
    if(dirtyFlag_[183])
    {
        ret.push_back(getColumnName(183));
    }
    if(dirtyFlag_[184])
    {
        ret.push_back(getColumnName(184));
    }
    if(dirtyFlag_[185])
    {
        ret.push_back(getColumnName(185));
    }
    if(dirtyFlag_[186])
    {
        ret.push_back(getColumnName(186));
    }
    if(dirtyFlag_[187])
    {
        ret.push_back(getColumnName(187));
    }
    if(dirtyFlag_[188])
    {
        ret.push_back(getColumnName(188));
    }
    if(dirtyFlag_[189])
    {
        ret.push_back(getColumnName(189));
    }
    if(dirtyFlag_[190])
    {
        ret.push_back(getColumnName(190));
    }
    if(dirtyFlag_[191])
    {
        ret.push_back(getColumnName(191));
    }
    if(dirtyFlag_[192])
    {
        ret.push_back(getColumnName(192));
    }
    if(dirtyFlag_[193])
    {
        ret.push_back(getColumnName(193));
    }
    if(dirtyFlag_[194])
    {
        ret.push_back(getColumnName(194));
    }
    return ret;
}

void Kunde::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getKundenid())
        {
            binder << getValueOfKundenid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getBezeichnung())
        {
            binder << getValueOfBezeichnung();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getKundeseit())
        {
            binder << getValueOfKundeseit();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getVertragsparteiCd())
        {
            binder << getValueOfVertragsparteiCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getLoeschCd())
        {
            binder << getValueOfLoeschCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getLoeschdatum())
        {
            binder << getValueOfLoeschdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCrtdatum())
        {
            binder << getValueOfCrtdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCrtuser())
        {
            binder << getValueOfCrtuser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getMutdatum())
        {
            binder << getValueOfMutdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getMutuser())
        {
            binder << getValueOfMutuser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getPseudoaccountCd())
        {
            binder << getValueOfPseudoaccountCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getKundebesuch())
        {
            binder << getValueOfKundebesuch();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getBezeichnungvertrag())
        {
            binder << getValueOfBezeichnungvertrag();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getPseudonym())
        {
            binder << getValueOfPseudonym();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getRechtsdomizilCd())
        {
            binder << getValueOfRechtsdomizilCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getKorrespondenzsprachCd())
        {
            binder << getValueOfKorrespondenzsprachCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getMitProfilCd())
        {
            binder << getValueOfMitProfilCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getGemeinschaftskontoCd())
        {
            binder << getValueOfGemeinschaftskontoCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getPin())
        {
            binder << getValueOfPin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getVerwendungszweck())
        {
            binder << getValueOfVerwendungszweck();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getIdentifikationsartCd())
        {
            binder << getValueOfIdentifikationsartCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getVermoegensursprungCd())
        {
            binder << getValueOfVermoegensursprungCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getVermoegensursprung())
        {
            binder << getValueOfVermoegensursprung();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getGeldvonkonto())
        {
            binder << getValueOfGeldvonkonto();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getBisherigebetreuung())
        {
            binder << getValueOfBisherigebetreuung();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getBisherigebetreuungseit())
        {
            binder << getValueOfBisherigebetreuungseit();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[26])
    {
        if(getManualopenCd())
        {
            binder << getValueOfManualopenCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[27])
    {
        if(getEinVermoegenCd())
        {
            binder << getValueOfEinVermoegenCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[28])
    {
        if(getRegionzahlungCd())
        {
            binder << getValueOfRegionzahlungCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[29])
    {
        if(getEinVermoegenartCd())
        {
            binder << getValueOfEinVermoegenartCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[30])
    {
        if(getSpezWuenscheCd())
        {
            binder << getValueOfSpezWuenscheCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[31])
    {
        if(getManagerCd())
        {
            binder << getValueOfManagerCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[32])
    {
        if(getRiskindex())
        {
            binder << getValueOfRiskindex();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[33])
    {
        if(getRiskindexGueltiseit())
        {
            binder << getValueOfRiskindexGueltiseit();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[34])
    {
        if(getRiskindexLetzteberechnung())
        {
            binder << getValueOfRiskindexLetzteberechnung();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[35])
    {
        if(getKontoeroeffnungsartCd())
        {
            binder << getValueOfKontoeroeffnungsartCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[36])
    {
        if(getRiskindexberechnenCd())
        {
            binder << getValueOfRiskindexberechnenCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[37])
    {
        if(getKundennaturCd())
        {
            binder << getValueOfKundennaturCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[38])
    {
        if(getRisikokategorieCd())
        {
            binder << getValueOfRisikokategorieCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[39])
    {
        if(getPepCd())
        {
            binder << getValueOfPepCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[40])
    {
        if(getSpezialkategorieCd())
        {
            binder << getValueOfSpezialkategorieCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[41])
    {
        if(getNatureCd())
        {
            binder << getValueOfNatureCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[42])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[43])
    {
        if(getLedigername())
        {
            binder << getValueOfLedigername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[44])
    {
        if(getVorname())
        {
            binder << getValueOfVorname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[45])
    {
        if(getCdpartc())
        {
            binder << getValueOfCdpartc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[46])
    {
        if(getNationalitaetCd())
        {
            binder << getValueOfNationalitaetCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[47])
    {
        if(getRisikolandCd())
        {
            binder << getValueOfRisikolandCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[48])
    {
        if(getPersoenlichbekanntCd())
        {
            binder << getValueOfPersoenlichbekanntCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[49])
    {
        if(getRisikotaetigkeitCd())
        {
            binder << getValueOfRisikotaetigkeitCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[50])
    {
        if(getSteuerdomizilCd())
        {
            binder << getValueOfSteuerdomizilCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[51])
    {
        if(getEuTaxstatusCd())
        {
            binder << getValueOfEuTaxstatusCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[52])
    {
        if(getTin())
        {
            binder << getValueOfTin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[53])
    {
        if(getApsysCdrolpersi())
        {
            binder << getValueOfApsysCdrolpersi();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[54])
    {
        if(getVertragsprachCd())
        {
            binder << getValueOfVertragsprachCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[55])
    {
        if(getVermoegenskategorieIhagCd())
        {
            binder << getValueOfVermoegenskategorieIhagCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[56])
    {
        if(getApsysIntishs())
        {
            binder << getValueOfApsysIntishs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[57])
    {
        if(getApsysIntilgs())
        {
            binder << getValueOfApsysIntilgs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[58])
    {
        if(getGesamtvermoegenCd())
        {
            binder << getValueOfGesamtvermoegenCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[59])
    {
        if(getComplianceOkCd())
        {
            binder << getValueOfComplianceOkCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[60])
    {
        if(getComplianceOkBemerkung())
        {
            binder << getValueOfComplianceOkBemerkung();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[61])
    {
        if(getComplianceOkDatum())
        {
            binder << getValueOfComplianceOkDatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[62])
    {
        if(getComplianceOkUserid())
        {
            binder << getValueOfComplianceOkUserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[63])
    {
        if(getEinVermoegen())
        {
            binder << getValueOfEinVermoegen();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[64])
    {
        if(getSegmentierungCd())
        {
            binder << getValueOfSegmentierungCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[65])
    {
        if(getAktid())
        {
            binder << getValueOfAktid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[66])
    {
        if(getValidid())
        {
            binder << getValueOfValidid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[67])
    {
        if(getValidCd())
        {
            binder << getValueOfValidCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[68])
    {
        if(getValiduser())
        {
            binder << getValueOfValiduser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[69])
    {
        if(getEncSalt())
        {
            binder << getValueOfEncSalt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[70])
    {
        if(getBezeichnungEnc())
        {
            binder << getValueOfBezeichnungEnc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[71])
    {
        if(getApsysCdmotifparts())
        {
            binder << getValueOfApsysCdmotifparts();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[72])
    {
        if(getApsysCdindus0s())
        {
            binder << getValueOfApsysCdindus0s();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[73])
    {
        if(getApsysFlagpreavisexec())
        {
            binder << getValueOfApsysFlagpreavisexec();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[74])
    {
        if(getApsysCdaviobispecc())
        {
            binder << getValueOfApsysCdaviobispecc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[75])
    {
        if(getApsysFlaghisperc())
        {
            binder << getValueOfApsysFlaghisperc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[76])
    {
        if(getApsysRepamanuc())
        {
            binder << getValueOfApsysRepamanuc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[77])
    {
        if(getApsysPerdevcalc())
        {
            binder << getValueOfApsysPerdevcalc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[78])
    {
        if(getApsysFlaguktaxc())
        {
            binder << getValueOfApsysFlaguktaxc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[79])
    {
        if(getApsysCdnogas())
        {
            binder << getValueOfApsysCdnogas();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[80])
    {
        if(getApsysStatfiscc())
        {
            binder << getValueOfApsysStatfiscc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[81])
    {
        if(getApsysFlagfwti())
        {
            binder << getValueOfApsysFlagfwti();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[82])
    {
        if(getApsysFlagfwtuknrsdi())
        {
            binder << getValueOfApsysFlagfwtuknrsdi();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[83])
    {
        if(getApsysFlagfwttaxspegei())
        {
            binder << getValueOfApsysFlagfwttaxspegei();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[84])
    {
        if(getApsysCdfwtoptregulfiscancc())
        {
            binder << getValueOfApsysCdfwtoptregulfiscancc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[85])
    {
        if(getApsysCdfwtstatregulfiscancc())
        {
            binder << getValueOfApsysCdfwtstatregulfiscancc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[86])
    {
        if(getApsysCdfwtoptregulfiscfutc())
        {
            binder << getValueOfApsysCdfwtoptregulfiscfutc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[87])
    {
        if(getSteuerlandAbgstCd())
        {
            binder << getValueOfSteuerlandAbgstCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[88])
    {
        if(getApsysCdnatures())
        {
            binder << getValueOfApsysCdnatures();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[89])
    {
        if(getApsysShnas())
        {
            binder << getValueOfApsysShnas();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[90])
    {
        if(getApsysCdpyhqdomis())
        {
            binder << getValueOfApsysCdpyhqdomis();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[91])
    {
        if(getApsysCdpermi())
        {
            binder << getValueOfApsysCdpermi();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[92])
    {
        if(getApsysIdrcis())
        {
            binder << getValueOfApsysIdrcis();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[93])
    {
        if(getApsysFlagisttc())
        {
            binder << getValueOfApsysFlagisttc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[94])
    {
        if(getApsysDevevals())
        {
            binder << getValueOfApsysDevevals();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[95])
    {
        if(getApsysIdstrucs())
        {
            binder << getValueOfApsysIdstrucs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[96])
    {
        if(getApsysSuiviagts())
        {
            binder << getValueOfApsysSuiviagts();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[97])
    {
        if(getApsysCdinduscssfs())
        {
            binder << getValueOfApsysCdinduscssfs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[98])
    {
        if(getApsysCdindusbluxs())
        {
            binder << getValueOfApsysCdindusbluxs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[99])
    {
        if(getApsysCdindussbuba())
        {
            binder << getValueOfApsysCdindussbuba();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[100])
    {
        if(getApsysCdindussbns())
        {
            binder << getValueOfApsysCdindussbns();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[101])
    {
        if(getApsysGrmtevals())
        {
            binder << getValueOfApsysGrmtevals();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[102])
    {
        if(getApsysIdpocs())
        {
            binder << getValueOfApsysIdpocs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[103])
    {
        if(getApsysInfo())
        {
            binder << getValueOfApsysInfo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[104])
    {
        if(getApsysIdents())
        {
            binder << getValueOfApsysIdents();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[105])
    {
        if(getApsysStatusOpec())
        {
            binder << getValueOfApsysStatusOpec();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[106])
    {
        if(getApsysErri())
        {
            binder << getValueOfApsysErri();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[107])
    {
        if(getNationalitaet2Cd())
        {
            binder << getValueOfNationalitaet2Cd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[108])
    {
        if(getNationalitaet3Cd())
        {
            binder << getValueOfNationalitaet3Cd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[109])
    {
        if(getVermoegensursprung2Cd())
        {
            binder << getValueOfVermoegensursprung2Cd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[110])
    {
        if(getVermoegensursprung2())
        {
            binder << getValueOfVermoegensursprung2();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[111])
    {
        if(getApprovalStep1Cd())
        {
            binder << getValueOfApprovalStep1Cd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[112])
    {
        if(getApprovalStep1User())
        {
            binder << getValueOfApprovalStep1User();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[113])
    {
        if(getApprovalStep1Date())
        {
            binder << getValueOfApprovalStep1Date();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[114])
    {
        if(getApprovalStep2Cd())
        {
            binder << getValueOfApprovalStep2Cd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[115])
    {
        if(getApprovalStep2User())
        {
            binder << getValueOfApprovalStep2User();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[116])
    {
        if(getApprovalStep2Date())
        {
            binder << getValueOfApprovalStep2Date();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[117])
    {
        if(getApprovalStep3Cd())
        {
            binder << getValueOfApprovalStep3Cd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[118])
    {
        if(getApprovalStep3User())
        {
            binder << getValueOfApprovalStep3User();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[119])
    {
        if(getApprovalStep3Date())
        {
            binder << getValueOfApprovalStep3Date();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[120])
    {
        if(getApprovalStep4Cd())
        {
            binder << getValueOfApprovalStep4Cd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[121])
    {
        if(getApprovalStep4User())
        {
            binder << getValueOfApprovalStep4User();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[122])
    {
        if(getApprovalStep4Date())
        {
            binder << getValueOfApprovalStep4Date();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[123])
    {
        if(getApprovalStep5Cd())
        {
            binder << getValueOfApprovalStep5Cd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[124])
    {
        if(getApprovalStep5User())
        {
            binder << getValueOfApprovalStep5User();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[125])
    {
        if(getApprovalStep5Date())
        {
            binder << getValueOfApprovalStep5Date();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[126])
    {
        if(getApprovalStep1Bem())
        {
            binder << getValueOfApprovalStep1Bem();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[127])
    {
        if(getApprovalStep2Bem())
        {
            binder << getValueOfApprovalStep2Bem();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[128])
    {
        if(getApprovalStep3Bem())
        {
            binder << getValueOfApprovalStep3Bem();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[129])
    {
        if(getApprovalStep4Bem())
        {
            binder << getValueOfApprovalStep4Bem();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[130])
    {
        if(getApprovalStep5Bem())
        {
            binder << getValueOfApprovalStep5Bem();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[131])
    {
        if(getApprovalStep1AssesCd())
        {
            binder << getValueOfApprovalStep1AssesCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[132])
    {
        if(getApprovalStep2AssesCd())
        {
            binder << getValueOfApprovalStep2AssesCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[133])
    {
        if(getApprovalStep3AssesCd())
        {
            binder << getValueOfApprovalStep3AssesCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[134])
    {
        if(getApprovalStep4AssesCd())
        {
            binder << getValueOfApprovalStep4AssesCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[135])
    {
        if(getApprovalStep5AssesCd())
        {
            binder << getValueOfApprovalStep5AssesCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[136])
    {
        if(getApprovalStatusCd())
        {
            binder << getValueOfApprovalStatusCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[137])
    {
        if(getClientStatusCd())
        {
            binder << getValueOfClientStatusCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[138])
    {
        if(getDischargeOrdersCd())
        {
            binder << getValueOfDischargeOrdersCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[139])
    {
        if(getPrintSummaryHoldmailOnlyCd())
        {
            binder << getValueOfPrintSummaryHoldmailOnlyCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[140])
    {
        if(getEbankingContractCd())
        {
            binder << getValueOfEbankingContractCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[141])
    {
        if(getEbankingContractLanguageCd())
        {
            binder << getValueOfEbankingContractLanguageCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[142])
    {
        if(getApsysDtechdiaryl())
        {
            binder << getValueOfApsysDtechdiaryl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[143])
    {
        if(getApsysMotdiarys())
        {
            binder << getValueOfApsysMotdiarys();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[144])
    {
        if(getApsysIdtypcliirss())
        {
            binder << getValueOfApsysIdtypcliirss();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[145])
    {
        if(getApsysIdrciqis())
        {
            binder << getValueOfApsysIdrciqis();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[146])
    {
        if(getApsysIdrcifatcas())
        {
            binder << getValueOfApsysIdrcifatcas();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[147])
    {
        if(getMailingTarifTypeCd())
        {
            binder << getValueOfMailingTarifTypeCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[148])
    {
        if(getRegisteredCd())
        {
            binder << getValueOfRegisteredCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[149])
    {
        if(getRegisteredMailCd())
        {
            binder << getValueOfRegisteredMailCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[150])
    {
        if(getApsysNbperscpartiel())
        {
            binder << getValueOfApsysNbperscpartiel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[151])
    {
        if(getAssetValueTierCd())
        {
            binder << getValueOfAssetValueTierCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[152])
    {
        if(getRelationshipTypeAmlCd())
        {
            binder << getValueOfRelationshipTypeAmlCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[153])
    {
        if(getCbAssetValueTierCd())
        {
            binder << getValueOfCbAssetValueTierCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[154])
    {
        if(getApprovalScore())
        {
            binder << getValueOfApprovalScore();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[155])
    {
        if(getApprovalScoreSteps())
        {
            binder << getValueOfApprovalScoreSteps();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[156])
    {
        if(getApsysDtdebpartl())
        {
            binder << getValueOfApsysDtdebpartl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[157])
    {
        if(getApsysDtfinpartl())
        {
            binder << getValueOfApsysDtfinpartl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[158])
    {
        if(getApsysCdmotifclos())
        {
            binder << getValueOfApsysCdmotifclos();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[159])
    {
        if(getApsysCdnaturecpartieemirc())
        {
            binder << getValueOfApsysCdnaturecpartieemirc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[160])
    {
        if(getApsysFlagotheremirc())
        {
            binder << getValueOfApsysFlagotheremirc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[161])
    {
        if(getApsysCdindusemirs())
        {
            binder << getValueOfApsysCdindusemirs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[162])
    {
        if(getOpenedInApsysDate())
        {
            binder << getValueOfOpenedInApsysDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[163])
    {
        if(getApsysCdnaturecpartiefmiac())
        {
            binder << getValueOfApsysCdnaturecpartiefmiac();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[164])
    {
        if(getEbankingClosedCd())
        {
            binder << getValueOfEbankingClosedCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[165])
    {
        if(getEbankingClosingdate())
        {
            binder << getValueOfEbankingClosingdate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[166])
    {
        if(getKycReviewProcessStartDate())
        {
            binder << getValueOfKycReviewProcessStartDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[167])
    {
        if(getRemarks())
        {
            binder << getValueOfRemarks();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[168])
    {
        if(getTransactionBlCountryCd())
        {
            binder << getValueOfTransactionBlCountryCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[169])
    {
        if(getClientgroupCd())
        {
            binder << getValueOfClientgroupCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[170])
    {
        if(getRiskindexCalc())
        {
            binder << getValueOfRiskindexCalc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[171])
    {
        if(getLastCalcCriMutdatum())
        {
            binder << getValueOfLastCalcCriMutdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[172])
    {
        if(getRisikokategorieCalcCd())
        {
            binder << getValueOfRisikokategorieCalcCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[173])
    {
        if(getRiskindexGroup())
        {
            binder << getValueOfRiskindexGroup();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[174])
    {
        if(getEstAmountRemWithMutdatum())
        {
            binder << getValueOfEstAmountRemWithMutdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[175])
    {
        if(getGesamtvermoegenMutdatum())
        {
            binder << getValueOfGesamtvermoegenMutdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[176])
    {
        if(getTransactBlCountryMutdatum())
        {
            binder << getValueOfTransactBlCountryMutdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[177])
    {
        if(getAccountpurposeMutdatum())
        {
            binder << getValueOfAccountpurposeMutdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[178])
    {
        if(getApsysFlagdeldatapersi())
        {
            binder << getValueOfApsysFlagdeldatapersi();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[179])
    {
        if(getApsysDtwaitdeldatapersl())
        {
            binder << getValueOfApsysDtwaitdeldatapersl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[180])
    {
        if(getNameEnc())
        {
            binder << getValueOfNameEnc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[181])
    {
        if(getInApsysTempEntsperrenCd())
        {
            binder << getValueOfInApsysTempEntsperrenCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[182])
    {
        if(getInApsysTempEntspUserid())
        {
            binder << getValueOfInApsysTempEntspUserid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[183])
    {
        if(getInApsysTempEntspDatum())
        {
            binder << getValueOfInApsysTempEntspDatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[184])
    {
        if(getApsysCdregs())
        {
            binder << getValueOfApsysCdregs();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[185])
    {
        if(getRetentionOnHold())
        {
            binder << getValueOfRetentionOnHold();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[186])
    {
        if(getRetentionOnHoldDate())
        {
            binder << getValueOfRetentionOnHoldDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[187])
    {
        if(getRetentionOnHoldReason())
        {
            binder << getValueOfRetentionOnHoldReason();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[188])
    {
        if(getLogicalErasure())
        {
            binder << getValueOfLogicalErasure();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[189])
    {
        if(getLogicalErasureDate())
        {
            binder << getValueOfLogicalErasureDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[190])
    {
        if(getLogicalErasureReason())
        {
            binder << getValueOfLogicalErasureReason();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[191])
    {
        if(getComplianceMinRiskCategory())
        {
            binder << getValueOfComplianceMinRiskCategory();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[192])
    {
        if(getComplianceMinRiskComment())
        {
            binder << getValueOfComplianceMinRiskComment();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[193])
    {
        if(getClientStructureCd())
        {
            binder << getValueOfClientStructureCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[194])
    {
        if(getClientSubstructureCd())
        {
            binder << getValueOfClientSubstructureCd();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Kunde::toJson() const
{
    Json::Value ret;
    if(getKundenid())
    {
        ret["KUNDENID"]=getValueOfKundenid();
    }
    else
    {
        ret["KUNDENID"]=Json::Value();
    }
    if(getBezeichnung())
    {
        ret["BEZEICHNUNG"]=getValueOfBezeichnung();
    }
    else
    {
        ret["BEZEICHNUNG"]=Json::Value();
    }
    if(getKundeseit())
    {
        ret["KUNDESEIT"]=getKundeseit()->toDbStringLocal();
    }
    else
    {
        ret["KUNDESEIT"]=Json::Value();
    }
    if(getVertragsparteiCd())
    {
        ret["VERTRAGSPARTEI_CD"]=getValueOfVertragsparteiCd();
    }
    else
    {
        ret["VERTRAGSPARTEI_CD"]=Json::Value();
    }
    if(getLoeschCd())
    {
        ret["LOESCH_CD"]=getValueOfLoeschCd();
    }
    else
    {
        ret["LOESCH_CD"]=Json::Value();
    }
    if(getLoeschdatum())
    {
        ret["LOESCHDATUM"]=getLoeschdatum()->toDbStringLocal();
    }
    else
    {
        ret["LOESCHDATUM"]=Json::Value();
    }
    if(getCrtdatum())
    {
        ret["CRTDATUM"]=getCrtdatum()->toDbStringLocal();
    }
    else
    {
        ret["CRTDATUM"]=Json::Value();
    }
    if(getCrtuser())
    {
        ret["CRTUSER"]=getValueOfCrtuser();
    }
    else
    {
        ret["CRTUSER"]=Json::Value();
    }
    if(getMutdatum())
    {
        ret["MUTDATUM"]=getMutdatum()->toDbStringLocal();
    }
    else
    {
        ret["MUTDATUM"]=Json::Value();
    }
    if(getMutuser())
    {
        ret["MUTUSER"]=getValueOfMutuser();
    }
    else
    {
        ret["MUTUSER"]=Json::Value();
    }
    if(getPseudoaccountCd())
    {
        ret["PSEUDOACCOUNT_CD"]=getValueOfPseudoaccountCd();
    }
    else
    {
        ret["PSEUDOACCOUNT_CD"]=Json::Value();
    }
    if(getKundebesuch())
    {
        ret["KUNDEBESUCH"]=getKundebesuch()->toDbStringLocal();
    }
    else
    {
        ret["KUNDEBESUCH"]=Json::Value();
    }
    if(getBezeichnungvertrag())
    {
        ret["BEZEICHNUNGVERTRAG"]=getValueOfBezeichnungvertrag();
    }
    else
    {
        ret["BEZEICHNUNGVERTRAG"]=Json::Value();
    }
    if(getPseudonym())
    {
        ret["PSEUDONYM"]=getValueOfPseudonym();
    }
    else
    {
        ret["PSEUDONYM"]=Json::Value();
    }
    if(getRechtsdomizilCd())
    {
        ret["RECHTSDOMIZIL_CD"]=getValueOfRechtsdomizilCd();
    }
    else
    {
        ret["RECHTSDOMIZIL_CD"]=Json::Value();
    }
    if(getKorrespondenzsprachCd())
    {
        ret["KORRESPONDENZSPRACH_CD"]=getValueOfKorrespondenzsprachCd();
    }
    else
    {
        ret["KORRESPONDENZSPRACH_CD"]=Json::Value();
    }
    if(getMitProfilCd())
    {
        ret["MIT_PROFIL_CD"]=getValueOfMitProfilCd();
    }
    else
    {
        ret["MIT_PROFIL_CD"]=Json::Value();
    }
    if(getGemeinschaftskontoCd())
    {
        ret["GEMEINSCHAFTSKONTO_CD"]=getValueOfGemeinschaftskontoCd();
    }
    else
    {
        ret["GEMEINSCHAFTSKONTO_CD"]=Json::Value();
    }
    if(getPin())
    {
        ret["PIN"]=getValueOfPin();
    }
    else
    {
        ret["PIN"]=Json::Value();
    }
    if(getVerwendungszweck())
    {
        ret["VERWENDUNGSZWECK"]=getValueOfVerwendungszweck();
    }
    else
    {
        ret["VERWENDUNGSZWECK"]=Json::Value();
    }
    if(getIdentifikationsartCd())
    {
        ret["IDENTIFIKATIONSART_CD"]=getValueOfIdentifikationsartCd();
    }
    else
    {
        ret["IDENTIFIKATIONSART_CD"]=Json::Value();
    }
    if(getVermoegensursprungCd())
    {
        ret["VERMOEGENSURSPRUNG_CD"]=getValueOfVermoegensursprungCd();
    }
    else
    {
        ret["VERMOEGENSURSPRUNG_CD"]=Json::Value();
    }
    if(getVermoegensursprung())
    {
        ret["VERMOEGENSURSPRUNG"]=getValueOfVermoegensursprung();
    }
    else
    {
        ret["VERMOEGENSURSPRUNG"]=Json::Value();
    }
    if(getGeldvonkonto())
    {
        ret["GELDVONKONTO"]=getValueOfGeldvonkonto();
    }
    else
    {
        ret["GELDVONKONTO"]=Json::Value();
    }
    if(getBisherigebetreuung())
    {
        ret["BISHERIGEBETREUUNG"]=getValueOfBisherigebetreuung();
    }
    else
    {
        ret["BISHERIGEBETREUUNG"]=Json::Value();
    }
    if(getBisherigebetreuungseit())
    {
        ret["BISHERIGEBETREUUNGSEIT"]=getBisherigebetreuungseit()->toDbStringLocal();
    }
    else
    {
        ret["BISHERIGEBETREUUNGSEIT"]=Json::Value();
    }
    if(getManualopenCd())
    {
        ret["MANUALOPEN_CD"]=getValueOfManualopenCd();
    }
    else
    {
        ret["MANUALOPEN_CD"]=Json::Value();
    }
    if(getEinVermoegenCd())
    {
        ret["EIN_VERMOEGEN_CD"]=getValueOfEinVermoegenCd();
    }
    else
    {
        ret["EIN_VERMOEGEN_CD"]=Json::Value();
    }
    if(getRegionzahlungCd())
    {
        ret["REGIONZAHLUNG_CD"]=getValueOfRegionzahlungCd();
    }
    else
    {
        ret["REGIONZAHLUNG_CD"]=Json::Value();
    }
    if(getEinVermoegenartCd())
    {
        ret["EIN_VERMOEGENART_CD"]=getValueOfEinVermoegenartCd();
    }
    else
    {
        ret["EIN_VERMOEGENART_CD"]=Json::Value();
    }
    if(getSpezWuenscheCd())
    {
        ret["SPEZ_WUENSCHE_CD"]=getValueOfSpezWuenscheCd();
    }
    else
    {
        ret["SPEZ_WUENSCHE_CD"]=Json::Value();
    }
    if(getManagerCd())
    {
        ret["MANAGER_CD"]=getValueOfManagerCd();
    }
    else
    {
        ret["MANAGER_CD"]=Json::Value();
    }
    if(getRiskindex())
    {
        ret["RISKINDEX"]=getValueOfRiskindex();
    }
    else
    {
        ret["RISKINDEX"]=Json::Value();
    }
    if(getRiskindexGueltiseit())
    {
        ret["RISKINDEX_GUELTISEIT"]=getRiskindexGueltiseit()->toDbStringLocal();
    }
    else
    {
        ret["RISKINDEX_GUELTISEIT"]=Json::Value();
    }
    if(getRiskindexLetzteberechnung())
    {
        ret["RISKINDEX_LETZTEBERECHNUNG"]=getRiskindexLetzteberechnung()->toDbStringLocal();
    }
    else
    {
        ret["RISKINDEX_LETZTEBERECHNUNG"]=Json::Value();
    }
    if(getKontoeroeffnungsartCd())
    {
        ret["KONTOEROEFFNUNGSART_CD"]=getValueOfKontoeroeffnungsartCd();
    }
    else
    {
        ret["KONTOEROEFFNUNGSART_CD"]=Json::Value();
    }
    if(getRiskindexberechnenCd())
    {
        ret["RISKINDEXBERECHNEN_CD"]=getValueOfRiskindexberechnenCd();
    }
    else
    {
        ret["RISKINDEXBERECHNEN_CD"]=Json::Value();
    }
    if(getKundennaturCd())
    {
        ret["KUNDENNATUR_CD"]=getValueOfKundennaturCd();
    }
    else
    {
        ret["KUNDENNATUR_CD"]=Json::Value();
    }
    if(getRisikokategorieCd())
    {
        ret["RISIKOKATEGORIE_CD"]=getValueOfRisikokategorieCd();
    }
    else
    {
        ret["RISIKOKATEGORIE_CD"]=Json::Value();
    }
    if(getPepCd())
    {
        ret["PEP_CD"]=getValueOfPepCd();
    }
    else
    {
        ret["PEP_CD"]=Json::Value();
    }
    if(getSpezialkategorieCd())
    {
        ret["SPEZIALKATEGORIE_CD"]=getValueOfSpezialkategorieCd();
    }
    else
    {
        ret["SPEZIALKATEGORIE_CD"]=Json::Value();
    }
    if(getNatureCd())
    {
        ret["NATURE_CD"]=getValueOfNatureCd();
    }
    else
    {
        ret["NATURE_CD"]=Json::Value();
    }
    if(getName())
    {
        ret["NAME"]=getValueOfName();
    }
    else
    {
        ret["NAME"]=Json::Value();
    }
    if(getLedigername())
    {
        ret["LEDIGERNAME"]=getValueOfLedigername();
    }
    else
    {
        ret["LEDIGERNAME"]=Json::Value();
    }
    if(getVorname())
    {
        ret["VORNAME"]=getValueOfVorname();
    }
    else
    {
        ret["VORNAME"]=Json::Value();
    }
    if(getCdpartc())
    {
        ret["CDPARTC"]=getValueOfCdpartc();
    }
    else
    {
        ret["CDPARTC"]=Json::Value();
    }
    if(getNationalitaetCd())
    {
        ret["NATIONALITAET_CD"]=getValueOfNationalitaetCd();
    }
    else
    {
        ret["NATIONALITAET_CD"]=Json::Value();
    }
    if(getRisikolandCd())
    {
        ret["RISIKOLAND_CD"]=getValueOfRisikolandCd();
    }
    else
    {
        ret["RISIKOLAND_CD"]=Json::Value();
    }
    if(getPersoenlichbekanntCd())
    {
        ret["PERSOENLICHBEKANNT_CD"]=getValueOfPersoenlichbekanntCd();
    }
    else
    {
        ret["PERSOENLICHBEKANNT_CD"]=Json::Value();
    }
    if(getRisikotaetigkeitCd())
    {
        ret["RISIKOTAETIGKEIT_CD"]=getValueOfRisikotaetigkeitCd();
    }
    else
    {
        ret["RISIKOTAETIGKEIT_CD"]=Json::Value();
    }
    if(getSteuerdomizilCd())
    {
        ret["STEUERDOMIZIL_CD"]=getValueOfSteuerdomizilCd();
    }
    else
    {
        ret["STEUERDOMIZIL_CD"]=Json::Value();
    }
    if(getEuTaxstatusCd())
    {
        ret["EU_TAXSTATUS_CD"]=getValueOfEuTaxstatusCd();
    }
    else
    {
        ret["EU_TAXSTATUS_CD"]=Json::Value();
    }
    if(getTin())
    {
        ret["TIN"]=getValueOfTin();
    }
    else
    {
        ret["TIN"]=Json::Value();
    }
    if(getApsysCdrolpersi())
    {
        ret["APSYS_CDROLPERSI"]=getValueOfApsysCdrolpersi();
    }
    else
    {
        ret["APSYS_CDROLPERSI"]=Json::Value();
    }
    if(getVertragsprachCd())
    {
        ret["VERTRAGSPRACH_CD"]=getValueOfVertragsprachCd();
    }
    else
    {
        ret["VERTRAGSPRACH_CD"]=Json::Value();
    }
    if(getVermoegenskategorieIhagCd())
    {
        ret["VERMOEGENSKATEGORIE_IHAG_CD"]=getValueOfVermoegenskategorieIhagCd();
    }
    else
    {
        ret["VERMOEGENSKATEGORIE_IHAG_CD"]=Json::Value();
    }
    if(getApsysIntishs())
    {
        ret["APSYS_INTISHS"]=getValueOfApsysIntishs();
    }
    else
    {
        ret["APSYS_INTISHS"]=Json::Value();
    }
    if(getApsysIntilgs())
    {
        ret["APSYS_INTILGS"]=getValueOfApsysIntilgs();
    }
    else
    {
        ret["APSYS_INTILGS"]=Json::Value();
    }
    if(getGesamtvermoegenCd())
    {
        ret["GESAMTVERMOEGEN_CD"]=getValueOfGesamtvermoegenCd();
    }
    else
    {
        ret["GESAMTVERMOEGEN_CD"]=Json::Value();
    }
    if(getComplianceOkCd())
    {
        ret["COMPLIANCE_OK_CD"]=getValueOfComplianceOkCd();
    }
    else
    {
        ret["COMPLIANCE_OK_CD"]=Json::Value();
    }
    if(getComplianceOkBemerkung())
    {
        ret["COMPLIANCE_OK_BEMERKUNG"]=getValueOfComplianceOkBemerkung();
    }
    else
    {
        ret["COMPLIANCE_OK_BEMERKUNG"]=Json::Value();
    }
    if(getComplianceOkDatum())
    {
        ret["COMPLIANCE_OK_DATUM"]=getComplianceOkDatum()->toDbStringLocal();
    }
    else
    {
        ret["COMPLIANCE_OK_DATUM"]=Json::Value();
    }
    if(getComplianceOkUserid())
    {
        ret["COMPLIANCE_OK_USERID"]=getValueOfComplianceOkUserid();
    }
    else
    {
        ret["COMPLIANCE_OK_USERID"]=Json::Value();
    }
    if(getEinVermoegen())
    {
        ret["EIN_VERMOEGEN"]=getValueOfEinVermoegen();
    }
    else
    {
        ret["EIN_VERMOEGEN"]=Json::Value();
    }
    if(getSegmentierungCd())
    {
        ret["SEGMENTIERUNG_CD"]=getValueOfSegmentierungCd();
    }
    else
    {
        ret["SEGMENTIERUNG_CD"]=Json::Value();
    }
    if(getAktid())
    {
        ret["AKTID"]=getValueOfAktid();
    }
    else
    {
        ret["AKTID"]=Json::Value();
    }
    if(getValidid())
    {
        ret["VALIDID"]=getValueOfValidid();
    }
    else
    {
        ret["VALIDID"]=Json::Value();
    }
    if(getValidCd())
    {
        ret["VALID_CD"]=getValueOfValidCd();
    }
    else
    {
        ret["VALID_CD"]=Json::Value();
    }
    if(getValiduser())
    {
        ret["VALIDUSER"]=getValueOfValiduser();
    }
    else
    {
        ret["VALIDUSER"]=Json::Value();
    }
    if(getEncSalt())
    {
        ret["ENC_SALT"]=getValueOfEncSalt();
    }
    else
    {
        ret["ENC_SALT"]=Json::Value();
    }
    if(getBezeichnungEnc())
    {
        ret["BEZEICHNUNG_ENC"]=getValueOfBezeichnungEnc();
    }
    else
    {
        ret["BEZEICHNUNG_ENC"]=Json::Value();
    }
    if(getApsysCdmotifparts())
    {
        ret["APSYS_CDMOTIFPARTS"]=getValueOfApsysCdmotifparts();
    }
    else
    {
        ret["APSYS_CDMOTIFPARTS"]=Json::Value();
    }
    if(getApsysCdindus0s())
    {
        ret["APSYS_CDINDUS0S"]=getValueOfApsysCdindus0s();
    }
    else
    {
        ret["APSYS_CDINDUS0S"]=Json::Value();
    }
    if(getApsysFlagpreavisexec())
    {
        ret["APSYS_FLAGPREAVISEXEC"]=getValueOfApsysFlagpreavisexec();
    }
    else
    {
        ret["APSYS_FLAGPREAVISEXEC"]=Json::Value();
    }
    if(getApsysCdaviobispecc())
    {
        ret["APSYS_CDAVIOBISPECC"]=getValueOfApsysCdaviobispecc();
    }
    else
    {
        ret["APSYS_CDAVIOBISPECC"]=Json::Value();
    }
    if(getApsysFlaghisperc())
    {
        ret["APSYS_FLAGHISPERC"]=getValueOfApsysFlaghisperc();
    }
    else
    {
        ret["APSYS_FLAGHISPERC"]=Json::Value();
    }
    if(getApsysRepamanuc())
    {
        ret["APSYS_REPAMANUC"]=getValueOfApsysRepamanuc();
    }
    else
    {
        ret["APSYS_REPAMANUC"]=Json::Value();
    }
    if(getApsysPerdevcalc())
    {
        ret["APSYS_PERDEVCALC"]=getValueOfApsysPerdevcalc();
    }
    else
    {
        ret["APSYS_PERDEVCALC"]=Json::Value();
    }
    if(getApsysFlaguktaxc())
    {
        ret["APSYS_FLAGUKTAXC"]=getValueOfApsysFlaguktaxc();
    }
    else
    {
        ret["APSYS_FLAGUKTAXC"]=Json::Value();
    }
    if(getApsysCdnogas())
    {
        ret["APSYS_CDNOGAS"]=getValueOfApsysCdnogas();
    }
    else
    {
        ret["APSYS_CDNOGAS"]=Json::Value();
    }
    if(getApsysStatfiscc())
    {
        ret["APSYS_STATFISCC"]=getValueOfApsysStatfiscc();
    }
    else
    {
        ret["APSYS_STATFISCC"]=Json::Value();
    }
    if(getApsysFlagfwti())
    {
        ret["APSYS_FLAGFWTI"]=getValueOfApsysFlagfwti();
    }
    else
    {
        ret["APSYS_FLAGFWTI"]=Json::Value();
    }
    if(getApsysFlagfwtuknrsdi())
    {
        ret["APSYS_FLAGFWTUKNRSDI"]=getValueOfApsysFlagfwtuknrsdi();
    }
    else
    {
        ret["APSYS_FLAGFWTUKNRSDI"]=Json::Value();
    }
    if(getApsysFlagfwttaxspegei())
    {
        ret["APSYS_FLAGFWTTAXSPEGEI"]=getValueOfApsysFlagfwttaxspegei();
    }
    else
    {
        ret["APSYS_FLAGFWTTAXSPEGEI"]=Json::Value();
    }
    if(getApsysCdfwtoptregulfiscancc())
    {
        ret["APSYS_CDFWTOPTREGULFISCANCC"]=getValueOfApsysCdfwtoptregulfiscancc();
    }
    else
    {
        ret["APSYS_CDFWTOPTREGULFISCANCC"]=Json::Value();
    }
    if(getApsysCdfwtstatregulfiscancc())
    {
        ret["APSYS_CDFWTSTATREGULFISCANCC"]=getValueOfApsysCdfwtstatregulfiscancc();
    }
    else
    {
        ret["APSYS_CDFWTSTATREGULFISCANCC"]=Json::Value();
    }
    if(getApsysCdfwtoptregulfiscfutc())
    {
        ret["APSYS_CDFWTOPTREGULFISCFUTC"]=getValueOfApsysCdfwtoptregulfiscfutc();
    }
    else
    {
        ret["APSYS_CDFWTOPTREGULFISCFUTC"]=Json::Value();
    }
    if(getSteuerlandAbgstCd())
    {
        ret["STEUERLAND_ABGST_CD"]=getValueOfSteuerlandAbgstCd();
    }
    else
    {
        ret["STEUERLAND_ABGST_CD"]=Json::Value();
    }
    if(getApsysCdnatures())
    {
        ret["APSYS_CDNATURES"]=getValueOfApsysCdnatures();
    }
    else
    {
        ret["APSYS_CDNATURES"]=Json::Value();
    }
    if(getApsysShnas())
    {
        ret["APSYS_SHNAS"]=getValueOfApsysShnas();
    }
    else
    {
        ret["APSYS_SHNAS"]=Json::Value();
    }
    if(getApsysCdpyhqdomis())
    {
        ret["APSYS_CDPYHQDOMIS"]=getValueOfApsysCdpyhqdomis();
    }
    else
    {
        ret["APSYS_CDPYHQDOMIS"]=Json::Value();
    }
    if(getApsysCdpermi())
    {
        ret["APSYS_CDPERMI"]=getValueOfApsysCdpermi();
    }
    else
    {
        ret["APSYS_CDPERMI"]=Json::Value();
    }
    if(getApsysIdrcis())
    {
        ret["APSYS_IDRCIS"]=getValueOfApsysIdrcis();
    }
    else
    {
        ret["APSYS_IDRCIS"]=Json::Value();
    }
    if(getApsysFlagisttc())
    {
        ret["APSYS_FLAGISTTC"]=getValueOfApsysFlagisttc();
    }
    else
    {
        ret["APSYS_FLAGISTTC"]=Json::Value();
    }
    if(getApsysDevevals())
    {
        ret["APSYS_DEVEVALS"]=getValueOfApsysDevevals();
    }
    else
    {
        ret["APSYS_DEVEVALS"]=Json::Value();
    }
    if(getApsysIdstrucs())
    {
        ret["APSYS_IDSTRUCS"]=getValueOfApsysIdstrucs();
    }
    else
    {
        ret["APSYS_IDSTRUCS"]=Json::Value();
    }
    if(getApsysSuiviagts())
    {
        ret["APSYS_SUIVIAGTS"]=getValueOfApsysSuiviagts();
    }
    else
    {
        ret["APSYS_SUIVIAGTS"]=Json::Value();
    }
    if(getApsysCdinduscssfs())
    {
        ret["APSYS_CDINDUSCSSFS"]=getValueOfApsysCdinduscssfs();
    }
    else
    {
        ret["APSYS_CDINDUSCSSFS"]=Json::Value();
    }
    if(getApsysCdindusbluxs())
    {
        ret["APSYS_CDINDUSBLUXS"]=getValueOfApsysCdindusbluxs();
    }
    else
    {
        ret["APSYS_CDINDUSBLUXS"]=Json::Value();
    }
    if(getApsysCdindussbuba())
    {
        ret["APSYS_CDINDUSSBUBA"]=getValueOfApsysCdindussbuba();
    }
    else
    {
        ret["APSYS_CDINDUSSBUBA"]=Json::Value();
    }
    if(getApsysCdindussbns())
    {
        ret["APSYS_CDINDUSSBNS"]=getValueOfApsysCdindussbns();
    }
    else
    {
        ret["APSYS_CDINDUSSBNS"]=Json::Value();
    }
    if(getApsysGrmtevals())
    {
        ret["APSYS_GRMTEVALS"]=getValueOfApsysGrmtevals();
    }
    else
    {
        ret["APSYS_GRMTEVALS"]=Json::Value();
    }
    if(getApsysIdpocs())
    {
        ret["APSYS_IDPOCS"]=getValueOfApsysIdpocs();
    }
    else
    {
        ret["APSYS_IDPOCS"]=Json::Value();
    }
    if(getApsysInfo())
    {
        ret["APSYS_INFO"]=getValueOfApsysInfo();
    }
    else
    {
        ret["APSYS_INFO"]=Json::Value();
    }
    if(getApsysIdents())
    {
        ret["APSYS_IDENTS"]=getValueOfApsysIdents();
    }
    else
    {
        ret["APSYS_IDENTS"]=Json::Value();
    }
    if(getApsysStatusOpec())
    {
        ret["APSYS_STATUS_OPEC"]=getValueOfApsysStatusOpec();
    }
    else
    {
        ret["APSYS_STATUS_OPEC"]=Json::Value();
    }
    if(getApsysErri())
    {
        ret["APSYS_ERRI"]=getValueOfApsysErri();
    }
    else
    {
        ret["APSYS_ERRI"]=Json::Value();
    }
    if(getNationalitaet2Cd())
    {
        ret["NATIONALITAET2_CD"]=getValueOfNationalitaet2Cd();
    }
    else
    {
        ret["NATIONALITAET2_CD"]=Json::Value();
    }
    if(getNationalitaet3Cd())
    {
        ret["NATIONALITAET3_CD"]=getValueOfNationalitaet3Cd();
    }
    else
    {
        ret["NATIONALITAET3_CD"]=Json::Value();
    }
    if(getVermoegensursprung2Cd())
    {
        ret["VERMOEGENSURSPRUNG2_CD"]=getValueOfVermoegensursprung2Cd();
    }
    else
    {
        ret["VERMOEGENSURSPRUNG2_CD"]=Json::Value();
    }
    if(getVermoegensursprung2())
    {
        ret["VERMOEGENSURSPRUNG2"]=getValueOfVermoegensursprung2();
    }
    else
    {
        ret["VERMOEGENSURSPRUNG2"]=Json::Value();
    }
    if(getApprovalStep1Cd())
    {
        ret["APPROVAL_STEP1_CD"]=getValueOfApprovalStep1Cd();
    }
    else
    {
        ret["APPROVAL_STEP1_CD"]=Json::Value();
    }
    if(getApprovalStep1User())
    {
        ret["APPROVAL_STEP1_USER"]=getValueOfApprovalStep1User();
    }
    else
    {
        ret["APPROVAL_STEP1_USER"]=Json::Value();
    }
    if(getApprovalStep1Date())
    {
        ret["APPROVAL_STEP1_DATE"]=getApprovalStep1Date()->toDbStringLocal();
    }
    else
    {
        ret["APPROVAL_STEP1_DATE"]=Json::Value();
    }
    if(getApprovalStep2Cd())
    {
        ret["APPROVAL_STEP2_CD"]=getValueOfApprovalStep2Cd();
    }
    else
    {
        ret["APPROVAL_STEP2_CD"]=Json::Value();
    }
    if(getApprovalStep2User())
    {
        ret["APPROVAL_STEP2_USER"]=getValueOfApprovalStep2User();
    }
    else
    {
        ret["APPROVAL_STEP2_USER"]=Json::Value();
    }
    if(getApprovalStep2Date())
    {
        ret["APPROVAL_STEP2_DATE"]=getApprovalStep2Date()->toDbStringLocal();
    }
    else
    {
        ret["APPROVAL_STEP2_DATE"]=Json::Value();
    }
    if(getApprovalStep3Cd())
    {
        ret["APPROVAL_STEP3_CD"]=getValueOfApprovalStep3Cd();
    }
    else
    {
        ret["APPROVAL_STEP3_CD"]=Json::Value();
    }
    if(getApprovalStep3User())
    {
        ret["APPROVAL_STEP3_USER"]=getValueOfApprovalStep3User();
    }
    else
    {
        ret["APPROVAL_STEP3_USER"]=Json::Value();
    }
    if(getApprovalStep3Date())
    {
        ret["APPROVAL_STEP3_DATE"]=getApprovalStep3Date()->toDbStringLocal();
    }
    else
    {
        ret["APPROVAL_STEP3_DATE"]=Json::Value();
    }
    if(getApprovalStep4Cd())
    {
        ret["APPROVAL_STEP4_CD"]=getValueOfApprovalStep4Cd();
    }
    else
    {
        ret["APPROVAL_STEP4_CD"]=Json::Value();
    }
    if(getApprovalStep4User())
    {
        ret["APPROVAL_STEP4_USER"]=getValueOfApprovalStep4User();
    }
    else
    {
        ret["APPROVAL_STEP4_USER"]=Json::Value();
    }
    if(getApprovalStep4Date())
    {
        ret["APPROVAL_STEP4_DATE"]=getApprovalStep4Date()->toDbStringLocal();
    }
    else
    {
        ret["APPROVAL_STEP4_DATE"]=Json::Value();
    }
    if(getApprovalStep5Cd())
    {
        ret["APPROVAL_STEP5_CD"]=getValueOfApprovalStep5Cd();
    }
    else
    {
        ret["APPROVAL_STEP5_CD"]=Json::Value();
    }
    if(getApprovalStep5User())
    {
        ret["APPROVAL_STEP5_USER"]=getValueOfApprovalStep5User();
    }
    else
    {
        ret["APPROVAL_STEP5_USER"]=Json::Value();
    }
    if(getApprovalStep5Date())
    {
        ret["APPROVAL_STEP5_DATE"]=getApprovalStep5Date()->toDbStringLocal();
    }
    else
    {
        ret["APPROVAL_STEP5_DATE"]=Json::Value();
    }
    if(getApprovalStep1Bem())
    {
        ret["APPROVAL_STEP1_BEM"]=getValueOfApprovalStep1Bem();
    }
    else
    {
        ret["APPROVAL_STEP1_BEM"]=Json::Value();
    }
    if(getApprovalStep2Bem())
    {
        ret["APPROVAL_STEP2_BEM"]=getValueOfApprovalStep2Bem();
    }
    else
    {
        ret["APPROVAL_STEP2_BEM"]=Json::Value();
    }
    if(getApprovalStep3Bem())
    {
        ret["APPROVAL_STEP3_BEM"]=getValueOfApprovalStep3Bem();
    }
    else
    {
        ret["APPROVAL_STEP3_BEM"]=Json::Value();
    }
    if(getApprovalStep4Bem())
    {
        ret["APPROVAL_STEP4_BEM"]=getValueOfApprovalStep4Bem();
    }
    else
    {
        ret["APPROVAL_STEP4_BEM"]=Json::Value();
    }
    if(getApprovalStep5Bem())
    {
        ret["APPROVAL_STEP5_BEM"]=getValueOfApprovalStep5Bem();
    }
    else
    {
        ret["APPROVAL_STEP5_BEM"]=Json::Value();
    }
    if(getApprovalStep1AssesCd())
    {
        ret["APPROVAL_STEP1_ASSES_CD"]=getValueOfApprovalStep1AssesCd();
    }
    else
    {
        ret["APPROVAL_STEP1_ASSES_CD"]=Json::Value();
    }
    if(getApprovalStep2AssesCd())
    {
        ret["APPROVAL_STEP2_ASSES_CD"]=getValueOfApprovalStep2AssesCd();
    }
    else
    {
        ret["APPROVAL_STEP2_ASSES_CD"]=Json::Value();
    }
    if(getApprovalStep3AssesCd())
    {
        ret["APPROVAL_STEP3_ASSES_CD"]=getValueOfApprovalStep3AssesCd();
    }
    else
    {
        ret["APPROVAL_STEP3_ASSES_CD"]=Json::Value();
    }
    if(getApprovalStep4AssesCd())
    {
        ret["APPROVAL_STEP4_ASSES_CD"]=getValueOfApprovalStep4AssesCd();
    }
    else
    {
        ret["APPROVAL_STEP4_ASSES_CD"]=Json::Value();
    }
    if(getApprovalStep5AssesCd())
    {
        ret["APPROVAL_STEP5_ASSES_CD"]=getValueOfApprovalStep5AssesCd();
    }
    else
    {
        ret["APPROVAL_STEP5_ASSES_CD"]=Json::Value();
    }
    if(getApprovalStatusCd())
    {
        ret["APPROVAL_STATUS_CD"]=getValueOfApprovalStatusCd();
    }
    else
    {
        ret["APPROVAL_STATUS_CD"]=Json::Value();
    }
    if(getClientStatusCd())
    {
        ret["CLIENT_STATUS_CD"]=getValueOfClientStatusCd();
    }
    else
    {
        ret["CLIENT_STATUS_CD"]=Json::Value();
    }
    if(getDischargeOrdersCd())
    {
        ret["DISCHARGE_ORDERS_CD"]=getValueOfDischargeOrdersCd();
    }
    else
    {
        ret["DISCHARGE_ORDERS_CD"]=Json::Value();
    }
    if(getPrintSummaryHoldmailOnlyCd())
    {
        ret["PRINT_SUMMARY_HOLDMAIL_ONLY_CD"]=getValueOfPrintSummaryHoldmailOnlyCd();
    }
    else
    {
        ret["PRINT_SUMMARY_HOLDMAIL_ONLY_CD"]=Json::Value();
    }
    if(getEbankingContractCd())
    {
        ret["EBANKING_CONTRACT_CD"]=getValueOfEbankingContractCd();
    }
    else
    {
        ret["EBANKING_CONTRACT_CD"]=Json::Value();
    }
    if(getEbankingContractLanguageCd())
    {
        ret["EBANKING_CONTRACT_LANGUAGE_CD"]=getValueOfEbankingContractLanguageCd();
    }
    else
    {
        ret["EBANKING_CONTRACT_LANGUAGE_CD"]=Json::Value();
    }
    if(getApsysDtechdiaryl())
    {
        ret["APSYS_DTECHDIARYL"]=getApsysDtechdiaryl()->toDbStringLocal();
    }
    else
    {
        ret["APSYS_DTECHDIARYL"]=Json::Value();
    }
    if(getApsysMotdiarys())
    {
        ret["APSYS_MOTDIARYS"]=getValueOfApsysMotdiarys();
    }
    else
    {
        ret["APSYS_MOTDIARYS"]=Json::Value();
    }
    if(getApsysIdtypcliirss())
    {
        ret["APSYS_IDTYPCLIIRSS"]=getValueOfApsysIdtypcliirss();
    }
    else
    {
        ret["APSYS_IDTYPCLIIRSS"]=Json::Value();
    }
    if(getApsysIdrciqis())
    {
        ret["APSYS_IDRCIQIS"]=getValueOfApsysIdrciqis();
    }
    else
    {
        ret["APSYS_IDRCIQIS"]=Json::Value();
    }
    if(getApsysIdrcifatcas())
    {
        ret["APSYS_IDRCIFATCAS"]=getValueOfApsysIdrcifatcas();
    }
    else
    {
        ret["APSYS_IDRCIFATCAS"]=Json::Value();
    }
    if(getMailingTarifTypeCd())
    {
        ret["MAILING_TARIF_TYPE_CD"]=getValueOfMailingTarifTypeCd();
    }
    else
    {
        ret["MAILING_TARIF_TYPE_CD"]=Json::Value();
    }
    if(getRegisteredCd())
    {
        ret["REGISTERED_CD"]=getValueOfRegisteredCd();
    }
    else
    {
        ret["REGISTERED_CD"]=Json::Value();
    }
    if(getRegisteredMailCd())
    {
        ret["REGISTERED_MAIL_CD"]=getValueOfRegisteredMailCd();
    }
    else
    {
        ret["REGISTERED_MAIL_CD"]=Json::Value();
    }
    if(getApsysNbperscpartiel())
    {
        ret["APSYS_NBPERSCPARTIEL"]=getValueOfApsysNbperscpartiel();
    }
    else
    {
        ret["APSYS_NBPERSCPARTIEL"]=Json::Value();
    }
    if(getAssetValueTierCd())
    {
        ret["ASSET_VALUE_TIER_CD"]=getValueOfAssetValueTierCd();
    }
    else
    {
        ret["ASSET_VALUE_TIER_CD"]=Json::Value();
    }
    if(getRelationshipTypeAmlCd())
    {
        ret["RELATIONSHIP_TYPE_AML_CD"]=getValueOfRelationshipTypeAmlCd();
    }
    else
    {
        ret["RELATIONSHIP_TYPE_AML_CD"]=Json::Value();
    }
    if(getCbAssetValueTierCd())
    {
        ret["CB_ASSET_VALUE_TIER_CD"]=getValueOfCbAssetValueTierCd();
    }
    else
    {
        ret["CB_ASSET_VALUE_TIER_CD"]=Json::Value();
    }
    if(getApprovalScore())
    {
        ret["APPROVAL_SCORE"]=getValueOfApprovalScore();
    }
    else
    {
        ret["APPROVAL_SCORE"]=Json::Value();
    }
    if(getApprovalScoreSteps())
    {
        ret["APPROVAL_SCORE_STEPS"]=getValueOfApprovalScoreSteps();
    }
    else
    {
        ret["APPROVAL_SCORE_STEPS"]=Json::Value();
    }
    if(getApsysDtdebpartl())
    {
        ret["APSYS_DTDEBPARTL"]=getApsysDtdebpartl()->toDbStringLocal();
    }
    else
    {
        ret["APSYS_DTDEBPARTL"]=Json::Value();
    }
    if(getApsysDtfinpartl())
    {
        ret["APSYS_DTFINPARTL"]=getApsysDtfinpartl()->toDbStringLocal();
    }
    else
    {
        ret["APSYS_DTFINPARTL"]=Json::Value();
    }
    if(getApsysCdmotifclos())
    {
        ret["APSYS_CDMOTIFCLOS"]=getValueOfApsysCdmotifclos();
    }
    else
    {
        ret["APSYS_CDMOTIFCLOS"]=Json::Value();
    }
    if(getApsysCdnaturecpartieemirc())
    {
        ret["APSYS_CDNATURECPARTIEEMIRC"]=getValueOfApsysCdnaturecpartieemirc();
    }
    else
    {
        ret["APSYS_CDNATURECPARTIEEMIRC"]=Json::Value();
    }
    if(getApsysFlagotheremirc())
    {
        ret["APSYS_FLAGOTHEREMIRC"]=getValueOfApsysFlagotheremirc();
    }
    else
    {
        ret["APSYS_FLAGOTHEREMIRC"]=Json::Value();
    }
    if(getApsysCdindusemirs())
    {
        ret["APSYS_CDINDUSEMIRS"]=getValueOfApsysCdindusemirs();
    }
    else
    {
        ret["APSYS_CDINDUSEMIRS"]=Json::Value();
    }
    if(getOpenedInApsysDate())
    {
        ret["OPENED_IN_APSYS_DATE"]=getOpenedInApsysDate()->toDbStringLocal();
    }
    else
    {
        ret["OPENED_IN_APSYS_DATE"]=Json::Value();
    }
    if(getApsysCdnaturecpartiefmiac())
    {
        ret["APSYS_CDNATURECPARTIEFMIAC"]=getValueOfApsysCdnaturecpartiefmiac();
    }
    else
    {
        ret["APSYS_CDNATURECPARTIEFMIAC"]=Json::Value();
    }
    if(getEbankingClosedCd())
    {
        ret["EBANKING_CLOSED_CD"]=getValueOfEbankingClosedCd();
    }
    else
    {
        ret["EBANKING_CLOSED_CD"]=Json::Value();
    }
    if(getEbankingClosingdate())
    {
        ret["EBANKING_CLOSINGDATE"]=getEbankingClosingdate()->toDbStringLocal();
    }
    else
    {
        ret["EBANKING_CLOSINGDATE"]=Json::Value();
    }
    if(getKycReviewProcessStartDate())
    {
        ret["KYC_REVIEW_PROCESS_START_DATE"]=getKycReviewProcessStartDate()->toDbStringLocal();
    }
    else
    {
        ret["KYC_REVIEW_PROCESS_START_DATE"]=Json::Value();
    }
    if(getRemarks())
    {
        ret["REMARKS"]=getValueOfRemarks();
    }
    else
    {
        ret["REMARKS"]=Json::Value();
    }
    if(getTransactionBlCountryCd())
    {
        ret["TRANSACTION_BL_COUNTRY_CD"]=getValueOfTransactionBlCountryCd();
    }
    else
    {
        ret["TRANSACTION_BL_COUNTRY_CD"]=Json::Value();
    }
    if(getClientgroupCd())
    {
        ret["CLIENTGROUP_CD"]=getValueOfClientgroupCd();
    }
    else
    {
        ret["CLIENTGROUP_CD"]=Json::Value();
    }
    if(getRiskindexCalc())
    {
        ret["RISKINDEX_CALC"]=getValueOfRiskindexCalc();
    }
    else
    {
        ret["RISKINDEX_CALC"]=Json::Value();
    }
    if(getLastCalcCriMutdatum())
    {
        ret["LAST_CALC_CRI_MUTDATUM"]=getLastCalcCriMutdatum()->toDbStringLocal();
    }
    else
    {
        ret["LAST_CALC_CRI_MUTDATUM"]=Json::Value();
    }
    if(getRisikokategorieCalcCd())
    {
        ret["RISIKOKATEGORIE_CALC_CD"]=getValueOfRisikokategorieCalcCd();
    }
    else
    {
        ret["RISIKOKATEGORIE_CALC_CD"]=Json::Value();
    }
    if(getRiskindexGroup())
    {
        ret["RISKINDEX_GROUP"]=getValueOfRiskindexGroup();
    }
    else
    {
        ret["RISKINDEX_GROUP"]=Json::Value();
    }
    if(getEstAmountRemWithMutdatum())
    {
        ret["EST_AMOUNT_REM_WITH_MUTDATUM"]=getEstAmountRemWithMutdatum()->toDbStringLocal();
    }
    else
    {
        ret["EST_AMOUNT_REM_WITH_MUTDATUM"]=Json::Value();
    }
    if(getGesamtvermoegenMutdatum())
    {
        ret["GESAMTVERMOEGEN_MUTDATUM"]=getGesamtvermoegenMutdatum()->toDbStringLocal();
    }
    else
    {
        ret["GESAMTVERMOEGEN_MUTDATUM"]=Json::Value();
    }
    if(getTransactBlCountryMutdatum())
    {
        ret["TRANSACT_BL_COUNTRY_MUTDATUM"]=getTransactBlCountryMutdatum()->toDbStringLocal();
    }
    else
    {
        ret["TRANSACT_BL_COUNTRY_MUTDATUM"]=Json::Value();
    }
    if(getAccountpurposeMutdatum())
    {
        ret["ACCOUNTPURPOSE_MUTDATUM"]=getAccountpurposeMutdatum()->toDbStringLocal();
    }
    else
    {
        ret["ACCOUNTPURPOSE_MUTDATUM"]=Json::Value();
    }
    if(getApsysFlagdeldatapersi())
    {
        ret["APSYS_FLAGDELDATAPERSI"]=getValueOfApsysFlagdeldatapersi();
    }
    else
    {
        ret["APSYS_FLAGDELDATAPERSI"]=Json::Value();
    }
    if(getApsysDtwaitdeldatapersl())
    {
        ret["APSYS_DTWAITDELDATAPERSL"]=getApsysDtwaitdeldatapersl()->toDbStringLocal();
    }
    else
    {
        ret["APSYS_DTWAITDELDATAPERSL"]=Json::Value();
    }
    if(getNameEnc())
    {
        ret["NAME_ENC"]=getValueOfNameEnc();
    }
    else
    {
        ret["NAME_ENC"]=Json::Value();
    }
    if(getInApsysTempEntsperrenCd())
    {
        ret["IN_APSYS_TEMP_ENTSPERREN_CD"]=getValueOfInApsysTempEntsperrenCd();
    }
    else
    {
        ret["IN_APSYS_TEMP_ENTSPERREN_CD"]=Json::Value();
    }
    if(getInApsysTempEntspUserid())
    {
        ret["IN_APSYS_TEMP_ENTSP_USERID"]=getValueOfInApsysTempEntspUserid();
    }
    else
    {
        ret["IN_APSYS_TEMP_ENTSP_USERID"]=Json::Value();
    }
    if(getInApsysTempEntspDatum())
    {
        ret["IN_APSYS_TEMP_ENTSP_DATUM"]=getInApsysTempEntspDatum()->toDbStringLocal();
    }
    else
    {
        ret["IN_APSYS_TEMP_ENTSP_DATUM"]=Json::Value();
    }
    if(getApsysCdregs())
    {
        ret["APSYS_CDREGS"]=getValueOfApsysCdregs();
    }
    else
    {
        ret["APSYS_CDREGS"]=Json::Value();
    }
    if(getRetentionOnHold())
    {
        ret["RETENTION_ON_HOLD"]=getValueOfRetentionOnHold();
    }
    else
    {
        ret["RETENTION_ON_HOLD"]=Json::Value();
    }
    if(getRetentionOnHoldDate())
    {
        ret["RETENTION_ON_HOLD_DATE"]=getRetentionOnHoldDate()->toDbStringLocal();
    }
    else
    {
        ret["RETENTION_ON_HOLD_DATE"]=Json::Value();
    }
    if(getRetentionOnHoldReason())
    {
        ret["RETENTION_ON_HOLD_REASON"]=getValueOfRetentionOnHoldReason();
    }
    else
    {
        ret["RETENTION_ON_HOLD_REASON"]=Json::Value();
    }
    if(getLogicalErasure())
    {
        ret["LOGICAL_ERASURE"]=getValueOfLogicalErasure();
    }
    else
    {
        ret["LOGICAL_ERASURE"]=Json::Value();
    }
    if(getLogicalErasureDate())
    {
        ret["LOGICAL_ERASURE_DATE"]=getLogicalErasureDate()->toDbStringLocal();
    }
    else
    {
        ret["LOGICAL_ERASURE_DATE"]=Json::Value();
    }
    if(getLogicalErasureReason())
    {
        ret["LOGICAL_ERASURE_REASON"]=getValueOfLogicalErasureReason();
    }
    else
    {
        ret["LOGICAL_ERASURE_REASON"]=Json::Value();
    }
    if(getComplianceMinRiskCategory())
    {
        ret["COMPLIANCE_MIN_RISK_CATEGORY"]=getValueOfComplianceMinRiskCategory();
    }
    else
    {
        ret["COMPLIANCE_MIN_RISK_CATEGORY"]=Json::Value();
    }
    if(getComplianceMinRiskComment())
    {
        ret["COMPLIANCE_MIN_RISK_COMMENT"]=getValueOfComplianceMinRiskComment();
    }
    else
    {
        ret["COMPLIANCE_MIN_RISK_COMMENT"]=Json::Value();
    }
    if(getClientStructureCd())
    {
        ret["CLIENT_STRUCTURE_CD"]=getValueOfClientStructureCd();
    }
    else
    {
        ret["CLIENT_STRUCTURE_CD"]=Json::Value();
    }
    if(getClientSubstructureCd())
    {
        ret["CLIENT_SUBSTRUCTURE_CD"]=getValueOfClientSubstructureCd();
    }
    else
    {
        ret["CLIENT_SUBSTRUCTURE_CD"]=Json::Value();
    }
    return ret;
}

Json::Value Kunde::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 195)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getKundenid())
            {
                ret[pMasqueradingVector[0]]=getValueOfKundenid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getBezeichnung())
            {
                ret[pMasqueradingVector[1]]=getValueOfBezeichnung();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getKundeseit())
            {
                ret[pMasqueradingVector[2]]=getKundeseit()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getVertragsparteiCd())
            {
                ret[pMasqueradingVector[3]]=getValueOfVertragsparteiCd();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getLoeschCd())
            {
                ret[pMasqueradingVector[4]]=getValueOfLoeschCd();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getLoeschdatum())
            {
                ret[pMasqueradingVector[5]]=getLoeschdatum()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getCrtdatum())
            {
                ret[pMasqueradingVector[6]]=getCrtdatum()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getCrtuser())
            {
                ret[pMasqueradingVector[7]]=getValueOfCrtuser();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getMutdatum())
            {
                ret[pMasqueradingVector[8]]=getMutdatum()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getMutuser())
            {
                ret[pMasqueradingVector[9]]=getValueOfMutuser();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getPseudoaccountCd())
            {
                ret[pMasqueradingVector[10]]=getValueOfPseudoaccountCd();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getKundebesuch())
            {
                ret[pMasqueradingVector[11]]=getKundebesuch()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getBezeichnungvertrag())
            {
                ret[pMasqueradingVector[12]]=getValueOfBezeichnungvertrag();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getPseudonym())
            {
                ret[pMasqueradingVector[13]]=getValueOfPseudonym();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getRechtsdomizilCd())
            {
                ret[pMasqueradingVector[14]]=getValueOfRechtsdomizilCd();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getKorrespondenzsprachCd())
            {
                ret[pMasqueradingVector[15]]=getValueOfKorrespondenzsprachCd();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getMitProfilCd())
            {
                ret[pMasqueradingVector[16]]=getValueOfMitProfilCd();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getGemeinschaftskontoCd())
            {
                ret[pMasqueradingVector[17]]=getValueOfGemeinschaftskontoCd();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getPin())
            {
                ret[pMasqueradingVector[18]]=getValueOfPin();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getVerwendungszweck())
            {
                ret[pMasqueradingVector[19]]=getValueOfVerwendungszweck();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getIdentifikationsartCd())
            {
                ret[pMasqueradingVector[20]]=getValueOfIdentifikationsartCd();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[21].empty())
        {
            if(getVermoegensursprungCd())
            {
                ret[pMasqueradingVector[21]]=getValueOfVermoegensursprungCd();
            }
            else
            {
                ret[pMasqueradingVector[21]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[22].empty())
        {
            if(getVermoegensursprung())
            {
                ret[pMasqueradingVector[22]]=getValueOfVermoegensursprung();
            }
            else
            {
                ret[pMasqueradingVector[22]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[23].empty())
        {
            if(getGeldvonkonto())
            {
                ret[pMasqueradingVector[23]]=getValueOfGeldvonkonto();
            }
            else
            {
                ret[pMasqueradingVector[23]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[24].empty())
        {
            if(getBisherigebetreuung())
            {
                ret[pMasqueradingVector[24]]=getValueOfBisherigebetreuung();
            }
            else
            {
                ret[pMasqueradingVector[24]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[25].empty())
        {
            if(getBisherigebetreuungseit())
            {
                ret[pMasqueradingVector[25]]=getBisherigebetreuungseit()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[25]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[26].empty())
        {
            if(getManualopenCd())
            {
                ret[pMasqueradingVector[26]]=getValueOfManualopenCd();
            }
            else
            {
                ret[pMasqueradingVector[26]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[27].empty())
        {
            if(getEinVermoegenCd())
            {
                ret[pMasqueradingVector[27]]=getValueOfEinVermoegenCd();
            }
            else
            {
                ret[pMasqueradingVector[27]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[28].empty())
        {
            if(getRegionzahlungCd())
            {
                ret[pMasqueradingVector[28]]=getValueOfRegionzahlungCd();
            }
            else
            {
                ret[pMasqueradingVector[28]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[29].empty())
        {
            if(getEinVermoegenartCd())
            {
                ret[pMasqueradingVector[29]]=getValueOfEinVermoegenartCd();
            }
            else
            {
                ret[pMasqueradingVector[29]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[30].empty())
        {
            if(getSpezWuenscheCd())
            {
                ret[pMasqueradingVector[30]]=getValueOfSpezWuenscheCd();
            }
            else
            {
                ret[pMasqueradingVector[30]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[31].empty())
        {
            if(getManagerCd())
            {
                ret[pMasqueradingVector[31]]=getValueOfManagerCd();
            }
            else
            {
                ret[pMasqueradingVector[31]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[32].empty())
        {
            if(getRiskindex())
            {
                ret[pMasqueradingVector[32]]=getValueOfRiskindex();
            }
            else
            {
                ret[pMasqueradingVector[32]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[33].empty())
        {
            if(getRiskindexGueltiseit())
            {
                ret[pMasqueradingVector[33]]=getRiskindexGueltiseit()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[33]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[34].empty())
        {
            if(getRiskindexLetzteberechnung())
            {
                ret[pMasqueradingVector[34]]=getRiskindexLetzteberechnung()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[34]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[35].empty())
        {
            if(getKontoeroeffnungsartCd())
            {
                ret[pMasqueradingVector[35]]=getValueOfKontoeroeffnungsartCd();
            }
            else
            {
                ret[pMasqueradingVector[35]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[36].empty())
        {
            if(getRiskindexberechnenCd())
            {
                ret[pMasqueradingVector[36]]=getValueOfRiskindexberechnenCd();
            }
            else
            {
                ret[pMasqueradingVector[36]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[37].empty())
        {
            if(getKundennaturCd())
            {
                ret[pMasqueradingVector[37]]=getValueOfKundennaturCd();
            }
            else
            {
                ret[pMasqueradingVector[37]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[38].empty())
        {
            if(getRisikokategorieCd())
            {
                ret[pMasqueradingVector[38]]=getValueOfRisikokategorieCd();
            }
            else
            {
                ret[pMasqueradingVector[38]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[39].empty())
        {
            if(getPepCd())
            {
                ret[pMasqueradingVector[39]]=getValueOfPepCd();
            }
            else
            {
                ret[pMasqueradingVector[39]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[40].empty())
        {
            if(getSpezialkategorieCd())
            {
                ret[pMasqueradingVector[40]]=getValueOfSpezialkategorieCd();
            }
            else
            {
                ret[pMasqueradingVector[40]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[41].empty())
        {
            if(getNatureCd())
            {
                ret[pMasqueradingVector[41]]=getValueOfNatureCd();
            }
            else
            {
                ret[pMasqueradingVector[41]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[42].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[42]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[42]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[43].empty())
        {
            if(getLedigername())
            {
                ret[pMasqueradingVector[43]]=getValueOfLedigername();
            }
            else
            {
                ret[pMasqueradingVector[43]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[44].empty())
        {
            if(getVorname())
            {
                ret[pMasqueradingVector[44]]=getValueOfVorname();
            }
            else
            {
                ret[pMasqueradingVector[44]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[45].empty())
        {
            if(getCdpartc())
            {
                ret[pMasqueradingVector[45]]=getValueOfCdpartc();
            }
            else
            {
                ret[pMasqueradingVector[45]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[46].empty())
        {
            if(getNationalitaetCd())
            {
                ret[pMasqueradingVector[46]]=getValueOfNationalitaetCd();
            }
            else
            {
                ret[pMasqueradingVector[46]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[47].empty())
        {
            if(getRisikolandCd())
            {
                ret[pMasqueradingVector[47]]=getValueOfRisikolandCd();
            }
            else
            {
                ret[pMasqueradingVector[47]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[48].empty())
        {
            if(getPersoenlichbekanntCd())
            {
                ret[pMasqueradingVector[48]]=getValueOfPersoenlichbekanntCd();
            }
            else
            {
                ret[pMasqueradingVector[48]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[49].empty())
        {
            if(getRisikotaetigkeitCd())
            {
                ret[pMasqueradingVector[49]]=getValueOfRisikotaetigkeitCd();
            }
            else
            {
                ret[pMasqueradingVector[49]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[50].empty())
        {
            if(getSteuerdomizilCd())
            {
                ret[pMasqueradingVector[50]]=getValueOfSteuerdomizilCd();
            }
            else
            {
                ret[pMasqueradingVector[50]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[51].empty())
        {
            if(getEuTaxstatusCd())
            {
                ret[pMasqueradingVector[51]]=getValueOfEuTaxstatusCd();
            }
            else
            {
                ret[pMasqueradingVector[51]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[52].empty())
        {
            if(getTin())
            {
                ret[pMasqueradingVector[52]]=getValueOfTin();
            }
            else
            {
                ret[pMasqueradingVector[52]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[53].empty())
        {
            if(getApsysCdrolpersi())
            {
                ret[pMasqueradingVector[53]]=getValueOfApsysCdrolpersi();
            }
            else
            {
                ret[pMasqueradingVector[53]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[54].empty())
        {
            if(getVertragsprachCd())
            {
                ret[pMasqueradingVector[54]]=getValueOfVertragsprachCd();
            }
            else
            {
                ret[pMasqueradingVector[54]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[55].empty())
        {
            if(getVermoegenskategorieIhagCd())
            {
                ret[pMasqueradingVector[55]]=getValueOfVermoegenskategorieIhagCd();
            }
            else
            {
                ret[pMasqueradingVector[55]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[56].empty())
        {
            if(getApsysIntishs())
            {
                ret[pMasqueradingVector[56]]=getValueOfApsysIntishs();
            }
            else
            {
                ret[pMasqueradingVector[56]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[57].empty())
        {
            if(getApsysIntilgs())
            {
                ret[pMasqueradingVector[57]]=getValueOfApsysIntilgs();
            }
            else
            {
                ret[pMasqueradingVector[57]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[58].empty())
        {
            if(getGesamtvermoegenCd())
            {
                ret[pMasqueradingVector[58]]=getValueOfGesamtvermoegenCd();
            }
            else
            {
                ret[pMasqueradingVector[58]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[59].empty())
        {
            if(getComplianceOkCd())
            {
                ret[pMasqueradingVector[59]]=getValueOfComplianceOkCd();
            }
            else
            {
                ret[pMasqueradingVector[59]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[60].empty())
        {
            if(getComplianceOkBemerkung())
            {
                ret[pMasqueradingVector[60]]=getValueOfComplianceOkBemerkung();
            }
            else
            {
                ret[pMasqueradingVector[60]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[61].empty())
        {
            if(getComplianceOkDatum())
            {
                ret[pMasqueradingVector[61]]=getComplianceOkDatum()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[61]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[62].empty())
        {
            if(getComplianceOkUserid())
            {
                ret[pMasqueradingVector[62]]=getValueOfComplianceOkUserid();
            }
            else
            {
                ret[pMasqueradingVector[62]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[63].empty())
        {
            if(getEinVermoegen())
            {
                ret[pMasqueradingVector[63]]=getValueOfEinVermoegen();
            }
            else
            {
                ret[pMasqueradingVector[63]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[64].empty())
        {
            if(getSegmentierungCd())
            {
                ret[pMasqueradingVector[64]]=getValueOfSegmentierungCd();
            }
            else
            {
                ret[pMasqueradingVector[64]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[65].empty())
        {
            if(getAktid())
            {
                ret[pMasqueradingVector[65]]=getValueOfAktid();
            }
            else
            {
                ret[pMasqueradingVector[65]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[66].empty())
        {
            if(getValidid())
            {
                ret[pMasqueradingVector[66]]=getValueOfValidid();
            }
            else
            {
                ret[pMasqueradingVector[66]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[67].empty())
        {
            if(getValidCd())
            {
                ret[pMasqueradingVector[67]]=getValueOfValidCd();
            }
            else
            {
                ret[pMasqueradingVector[67]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[68].empty())
        {
            if(getValiduser())
            {
                ret[pMasqueradingVector[68]]=getValueOfValiduser();
            }
            else
            {
                ret[pMasqueradingVector[68]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[69].empty())
        {
            if(getEncSalt())
            {
                ret[pMasqueradingVector[69]]=getValueOfEncSalt();
            }
            else
            {
                ret[pMasqueradingVector[69]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[70].empty())
        {
            if(getBezeichnungEnc())
            {
                ret[pMasqueradingVector[70]]=getValueOfBezeichnungEnc();
            }
            else
            {
                ret[pMasqueradingVector[70]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[71].empty())
        {
            if(getApsysCdmotifparts())
            {
                ret[pMasqueradingVector[71]]=getValueOfApsysCdmotifparts();
            }
            else
            {
                ret[pMasqueradingVector[71]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[72].empty())
        {
            if(getApsysCdindus0s())
            {
                ret[pMasqueradingVector[72]]=getValueOfApsysCdindus0s();
            }
            else
            {
                ret[pMasqueradingVector[72]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[73].empty())
        {
            if(getApsysFlagpreavisexec())
            {
                ret[pMasqueradingVector[73]]=getValueOfApsysFlagpreavisexec();
            }
            else
            {
                ret[pMasqueradingVector[73]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[74].empty())
        {
            if(getApsysCdaviobispecc())
            {
                ret[pMasqueradingVector[74]]=getValueOfApsysCdaviobispecc();
            }
            else
            {
                ret[pMasqueradingVector[74]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[75].empty())
        {
            if(getApsysFlaghisperc())
            {
                ret[pMasqueradingVector[75]]=getValueOfApsysFlaghisperc();
            }
            else
            {
                ret[pMasqueradingVector[75]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[76].empty())
        {
            if(getApsysRepamanuc())
            {
                ret[pMasqueradingVector[76]]=getValueOfApsysRepamanuc();
            }
            else
            {
                ret[pMasqueradingVector[76]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[77].empty())
        {
            if(getApsysPerdevcalc())
            {
                ret[pMasqueradingVector[77]]=getValueOfApsysPerdevcalc();
            }
            else
            {
                ret[pMasqueradingVector[77]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[78].empty())
        {
            if(getApsysFlaguktaxc())
            {
                ret[pMasqueradingVector[78]]=getValueOfApsysFlaguktaxc();
            }
            else
            {
                ret[pMasqueradingVector[78]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[79].empty())
        {
            if(getApsysCdnogas())
            {
                ret[pMasqueradingVector[79]]=getValueOfApsysCdnogas();
            }
            else
            {
                ret[pMasqueradingVector[79]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[80].empty())
        {
            if(getApsysStatfiscc())
            {
                ret[pMasqueradingVector[80]]=getValueOfApsysStatfiscc();
            }
            else
            {
                ret[pMasqueradingVector[80]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[81].empty())
        {
            if(getApsysFlagfwti())
            {
                ret[pMasqueradingVector[81]]=getValueOfApsysFlagfwti();
            }
            else
            {
                ret[pMasqueradingVector[81]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[82].empty())
        {
            if(getApsysFlagfwtuknrsdi())
            {
                ret[pMasqueradingVector[82]]=getValueOfApsysFlagfwtuknrsdi();
            }
            else
            {
                ret[pMasqueradingVector[82]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[83].empty())
        {
            if(getApsysFlagfwttaxspegei())
            {
                ret[pMasqueradingVector[83]]=getValueOfApsysFlagfwttaxspegei();
            }
            else
            {
                ret[pMasqueradingVector[83]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[84].empty())
        {
            if(getApsysCdfwtoptregulfiscancc())
            {
                ret[pMasqueradingVector[84]]=getValueOfApsysCdfwtoptregulfiscancc();
            }
            else
            {
                ret[pMasqueradingVector[84]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[85].empty())
        {
            if(getApsysCdfwtstatregulfiscancc())
            {
                ret[pMasqueradingVector[85]]=getValueOfApsysCdfwtstatregulfiscancc();
            }
            else
            {
                ret[pMasqueradingVector[85]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[86].empty())
        {
            if(getApsysCdfwtoptregulfiscfutc())
            {
                ret[pMasqueradingVector[86]]=getValueOfApsysCdfwtoptregulfiscfutc();
            }
            else
            {
                ret[pMasqueradingVector[86]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[87].empty())
        {
            if(getSteuerlandAbgstCd())
            {
                ret[pMasqueradingVector[87]]=getValueOfSteuerlandAbgstCd();
            }
            else
            {
                ret[pMasqueradingVector[87]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[88].empty())
        {
            if(getApsysCdnatures())
            {
                ret[pMasqueradingVector[88]]=getValueOfApsysCdnatures();
            }
            else
            {
                ret[pMasqueradingVector[88]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[89].empty())
        {
            if(getApsysShnas())
            {
                ret[pMasqueradingVector[89]]=getValueOfApsysShnas();
            }
            else
            {
                ret[pMasqueradingVector[89]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[90].empty())
        {
            if(getApsysCdpyhqdomis())
            {
                ret[pMasqueradingVector[90]]=getValueOfApsysCdpyhqdomis();
            }
            else
            {
                ret[pMasqueradingVector[90]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[91].empty())
        {
            if(getApsysCdpermi())
            {
                ret[pMasqueradingVector[91]]=getValueOfApsysCdpermi();
            }
            else
            {
                ret[pMasqueradingVector[91]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[92].empty())
        {
            if(getApsysIdrcis())
            {
                ret[pMasqueradingVector[92]]=getValueOfApsysIdrcis();
            }
            else
            {
                ret[pMasqueradingVector[92]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[93].empty())
        {
            if(getApsysFlagisttc())
            {
                ret[pMasqueradingVector[93]]=getValueOfApsysFlagisttc();
            }
            else
            {
                ret[pMasqueradingVector[93]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[94].empty())
        {
            if(getApsysDevevals())
            {
                ret[pMasqueradingVector[94]]=getValueOfApsysDevevals();
            }
            else
            {
                ret[pMasqueradingVector[94]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[95].empty())
        {
            if(getApsysIdstrucs())
            {
                ret[pMasqueradingVector[95]]=getValueOfApsysIdstrucs();
            }
            else
            {
                ret[pMasqueradingVector[95]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[96].empty())
        {
            if(getApsysSuiviagts())
            {
                ret[pMasqueradingVector[96]]=getValueOfApsysSuiviagts();
            }
            else
            {
                ret[pMasqueradingVector[96]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[97].empty())
        {
            if(getApsysCdinduscssfs())
            {
                ret[pMasqueradingVector[97]]=getValueOfApsysCdinduscssfs();
            }
            else
            {
                ret[pMasqueradingVector[97]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[98].empty())
        {
            if(getApsysCdindusbluxs())
            {
                ret[pMasqueradingVector[98]]=getValueOfApsysCdindusbluxs();
            }
            else
            {
                ret[pMasqueradingVector[98]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[99].empty())
        {
            if(getApsysCdindussbuba())
            {
                ret[pMasqueradingVector[99]]=getValueOfApsysCdindussbuba();
            }
            else
            {
                ret[pMasqueradingVector[99]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[100].empty())
        {
            if(getApsysCdindussbns())
            {
                ret[pMasqueradingVector[100]]=getValueOfApsysCdindussbns();
            }
            else
            {
                ret[pMasqueradingVector[100]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[101].empty())
        {
            if(getApsysGrmtevals())
            {
                ret[pMasqueradingVector[101]]=getValueOfApsysGrmtevals();
            }
            else
            {
                ret[pMasqueradingVector[101]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[102].empty())
        {
            if(getApsysIdpocs())
            {
                ret[pMasqueradingVector[102]]=getValueOfApsysIdpocs();
            }
            else
            {
                ret[pMasqueradingVector[102]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[103].empty())
        {
            if(getApsysInfo())
            {
                ret[pMasqueradingVector[103]]=getValueOfApsysInfo();
            }
            else
            {
                ret[pMasqueradingVector[103]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[104].empty())
        {
            if(getApsysIdents())
            {
                ret[pMasqueradingVector[104]]=getValueOfApsysIdents();
            }
            else
            {
                ret[pMasqueradingVector[104]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[105].empty())
        {
            if(getApsysStatusOpec())
            {
                ret[pMasqueradingVector[105]]=getValueOfApsysStatusOpec();
            }
            else
            {
                ret[pMasqueradingVector[105]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[106].empty())
        {
            if(getApsysErri())
            {
                ret[pMasqueradingVector[106]]=getValueOfApsysErri();
            }
            else
            {
                ret[pMasqueradingVector[106]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[107].empty())
        {
            if(getNationalitaet2Cd())
            {
                ret[pMasqueradingVector[107]]=getValueOfNationalitaet2Cd();
            }
            else
            {
                ret[pMasqueradingVector[107]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[108].empty())
        {
            if(getNationalitaet3Cd())
            {
                ret[pMasqueradingVector[108]]=getValueOfNationalitaet3Cd();
            }
            else
            {
                ret[pMasqueradingVector[108]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[109].empty())
        {
            if(getVermoegensursprung2Cd())
            {
                ret[pMasqueradingVector[109]]=getValueOfVermoegensursprung2Cd();
            }
            else
            {
                ret[pMasqueradingVector[109]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[110].empty())
        {
            if(getVermoegensursprung2())
            {
                ret[pMasqueradingVector[110]]=getValueOfVermoegensursprung2();
            }
            else
            {
                ret[pMasqueradingVector[110]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[111].empty())
        {
            if(getApprovalStep1Cd())
            {
                ret[pMasqueradingVector[111]]=getValueOfApprovalStep1Cd();
            }
            else
            {
                ret[pMasqueradingVector[111]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[112].empty())
        {
            if(getApprovalStep1User())
            {
                ret[pMasqueradingVector[112]]=getValueOfApprovalStep1User();
            }
            else
            {
                ret[pMasqueradingVector[112]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[113].empty())
        {
            if(getApprovalStep1Date())
            {
                ret[pMasqueradingVector[113]]=getApprovalStep1Date()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[113]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[114].empty())
        {
            if(getApprovalStep2Cd())
            {
                ret[pMasqueradingVector[114]]=getValueOfApprovalStep2Cd();
            }
            else
            {
                ret[pMasqueradingVector[114]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[115].empty())
        {
            if(getApprovalStep2User())
            {
                ret[pMasqueradingVector[115]]=getValueOfApprovalStep2User();
            }
            else
            {
                ret[pMasqueradingVector[115]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[116].empty())
        {
            if(getApprovalStep2Date())
            {
                ret[pMasqueradingVector[116]]=getApprovalStep2Date()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[116]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[117].empty())
        {
            if(getApprovalStep3Cd())
            {
                ret[pMasqueradingVector[117]]=getValueOfApprovalStep3Cd();
            }
            else
            {
                ret[pMasqueradingVector[117]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[118].empty())
        {
            if(getApprovalStep3User())
            {
                ret[pMasqueradingVector[118]]=getValueOfApprovalStep3User();
            }
            else
            {
                ret[pMasqueradingVector[118]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[119].empty())
        {
            if(getApprovalStep3Date())
            {
                ret[pMasqueradingVector[119]]=getApprovalStep3Date()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[119]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[120].empty())
        {
            if(getApprovalStep4Cd())
            {
                ret[pMasqueradingVector[120]]=getValueOfApprovalStep4Cd();
            }
            else
            {
                ret[pMasqueradingVector[120]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[121].empty())
        {
            if(getApprovalStep4User())
            {
                ret[pMasqueradingVector[121]]=getValueOfApprovalStep4User();
            }
            else
            {
                ret[pMasqueradingVector[121]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[122].empty())
        {
            if(getApprovalStep4Date())
            {
                ret[pMasqueradingVector[122]]=getApprovalStep4Date()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[122]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[123].empty())
        {
            if(getApprovalStep5Cd())
            {
                ret[pMasqueradingVector[123]]=getValueOfApprovalStep5Cd();
            }
            else
            {
                ret[pMasqueradingVector[123]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[124].empty())
        {
            if(getApprovalStep5User())
            {
                ret[pMasqueradingVector[124]]=getValueOfApprovalStep5User();
            }
            else
            {
                ret[pMasqueradingVector[124]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[125].empty())
        {
            if(getApprovalStep5Date())
            {
                ret[pMasqueradingVector[125]]=getApprovalStep5Date()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[125]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[126].empty())
        {
            if(getApprovalStep1Bem())
            {
                ret[pMasqueradingVector[126]]=getValueOfApprovalStep1Bem();
            }
            else
            {
                ret[pMasqueradingVector[126]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[127].empty())
        {
            if(getApprovalStep2Bem())
            {
                ret[pMasqueradingVector[127]]=getValueOfApprovalStep2Bem();
            }
            else
            {
                ret[pMasqueradingVector[127]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[128].empty())
        {
            if(getApprovalStep3Bem())
            {
                ret[pMasqueradingVector[128]]=getValueOfApprovalStep3Bem();
            }
            else
            {
                ret[pMasqueradingVector[128]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[129].empty())
        {
            if(getApprovalStep4Bem())
            {
                ret[pMasqueradingVector[129]]=getValueOfApprovalStep4Bem();
            }
            else
            {
                ret[pMasqueradingVector[129]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[130].empty())
        {
            if(getApprovalStep5Bem())
            {
                ret[pMasqueradingVector[130]]=getValueOfApprovalStep5Bem();
            }
            else
            {
                ret[pMasqueradingVector[130]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[131].empty())
        {
            if(getApprovalStep1AssesCd())
            {
                ret[pMasqueradingVector[131]]=getValueOfApprovalStep1AssesCd();
            }
            else
            {
                ret[pMasqueradingVector[131]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[132].empty())
        {
            if(getApprovalStep2AssesCd())
            {
                ret[pMasqueradingVector[132]]=getValueOfApprovalStep2AssesCd();
            }
            else
            {
                ret[pMasqueradingVector[132]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[133].empty())
        {
            if(getApprovalStep3AssesCd())
            {
                ret[pMasqueradingVector[133]]=getValueOfApprovalStep3AssesCd();
            }
            else
            {
                ret[pMasqueradingVector[133]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[134].empty())
        {
            if(getApprovalStep4AssesCd())
            {
                ret[pMasqueradingVector[134]]=getValueOfApprovalStep4AssesCd();
            }
            else
            {
                ret[pMasqueradingVector[134]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[135].empty())
        {
            if(getApprovalStep5AssesCd())
            {
                ret[pMasqueradingVector[135]]=getValueOfApprovalStep5AssesCd();
            }
            else
            {
                ret[pMasqueradingVector[135]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[136].empty())
        {
            if(getApprovalStatusCd())
            {
                ret[pMasqueradingVector[136]]=getValueOfApprovalStatusCd();
            }
            else
            {
                ret[pMasqueradingVector[136]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[137].empty())
        {
            if(getClientStatusCd())
            {
                ret[pMasqueradingVector[137]]=getValueOfClientStatusCd();
            }
            else
            {
                ret[pMasqueradingVector[137]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[138].empty())
        {
            if(getDischargeOrdersCd())
            {
                ret[pMasqueradingVector[138]]=getValueOfDischargeOrdersCd();
            }
            else
            {
                ret[pMasqueradingVector[138]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[139].empty())
        {
            if(getPrintSummaryHoldmailOnlyCd())
            {
                ret[pMasqueradingVector[139]]=getValueOfPrintSummaryHoldmailOnlyCd();
            }
            else
            {
                ret[pMasqueradingVector[139]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[140].empty())
        {
            if(getEbankingContractCd())
            {
                ret[pMasqueradingVector[140]]=getValueOfEbankingContractCd();
            }
            else
            {
                ret[pMasqueradingVector[140]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[141].empty())
        {
            if(getEbankingContractLanguageCd())
            {
                ret[pMasqueradingVector[141]]=getValueOfEbankingContractLanguageCd();
            }
            else
            {
                ret[pMasqueradingVector[141]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[142].empty())
        {
            if(getApsysDtechdiaryl())
            {
                ret[pMasqueradingVector[142]]=getApsysDtechdiaryl()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[142]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[143].empty())
        {
            if(getApsysMotdiarys())
            {
                ret[pMasqueradingVector[143]]=getValueOfApsysMotdiarys();
            }
            else
            {
                ret[pMasqueradingVector[143]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[144].empty())
        {
            if(getApsysIdtypcliirss())
            {
                ret[pMasqueradingVector[144]]=getValueOfApsysIdtypcliirss();
            }
            else
            {
                ret[pMasqueradingVector[144]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[145].empty())
        {
            if(getApsysIdrciqis())
            {
                ret[pMasqueradingVector[145]]=getValueOfApsysIdrciqis();
            }
            else
            {
                ret[pMasqueradingVector[145]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[146].empty())
        {
            if(getApsysIdrcifatcas())
            {
                ret[pMasqueradingVector[146]]=getValueOfApsysIdrcifatcas();
            }
            else
            {
                ret[pMasqueradingVector[146]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[147].empty())
        {
            if(getMailingTarifTypeCd())
            {
                ret[pMasqueradingVector[147]]=getValueOfMailingTarifTypeCd();
            }
            else
            {
                ret[pMasqueradingVector[147]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[148].empty())
        {
            if(getRegisteredCd())
            {
                ret[pMasqueradingVector[148]]=getValueOfRegisteredCd();
            }
            else
            {
                ret[pMasqueradingVector[148]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[149].empty())
        {
            if(getRegisteredMailCd())
            {
                ret[pMasqueradingVector[149]]=getValueOfRegisteredMailCd();
            }
            else
            {
                ret[pMasqueradingVector[149]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[150].empty())
        {
            if(getApsysNbperscpartiel())
            {
                ret[pMasqueradingVector[150]]=getValueOfApsysNbperscpartiel();
            }
            else
            {
                ret[pMasqueradingVector[150]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[151].empty())
        {
            if(getAssetValueTierCd())
            {
                ret[pMasqueradingVector[151]]=getValueOfAssetValueTierCd();
            }
            else
            {
                ret[pMasqueradingVector[151]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[152].empty())
        {
            if(getRelationshipTypeAmlCd())
            {
                ret[pMasqueradingVector[152]]=getValueOfRelationshipTypeAmlCd();
            }
            else
            {
                ret[pMasqueradingVector[152]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[153].empty())
        {
            if(getCbAssetValueTierCd())
            {
                ret[pMasqueradingVector[153]]=getValueOfCbAssetValueTierCd();
            }
            else
            {
                ret[pMasqueradingVector[153]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[154].empty())
        {
            if(getApprovalScore())
            {
                ret[pMasqueradingVector[154]]=getValueOfApprovalScore();
            }
            else
            {
                ret[pMasqueradingVector[154]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[155].empty())
        {
            if(getApprovalScoreSteps())
            {
                ret[pMasqueradingVector[155]]=getValueOfApprovalScoreSteps();
            }
            else
            {
                ret[pMasqueradingVector[155]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[156].empty())
        {
            if(getApsysDtdebpartl())
            {
                ret[pMasqueradingVector[156]]=getApsysDtdebpartl()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[156]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[157].empty())
        {
            if(getApsysDtfinpartl())
            {
                ret[pMasqueradingVector[157]]=getApsysDtfinpartl()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[157]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[158].empty())
        {
            if(getApsysCdmotifclos())
            {
                ret[pMasqueradingVector[158]]=getValueOfApsysCdmotifclos();
            }
            else
            {
                ret[pMasqueradingVector[158]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[159].empty())
        {
            if(getApsysCdnaturecpartieemirc())
            {
                ret[pMasqueradingVector[159]]=getValueOfApsysCdnaturecpartieemirc();
            }
            else
            {
                ret[pMasqueradingVector[159]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[160].empty())
        {
            if(getApsysFlagotheremirc())
            {
                ret[pMasqueradingVector[160]]=getValueOfApsysFlagotheremirc();
            }
            else
            {
                ret[pMasqueradingVector[160]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[161].empty())
        {
            if(getApsysCdindusemirs())
            {
                ret[pMasqueradingVector[161]]=getValueOfApsysCdindusemirs();
            }
            else
            {
                ret[pMasqueradingVector[161]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[162].empty())
        {
            if(getOpenedInApsysDate())
            {
                ret[pMasqueradingVector[162]]=getOpenedInApsysDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[162]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[163].empty())
        {
            if(getApsysCdnaturecpartiefmiac())
            {
                ret[pMasqueradingVector[163]]=getValueOfApsysCdnaturecpartiefmiac();
            }
            else
            {
                ret[pMasqueradingVector[163]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[164].empty())
        {
            if(getEbankingClosedCd())
            {
                ret[pMasqueradingVector[164]]=getValueOfEbankingClosedCd();
            }
            else
            {
                ret[pMasqueradingVector[164]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[165].empty())
        {
            if(getEbankingClosingdate())
            {
                ret[pMasqueradingVector[165]]=getEbankingClosingdate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[165]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[166].empty())
        {
            if(getKycReviewProcessStartDate())
            {
                ret[pMasqueradingVector[166]]=getKycReviewProcessStartDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[166]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[167].empty())
        {
            if(getRemarks())
            {
                ret[pMasqueradingVector[167]]=getValueOfRemarks();
            }
            else
            {
                ret[pMasqueradingVector[167]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[168].empty())
        {
            if(getTransactionBlCountryCd())
            {
                ret[pMasqueradingVector[168]]=getValueOfTransactionBlCountryCd();
            }
            else
            {
                ret[pMasqueradingVector[168]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[169].empty())
        {
            if(getClientgroupCd())
            {
                ret[pMasqueradingVector[169]]=getValueOfClientgroupCd();
            }
            else
            {
                ret[pMasqueradingVector[169]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[170].empty())
        {
            if(getRiskindexCalc())
            {
                ret[pMasqueradingVector[170]]=getValueOfRiskindexCalc();
            }
            else
            {
                ret[pMasqueradingVector[170]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[171].empty())
        {
            if(getLastCalcCriMutdatum())
            {
                ret[pMasqueradingVector[171]]=getLastCalcCriMutdatum()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[171]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[172].empty())
        {
            if(getRisikokategorieCalcCd())
            {
                ret[pMasqueradingVector[172]]=getValueOfRisikokategorieCalcCd();
            }
            else
            {
                ret[pMasqueradingVector[172]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[173].empty())
        {
            if(getRiskindexGroup())
            {
                ret[pMasqueradingVector[173]]=getValueOfRiskindexGroup();
            }
            else
            {
                ret[pMasqueradingVector[173]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[174].empty())
        {
            if(getEstAmountRemWithMutdatum())
            {
                ret[pMasqueradingVector[174]]=getEstAmountRemWithMutdatum()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[174]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[175].empty())
        {
            if(getGesamtvermoegenMutdatum())
            {
                ret[pMasqueradingVector[175]]=getGesamtvermoegenMutdatum()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[175]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[176].empty())
        {
            if(getTransactBlCountryMutdatum())
            {
                ret[pMasqueradingVector[176]]=getTransactBlCountryMutdatum()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[176]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[177].empty())
        {
            if(getAccountpurposeMutdatum())
            {
                ret[pMasqueradingVector[177]]=getAccountpurposeMutdatum()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[177]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[178].empty())
        {
            if(getApsysFlagdeldatapersi())
            {
                ret[pMasqueradingVector[178]]=getValueOfApsysFlagdeldatapersi();
            }
            else
            {
                ret[pMasqueradingVector[178]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[179].empty())
        {
            if(getApsysDtwaitdeldatapersl())
            {
                ret[pMasqueradingVector[179]]=getApsysDtwaitdeldatapersl()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[179]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[180].empty())
        {
            if(getNameEnc())
            {
                ret[pMasqueradingVector[180]]=getValueOfNameEnc();
            }
            else
            {
                ret[pMasqueradingVector[180]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[181].empty())
        {
            if(getInApsysTempEntsperrenCd())
            {
                ret[pMasqueradingVector[181]]=getValueOfInApsysTempEntsperrenCd();
            }
            else
            {
                ret[pMasqueradingVector[181]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[182].empty())
        {
            if(getInApsysTempEntspUserid())
            {
                ret[pMasqueradingVector[182]]=getValueOfInApsysTempEntspUserid();
            }
            else
            {
                ret[pMasqueradingVector[182]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[183].empty())
        {
            if(getInApsysTempEntspDatum())
            {
                ret[pMasqueradingVector[183]]=getInApsysTempEntspDatum()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[183]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[184].empty())
        {
            if(getApsysCdregs())
            {
                ret[pMasqueradingVector[184]]=getValueOfApsysCdregs();
            }
            else
            {
                ret[pMasqueradingVector[184]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[185].empty())
        {
            if(getRetentionOnHold())
            {
                ret[pMasqueradingVector[185]]=getValueOfRetentionOnHold();
            }
            else
            {
                ret[pMasqueradingVector[185]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[186].empty())
        {
            if(getRetentionOnHoldDate())
            {
                ret[pMasqueradingVector[186]]=getRetentionOnHoldDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[186]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[187].empty())
        {
            if(getRetentionOnHoldReason())
            {
                ret[pMasqueradingVector[187]]=getValueOfRetentionOnHoldReason();
            }
            else
            {
                ret[pMasqueradingVector[187]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[188].empty())
        {
            if(getLogicalErasure())
            {
                ret[pMasqueradingVector[188]]=getValueOfLogicalErasure();
            }
            else
            {
                ret[pMasqueradingVector[188]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[189].empty())
        {
            if(getLogicalErasureDate())
            {
                ret[pMasqueradingVector[189]]=getLogicalErasureDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[189]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[190].empty())
        {
            if(getLogicalErasureReason())
            {
                ret[pMasqueradingVector[190]]=getValueOfLogicalErasureReason();
            }
            else
            {
                ret[pMasqueradingVector[190]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[191].empty())
        {
            if(getComplianceMinRiskCategory())
            {
                ret[pMasqueradingVector[191]]=getValueOfComplianceMinRiskCategory();
            }
            else
            {
                ret[pMasqueradingVector[191]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[192].empty())
        {
            if(getComplianceMinRiskComment())
            {
                ret[pMasqueradingVector[192]]=getValueOfComplianceMinRiskComment();
            }
            else
            {
                ret[pMasqueradingVector[192]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[193].empty())
        {
            if(getClientStructureCd())
            {
                ret[pMasqueradingVector[193]]=getValueOfClientStructureCd();
            }
            else
            {
                ret[pMasqueradingVector[193]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[194].empty())
        {
            if(getClientSubstructureCd())
            {
                ret[pMasqueradingVector[194]]=getValueOfClientSubstructureCd();
            }
            else
            {
                ret[pMasqueradingVector[194]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getKundenid())
    {
        ret["KUNDENID"]=getValueOfKundenid();
    }
    else
    {
        ret["KUNDENID"]=Json::Value();
    }
    if(getBezeichnung())
    {
        ret["BEZEICHNUNG"]=getValueOfBezeichnung();
    }
    else
    {
        ret["BEZEICHNUNG"]=Json::Value();
    }
    if(getKundeseit())
    {
        ret["KUNDESEIT"]=getKundeseit()->toDbStringLocal();
    }
    else
    {
        ret["KUNDESEIT"]=Json::Value();
    }
    if(getVertragsparteiCd())
    {
        ret["VERTRAGSPARTEI_CD"]=getValueOfVertragsparteiCd();
    }
    else
    {
        ret["VERTRAGSPARTEI_CD"]=Json::Value();
    }
    if(getLoeschCd())
    {
        ret["LOESCH_CD"]=getValueOfLoeschCd();
    }
    else
    {
        ret["LOESCH_CD"]=Json::Value();
    }
    if(getLoeschdatum())
    {
        ret["LOESCHDATUM"]=getLoeschdatum()->toDbStringLocal();
    }
    else
    {
        ret["LOESCHDATUM"]=Json::Value();
    }
    if(getCrtdatum())
    {
        ret["CRTDATUM"]=getCrtdatum()->toDbStringLocal();
    }
    else
    {
        ret["CRTDATUM"]=Json::Value();
    }
    if(getCrtuser())
    {
        ret["CRTUSER"]=getValueOfCrtuser();
    }
    else
    {
        ret["CRTUSER"]=Json::Value();
    }
    if(getMutdatum())
    {
        ret["MUTDATUM"]=getMutdatum()->toDbStringLocal();
    }
    else
    {
        ret["MUTDATUM"]=Json::Value();
    }
    if(getMutuser())
    {
        ret["MUTUSER"]=getValueOfMutuser();
    }
    else
    {
        ret["MUTUSER"]=Json::Value();
    }
    if(getPseudoaccountCd())
    {
        ret["PSEUDOACCOUNT_CD"]=getValueOfPseudoaccountCd();
    }
    else
    {
        ret["PSEUDOACCOUNT_CD"]=Json::Value();
    }
    if(getKundebesuch())
    {
        ret["KUNDEBESUCH"]=getKundebesuch()->toDbStringLocal();
    }
    else
    {
        ret["KUNDEBESUCH"]=Json::Value();
    }
    if(getBezeichnungvertrag())
    {
        ret["BEZEICHNUNGVERTRAG"]=getValueOfBezeichnungvertrag();
    }
    else
    {
        ret["BEZEICHNUNGVERTRAG"]=Json::Value();
    }
    if(getPseudonym())
    {
        ret["PSEUDONYM"]=getValueOfPseudonym();
    }
    else
    {
        ret["PSEUDONYM"]=Json::Value();
    }
    if(getRechtsdomizilCd())
    {
        ret["RECHTSDOMIZIL_CD"]=getValueOfRechtsdomizilCd();
    }
    else
    {
        ret["RECHTSDOMIZIL_CD"]=Json::Value();
    }
    if(getKorrespondenzsprachCd())
    {
        ret["KORRESPONDENZSPRACH_CD"]=getValueOfKorrespondenzsprachCd();
    }
    else
    {
        ret["KORRESPONDENZSPRACH_CD"]=Json::Value();
    }
    if(getMitProfilCd())
    {
        ret["MIT_PROFIL_CD"]=getValueOfMitProfilCd();
    }
    else
    {
        ret["MIT_PROFIL_CD"]=Json::Value();
    }
    if(getGemeinschaftskontoCd())
    {
        ret["GEMEINSCHAFTSKONTO_CD"]=getValueOfGemeinschaftskontoCd();
    }
    else
    {
        ret["GEMEINSCHAFTSKONTO_CD"]=Json::Value();
    }
    if(getPin())
    {
        ret["PIN"]=getValueOfPin();
    }
    else
    {
        ret["PIN"]=Json::Value();
    }
    if(getVerwendungszweck())
    {
        ret["VERWENDUNGSZWECK"]=getValueOfVerwendungszweck();
    }
    else
    {
        ret["VERWENDUNGSZWECK"]=Json::Value();
    }
    if(getIdentifikationsartCd())
    {
        ret["IDENTIFIKATIONSART_CD"]=getValueOfIdentifikationsartCd();
    }
    else
    {
        ret["IDENTIFIKATIONSART_CD"]=Json::Value();
    }
    if(getVermoegensursprungCd())
    {
        ret["VERMOEGENSURSPRUNG_CD"]=getValueOfVermoegensursprungCd();
    }
    else
    {
        ret["VERMOEGENSURSPRUNG_CD"]=Json::Value();
    }
    if(getVermoegensursprung())
    {
        ret["VERMOEGENSURSPRUNG"]=getValueOfVermoegensursprung();
    }
    else
    {
        ret["VERMOEGENSURSPRUNG"]=Json::Value();
    }
    if(getGeldvonkonto())
    {
        ret["GELDVONKONTO"]=getValueOfGeldvonkonto();
    }
    else
    {
        ret["GELDVONKONTO"]=Json::Value();
    }
    if(getBisherigebetreuung())
    {
        ret["BISHERIGEBETREUUNG"]=getValueOfBisherigebetreuung();
    }
    else
    {
        ret["BISHERIGEBETREUUNG"]=Json::Value();
    }
    if(getBisherigebetreuungseit())
    {
        ret["BISHERIGEBETREUUNGSEIT"]=getBisherigebetreuungseit()->toDbStringLocal();
    }
    else
    {
        ret["BISHERIGEBETREUUNGSEIT"]=Json::Value();
    }
    if(getManualopenCd())
    {
        ret["MANUALOPEN_CD"]=getValueOfManualopenCd();
    }
    else
    {
        ret["MANUALOPEN_CD"]=Json::Value();
    }
    if(getEinVermoegenCd())
    {
        ret["EIN_VERMOEGEN_CD"]=getValueOfEinVermoegenCd();
    }
    else
    {
        ret["EIN_VERMOEGEN_CD"]=Json::Value();
    }
    if(getRegionzahlungCd())
    {
        ret["REGIONZAHLUNG_CD"]=getValueOfRegionzahlungCd();
    }
    else
    {
        ret["REGIONZAHLUNG_CD"]=Json::Value();
    }
    if(getEinVermoegenartCd())
    {
        ret["EIN_VERMOEGENART_CD"]=getValueOfEinVermoegenartCd();
    }
    else
    {
        ret["EIN_VERMOEGENART_CD"]=Json::Value();
    }
    if(getSpezWuenscheCd())
    {
        ret["SPEZ_WUENSCHE_CD"]=getValueOfSpezWuenscheCd();
    }
    else
    {
        ret["SPEZ_WUENSCHE_CD"]=Json::Value();
    }
    if(getManagerCd())
    {
        ret["MANAGER_CD"]=getValueOfManagerCd();
    }
    else
    {
        ret["MANAGER_CD"]=Json::Value();
    }
    if(getRiskindex())
    {
        ret["RISKINDEX"]=getValueOfRiskindex();
    }
    else
    {
        ret["RISKINDEX"]=Json::Value();
    }
    if(getRiskindexGueltiseit())
    {
        ret["RISKINDEX_GUELTISEIT"]=getRiskindexGueltiseit()->toDbStringLocal();
    }
    else
    {
        ret["RISKINDEX_GUELTISEIT"]=Json::Value();
    }
    if(getRiskindexLetzteberechnung())
    {
        ret["RISKINDEX_LETZTEBERECHNUNG"]=getRiskindexLetzteberechnung()->toDbStringLocal();
    }
    else
    {
        ret["RISKINDEX_LETZTEBERECHNUNG"]=Json::Value();
    }
    if(getKontoeroeffnungsartCd())
    {
        ret["KONTOEROEFFNUNGSART_CD"]=getValueOfKontoeroeffnungsartCd();
    }
    else
    {
        ret["KONTOEROEFFNUNGSART_CD"]=Json::Value();
    }
    if(getRiskindexberechnenCd())
    {
        ret["RISKINDEXBERECHNEN_CD"]=getValueOfRiskindexberechnenCd();
    }
    else
    {
        ret["RISKINDEXBERECHNEN_CD"]=Json::Value();
    }
    if(getKundennaturCd())
    {
        ret["KUNDENNATUR_CD"]=getValueOfKundennaturCd();
    }
    else
    {
        ret["KUNDENNATUR_CD"]=Json::Value();
    }
    if(getRisikokategorieCd())
    {
        ret["RISIKOKATEGORIE_CD"]=getValueOfRisikokategorieCd();
    }
    else
    {
        ret["RISIKOKATEGORIE_CD"]=Json::Value();
    }
    if(getPepCd())
    {
        ret["PEP_CD"]=getValueOfPepCd();
    }
    else
    {
        ret["PEP_CD"]=Json::Value();
    }
    if(getSpezialkategorieCd())
    {
        ret["SPEZIALKATEGORIE_CD"]=getValueOfSpezialkategorieCd();
    }
    else
    {
        ret["SPEZIALKATEGORIE_CD"]=Json::Value();
    }
    if(getNatureCd())
    {
        ret["NATURE_CD"]=getValueOfNatureCd();
    }
    else
    {
        ret["NATURE_CD"]=Json::Value();
    }
    if(getName())
    {
        ret["NAME"]=getValueOfName();
    }
    else
    {
        ret["NAME"]=Json::Value();
    }
    if(getLedigername())
    {
        ret["LEDIGERNAME"]=getValueOfLedigername();
    }
    else
    {
        ret["LEDIGERNAME"]=Json::Value();
    }
    if(getVorname())
    {
        ret["VORNAME"]=getValueOfVorname();
    }
    else
    {
        ret["VORNAME"]=Json::Value();
    }
    if(getCdpartc())
    {
        ret["CDPARTC"]=getValueOfCdpartc();
    }
    else
    {
        ret["CDPARTC"]=Json::Value();
    }
    if(getNationalitaetCd())
    {
        ret["NATIONALITAET_CD"]=getValueOfNationalitaetCd();
    }
    else
    {
        ret["NATIONALITAET_CD"]=Json::Value();
    }
    if(getRisikolandCd())
    {
        ret["RISIKOLAND_CD"]=getValueOfRisikolandCd();
    }
    else
    {
        ret["RISIKOLAND_CD"]=Json::Value();
    }
    if(getPersoenlichbekanntCd())
    {
        ret["PERSOENLICHBEKANNT_CD"]=getValueOfPersoenlichbekanntCd();
    }
    else
    {
        ret["PERSOENLICHBEKANNT_CD"]=Json::Value();
    }
    if(getRisikotaetigkeitCd())
    {
        ret["RISIKOTAETIGKEIT_CD"]=getValueOfRisikotaetigkeitCd();
    }
    else
    {
        ret["RISIKOTAETIGKEIT_CD"]=Json::Value();
    }
    if(getSteuerdomizilCd())
    {
        ret["STEUERDOMIZIL_CD"]=getValueOfSteuerdomizilCd();
    }
    else
    {
        ret["STEUERDOMIZIL_CD"]=Json::Value();
    }
    if(getEuTaxstatusCd())
    {
        ret["EU_TAXSTATUS_CD"]=getValueOfEuTaxstatusCd();
    }
    else
    {
        ret["EU_TAXSTATUS_CD"]=Json::Value();
    }
    if(getTin())
    {
        ret["TIN"]=getValueOfTin();
    }
    else
    {
        ret["TIN"]=Json::Value();
    }
    if(getApsysCdrolpersi())
    {
        ret["APSYS_CDROLPERSI"]=getValueOfApsysCdrolpersi();
    }
    else
    {
        ret["APSYS_CDROLPERSI"]=Json::Value();
    }
    if(getVertragsprachCd())
    {
        ret["VERTRAGSPRACH_CD"]=getValueOfVertragsprachCd();
    }
    else
    {
        ret["VERTRAGSPRACH_CD"]=Json::Value();
    }
    if(getVermoegenskategorieIhagCd())
    {
        ret["VERMOEGENSKATEGORIE_IHAG_CD"]=getValueOfVermoegenskategorieIhagCd();
    }
    else
    {
        ret["VERMOEGENSKATEGORIE_IHAG_CD"]=Json::Value();
    }
    if(getApsysIntishs())
    {
        ret["APSYS_INTISHS"]=getValueOfApsysIntishs();
    }
    else
    {
        ret["APSYS_INTISHS"]=Json::Value();
    }
    if(getApsysIntilgs())
    {
        ret["APSYS_INTILGS"]=getValueOfApsysIntilgs();
    }
    else
    {
        ret["APSYS_INTILGS"]=Json::Value();
    }
    if(getGesamtvermoegenCd())
    {
        ret["GESAMTVERMOEGEN_CD"]=getValueOfGesamtvermoegenCd();
    }
    else
    {
        ret["GESAMTVERMOEGEN_CD"]=Json::Value();
    }
    if(getComplianceOkCd())
    {
        ret["COMPLIANCE_OK_CD"]=getValueOfComplianceOkCd();
    }
    else
    {
        ret["COMPLIANCE_OK_CD"]=Json::Value();
    }
    if(getComplianceOkBemerkung())
    {
        ret["COMPLIANCE_OK_BEMERKUNG"]=getValueOfComplianceOkBemerkung();
    }
    else
    {
        ret["COMPLIANCE_OK_BEMERKUNG"]=Json::Value();
    }
    if(getComplianceOkDatum())
    {
        ret["COMPLIANCE_OK_DATUM"]=getComplianceOkDatum()->toDbStringLocal();
    }
    else
    {
        ret["COMPLIANCE_OK_DATUM"]=Json::Value();
    }
    if(getComplianceOkUserid())
    {
        ret["COMPLIANCE_OK_USERID"]=getValueOfComplianceOkUserid();
    }
    else
    {
        ret["COMPLIANCE_OK_USERID"]=Json::Value();
    }
    if(getEinVermoegen())
    {
        ret["EIN_VERMOEGEN"]=getValueOfEinVermoegen();
    }
    else
    {
        ret["EIN_VERMOEGEN"]=Json::Value();
    }
    if(getSegmentierungCd())
    {
        ret["SEGMENTIERUNG_CD"]=getValueOfSegmentierungCd();
    }
    else
    {
        ret["SEGMENTIERUNG_CD"]=Json::Value();
    }
    if(getAktid())
    {
        ret["AKTID"]=getValueOfAktid();
    }
    else
    {
        ret["AKTID"]=Json::Value();
    }
    if(getValidid())
    {
        ret["VALIDID"]=getValueOfValidid();
    }
    else
    {
        ret["VALIDID"]=Json::Value();
    }
    if(getValidCd())
    {
        ret["VALID_CD"]=getValueOfValidCd();
    }
    else
    {
        ret["VALID_CD"]=Json::Value();
    }
    if(getValiduser())
    {
        ret["VALIDUSER"]=getValueOfValiduser();
    }
    else
    {
        ret["VALIDUSER"]=Json::Value();
    }
    if(getEncSalt())
    {
        ret["ENC_SALT"]=getValueOfEncSalt();
    }
    else
    {
        ret["ENC_SALT"]=Json::Value();
    }
    if(getBezeichnungEnc())
    {
        ret["BEZEICHNUNG_ENC"]=getValueOfBezeichnungEnc();
    }
    else
    {
        ret["BEZEICHNUNG_ENC"]=Json::Value();
    }
    if(getApsysCdmotifparts())
    {
        ret["APSYS_CDMOTIFPARTS"]=getValueOfApsysCdmotifparts();
    }
    else
    {
        ret["APSYS_CDMOTIFPARTS"]=Json::Value();
    }
    if(getApsysCdindus0s())
    {
        ret["APSYS_CDINDUS0S"]=getValueOfApsysCdindus0s();
    }
    else
    {
        ret["APSYS_CDINDUS0S"]=Json::Value();
    }
    if(getApsysFlagpreavisexec())
    {
        ret["APSYS_FLAGPREAVISEXEC"]=getValueOfApsysFlagpreavisexec();
    }
    else
    {
        ret["APSYS_FLAGPREAVISEXEC"]=Json::Value();
    }
    if(getApsysCdaviobispecc())
    {
        ret["APSYS_CDAVIOBISPECC"]=getValueOfApsysCdaviobispecc();
    }
    else
    {
        ret["APSYS_CDAVIOBISPECC"]=Json::Value();
    }
    if(getApsysFlaghisperc())
    {
        ret["APSYS_FLAGHISPERC"]=getValueOfApsysFlaghisperc();
    }
    else
    {
        ret["APSYS_FLAGHISPERC"]=Json::Value();
    }
    if(getApsysRepamanuc())
    {
        ret["APSYS_REPAMANUC"]=getValueOfApsysRepamanuc();
    }
    else
    {
        ret["APSYS_REPAMANUC"]=Json::Value();
    }
    if(getApsysPerdevcalc())
    {
        ret["APSYS_PERDEVCALC"]=getValueOfApsysPerdevcalc();
    }
    else
    {
        ret["APSYS_PERDEVCALC"]=Json::Value();
    }
    if(getApsysFlaguktaxc())
    {
        ret["APSYS_FLAGUKTAXC"]=getValueOfApsysFlaguktaxc();
    }
    else
    {
        ret["APSYS_FLAGUKTAXC"]=Json::Value();
    }
    if(getApsysCdnogas())
    {
        ret["APSYS_CDNOGAS"]=getValueOfApsysCdnogas();
    }
    else
    {
        ret["APSYS_CDNOGAS"]=Json::Value();
    }
    if(getApsysStatfiscc())
    {
        ret["APSYS_STATFISCC"]=getValueOfApsysStatfiscc();
    }
    else
    {
        ret["APSYS_STATFISCC"]=Json::Value();
    }
    if(getApsysFlagfwti())
    {
        ret["APSYS_FLAGFWTI"]=getValueOfApsysFlagfwti();
    }
    else
    {
        ret["APSYS_FLAGFWTI"]=Json::Value();
    }
    if(getApsysFlagfwtuknrsdi())
    {
        ret["APSYS_FLAGFWTUKNRSDI"]=getValueOfApsysFlagfwtuknrsdi();
    }
    else
    {
        ret["APSYS_FLAGFWTUKNRSDI"]=Json::Value();
    }
    if(getApsysFlagfwttaxspegei())
    {
        ret["APSYS_FLAGFWTTAXSPEGEI"]=getValueOfApsysFlagfwttaxspegei();
    }
    else
    {
        ret["APSYS_FLAGFWTTAXSPEGEI"]=Json::Value();
    }
    if(getApsysCdfwtoptregulfiscancc())
    {
        ret["APSYS_CDFWTOPTREGULFISCANCC"]=getValueOfApsysCdfwtoptregulfiscancc();
    }
    else
    {
        ret["APSYS_CDFWTOPTREGULFISCANCC"]=Json::Value();
    }
    if(getApsysCdfwtstatregulfiscancc())
    {
        ret["APSYS_CDFWTSTATREGULFISCANCC"]=getValueOfApsysCdfwtstatregulfiscancc();
    }
    else
    {
        ret["APSYS_CDFWTSTATREGULFISCANCC"]=Json::Value();
    }
    if(getApsysCdfwtoptregulfiscfutc())
    {
        ret["APSYS_CDFWTOPTREGULFISCFUTC"]=getValueOfApsysCdfwtoptregulfiscfutc();
    }
    else
    {
        ret["APSYS_CDFWTOPTREGULFISCFUTC"]=Json::Value();
    }
    if(getSteuerlandAbgstCd())
    {
        ret["STEUERLAND_ABGST_CD"]=getValueOfSteuerlandAbgstCd();
    }
    else
    {
        ret["STEUERLAND_ABGST_CD"]=Json::Value();
    }
    if(getApsysCdnatures())
    {
        ret["APSYS_CDNATURES"]=getValueOfApsysCdnatures();
    }
    else
    {
        ret["APSYS_CDNATURES"]=Json::Value();
    }
    if(getApsysShnas())
    {
        ret["APSYS_SHNAS"]=getValueOfApsysShnas();
    }
    else
    {
        ret["APSYS_SHNAS"]=Json::Value();
    }
    if(getApsysCdpyhqdomis())
    {
        ret["APSYS_CDPYHQDOMIS"]=getValueOfApsysCdpyhqdomis();
    }
    else
    {
        ret["APSYS_CDPYHQDOMIS"]=Json::Value();
    }
    if(getApsysCdpermi())
    {
        ret["APSYS_CDPERMI"]=getValueOfApsysCdpermi();
    }
    else
    {
        ret["APSYS_CDPERMI"]=Json::Value();
    }
    if(getApsysIdrcis())
    {
        ret["APSYS_IDRCIS"]=getValueOfApsysIdrcis();
    }
    else
    {
        ret["APSYS_IDRCIS"]=Json::Value();
    }
    if(getApsysFlagisttc())
    {
        ret["APSYS_FLAGISTTC"]=getValueOfApsysFlagisttc();
    }
    else
    {
        ret["APSYS_FLAGISTTC"]=Json::Value();
    }
    if(getApsysDevevals())
    {
        ret["APSYS_DEVEVALS"]=getValueOfApsysDevevals();
    }
    else
    {
        ret["APSYS_DEVEVALS"]=Json::Value();
    }
    if(getApsysIdstrucs())
    {
        ret["APSYS_IDSTRUCS"]=getValueOfApsysIdstrucs();
    }
    else
    {
        ret["APSYS_IDSTRUCS"]=Json::Value();
    }
    if(getApsysSuiviagts())
    {
        ret["APSYS_SUIVIAGTS"]=getValueOfApsysSuiviagts();
    }
    else
    {
        ret["APSYS_SUIVIAGTS"]=Json::Value();
    }
    if(getApsysCdinduscssfs())
    {
        ret["APSYS_CDINDUSCSSFS"]=getValueOfApsysCdinduscssfs();
    }
    else
    {
        ret["APSYS_CDINDUSCSSFS"]=Json::Value();
    }
    if(getApsysCdindusbluxs())
    {
        ret["APSYS_CDINDUSBLUXS"]=getValueOfApsysCdindusbluxs();
    }
    else
    {
        ret["APSYS_CDINDUSBLUXS"]=Json::Value();
    }
    if(getApsysCdindussbuba())
    {
        ret["APSYS_CDINDUSSBUBA"]=getValueOfApsysCdindussbuba();
    }
    else
    {
        ret["APSYS_CDINDUSSBUBA"]=Json::Value();
    }
    if(getApsysCdindussbns())
    {
        ret["APSYS_CDINDUSSBNS"]=getValueOfApsysCdindussbns();
    }
    else
    {
        ret["APSYS_CDINDUSSBNS"]=Json::Value();
    }
    if(getApsysGrmtevals())
    {
        ret["APSYS_GRMTEVALS"]=getValueOfApsysGrmtevals();
    }
    else
    {
        ret["APSYS_GRMTEVALS"]=Json::Value();
    }
    if(getApsysIdpocs())
    {
        ret["APSYS_IDPOCS"]=getValueOfApsysIdpocs();
    }
    else
    {
        ret["APSYS_IDPOCS"]=Json::Value();
    }
    if(getApsysInfo())
    {
        ret["APSYS_INFO"]=getValueOfApsysInfo();
    }
    else
    {
        ret["APSYS_INFO"]=Json::Value();
    }
    if(getApsysIdents())
    {
        ret["APSYS_IDENTS"]=getValueOfApsysIdents();
    }
    else
    {
        ret["APSYS_IDENTS"]=Json::Value();
    }
    if(getApsysStatusOpec())
    {
        ret["APSYS_STATUS_OPEC"]=getValueOfApsysStatusOpec();
    }
    else
    {
        ret["APSYS_STATUS_OPEC"]=Json::Value();
    }
    if(getApsysErri())
    {
        ret["APSYS_ERRI"]=getValueOfApsysErri();
    }
    else
    {
        ret["APSYS_ERRI"]=Json::Value();
    }
    if(getNationalitaet2Cd())
    {
        ret["NATIONALITAET2_CD"]=getValueOfNationalitaet2Cd();
    }
    else
    {
        ret["NATIONALITAET2_CD"]=Json::Value();
    }
    if(getNationalitaet3Cd())
    {
        ret["NATIONALITAET3_CD"]=getValueOfNationalitaet3Cd();
    }
    else
    {
        ret["NATIONALITAET3_CD"]=Json::Value();
    }
    if(getVermoegensursprung2Cd())
    {
        ret["VERMOEGENSURSPRUNG2_CD"]=getValueOfVermoegensursprung2Cd();
    }
    else
    {
        ret["VERMOEGENSURSPRUNG2_CD"]=Json::Value();
    }
    if(getVermoegensursprung2())
    {
        ret["VERMOEGENSURSPRUNG2"]=getValueOfVermoegensursprung2();
    }
    else
    {
        ret["VERMOEGENSURSPRUNG2"]=Json::Value();
    }
    if(getApprovalStep1Cd())
    {
        ret["APPROVAL_STEP1_CD"]=getValueOfApprovalStep1Cd();
    }
    else
    {
        ret["APPROVAL_STEP1_CD"]=Json::Value();
    }
    if(getApprovalStep1User())
    {
        ret["APPROVAL_STEP1_USER"]=getValueOfApprovalStep1User();
    }
    else
    {
        ret["APPROVAL_STEP1_USER"]=Json::Value();
    }
    if(getApprovalStep1Date())
    {
        ret["APPROVAL_STEP1_DATE"]=getApprovalStep1Date()->toDbStringLocal();
    }
    else
    {
        ret["APPROVAL_STEP1_DATE"]=Json::Value();
    }
    if(getApprovalStep2Cd())
    {
        ret["APPROVAL_STEP2_CD"]=getValueOfApprovalStep2Cd();
    }
    else
    {
        ret["APPROVAL_STEP2_CD"]=Json::Value();
    }
    if(getApprovalStep2User())
    {
        ret["APPROVAL_STEP2_USER"]=getValueOfApprovalStep2User();
    }
    else
    {
        ret["APPROVAL_STEP2_USER"]=Json::Value();
    }
    if(getApprovalStep2Date())
    {
        ret["APPROVAL_STEP2_DATE"]=getApprovalStep2Date()->toDbStringLocal();
    }
    else
    {
        ret["APPROVAL_STEP2_DATE"]=Json::Value();
    }
    if(getApprovalStep3Cd())
    {
        ret["APPROVAL_STEP3_CD"]=getValueOfApprovalStep3Cd();
    }
    else
    {
        ret["APPROVAL_STEP3_CD"]=Json::Value();
    }
    if(getApprovalStep3User())
    {
        ret["APPROVAL_STEP3_USER"]=getValueOfApprovalStep3User();
    }
    else
    {
        ret["APPROVAL_STEP3_USER"]=Json::Value();
    }
    if(getApprovalStep3Date())
    {
        ret["APPROVAL_STEP3_DATE"]=getApprovalStep3Date()->toDbStringLocal();
    }
    else
    {
        ret["APPROVAL_STEP3_DATE"]=Json::Value();
    }
    if(getApprovalStep4Cd())
    {
        ret["APPROVAL_STEP4_CD"]=getValueOfApprovalStep4Cd();
    }
    else
    {
        ret["APPROVAL_STEP4_CD"]=Json::Value();
    }
    if(getApprovalStep4User())
    {
        ret["APPROVAL_STEP4_USER"]=getValueOfApprovalStep4User();
    }
    else
    {
        ret["APPROVAL_STEP4_USER"]=Json::Value();
    }
    if(getApprovalStep4Date())
    {
        ret["APPROVAL_STEP4_DATE"]=getApprovalStep4Date()->toDbStringLocal();
    }
    else
    {
        ret["APPROVAL_STEP4_DATE"]=Json::Value();
    }
    if(getApprovalStep5Cd())
    {
        ret["APPROVAL_STEP5_CD"]=getValueOfApprovalStep5Cd();
    }
    else
    {
        ret["APPROVAL_STEP5_CD"]=Json::Value();
    }
    if(getApprovalStep5User())
    {
        ret["APPROVAL_STEP5_USER"]=getValueOfApprovalStep5User();
    }
    else
    {
        ret["APPROVAL_STEP5_USER"]=Json::Value();
    }
    if(getApprovalStep5Date())
    {
        ret["APPROVAL_STEP5_DATE"]=getApprovalStep5Date()->toDbStringLocal();
    }
    else
    {
        ret["APPROVAL_STEP5_DATE"]=Json::Value();
    }
    if(getApprovalStep1Bem())
    {
        ret["APPROVAL_STEP1_BEM"]=getValueOfApprovalStep1Bem();
    }
    else
    {
        ret["APPROVAL_STEP1_BEM"]=Json::Value();
    }
    if(getApprovalStep2Bem())
    {
        ret["APPROVAL_STEP2_BEM"]=getValueOfApprovalStep2Bem();
    }
    else
    {
        ret["APPROVAL_STEP2_BEM"]=Json::Value();
    }
    if(getApprovalStep3Bem())
    {
        ret["APPROVAL_STEP3_BEM"]=getValueOfApprovalStep3Bem();
    }
    else
    {
        ret["APPROVAL_STEP3_BEM"]=Json::Value();
    }
    if(getApprovalStep4Bem())
    {
        ret["APPROVAL_STEP4_BEM"]=getValueOfApprovalStep4Bem();
    }
    else
    {
        ret["APPROVAL_STEP4_BEM"]=Json::Value();
    }
    if(getApprovalStep5Bem())
    {
        ret["APPROVAL_STEP5_BEM"]=getValueOfApprovalStep5Bem();
    }
    else
    {
        ret["APPROVAL_STEP5_BEM"]=Json::Value();
    }
    if(getApprovalStep1AssesCd())
    {
        ret["APPROVAL_STEP1_ASSES_CD"]=getValueOfApprovalStep1AssesCd();
    }
    else
    {
        ret["APPROVAL_STEP1_ASSES_CD"]=Json::Value();
    }
    if(getApprovalStep2AssesCd())
    {
        ret["APPROVAL_STEP2_ASSES_CD"]=getValueOfApprovalStep2AssesCd();
    }
    else
    {
        ret["APPROVAL_STEP2_ASSES_CD"]=Json::Value();
    }
    if(getApprovalStep3AssesCd())
    {
        ret["APPROVAL_STEP3_ASSES_CD"]=getValueOfApprovalStep3AssesCd();
    }
    else
    {
        ret["APPROVAL_STEP3_ASSES_CD"]=Json::Value();
    }
    if(getApprovalStep4AssesCd())
    {
        ret["APPROVAL_STEP4_ASSES_CD"]=getValueOfApprovalStep4AssesCd();
    }
    else
    {
        ret["APPROVAL_STEP4_ASSES_CD"]=Json::Value();
    }
    if(getApprovalStep5AssesCd())
    {
        ret["APPROVAL_STEP5_ASSES_CD"]=getValueOfApprovalStep5AssesCd();
    }
    else
    {
        ret["APPROVAL_STEP5_ASSES_CD"]=Json::Value();
    }
    if(getApprovalStatusCd())
    {
        ret["APPROVAL_STATUS_CD"]=getValueOfApprovalStatusCd();
    }
    else
    {
        ret["APPROVAL_STATUS_CD"]=Json::Value();
    }
    if(getClientStatusCd())
    {
        ret["CLIENT_STATUS_CD"]=getValueOfClientStatusCd();
    }
    else
    {
        ret["CLIENT_STATUS_CD"]=Json::Value();
    }
    if(getDischargeOrdersCd())
    {
        ret["DISCHARGE_ORDERS_CD"]=getValueOfDischargeOrdersCd();
    }
    else
    {
        ret["DISCHARGE_ORDERS_CD"]=Json::Value();
    }
    if(getPrintSummaryHoldmailOnlyCd())
    {
        ret["PRINT_SUMMARY_HOLDMAIL_ONLY_CD"]=getValueOfPrintSummaryHoldmailOnlyCd();
    }
    else
    {
        ret["PRINT_SUMMARY_HOLDMAIL_ONLY_CD"]=Json::Value();
    }
    if(getEbankingContractCd())
    {
        ret["EBANKING_CONTRACT_CD"]=getValueOfEbankingContractCd();
    }
    else
    {
        ret["EBANKING_CONTRACT_CD"]=Json::Value();
    }
    if(getEbankingContractLanguageCd())
    {
        ret["EBANKING_CONTRACT_LANGUAGE_CD"]=getValueOfEbankingContractLanguageCd();
    }
    else
    {
        ret["EBANKING_CONTRACT_LANGUAGE_CD"]=Json::Value();
    }
    if(getApsysDtechdiaryl())
    {
        ret["APSYS_DTECHDIARYL"]=getApsysDtechdiaryl()->toDbStringLocal();
    }
    else
    {
        ret["APSYS_DTECHDIARYL"]=Json::Value();
    }
    if(getApsysMotdiarys())
    {
        ret["APSYS_MOTDIARYS"]=getValueOfApsysMotdiarys();
    }
    else
    {
        ret["APSYS_MOTDIARYS"]=Json::Value();
    }
    if(getApsysIdtypcliirss())
    {
        ret["APSYS_IDTYPCLIIRSS"]=getValueOfApsysIdtypcliirss();
    }
    else
    {
        ret["APSYS_IDTYPCLIIRSS"]=Json::Value();
    }
    if(getApsysIdrciqis())
    {
        ret["APSYS_IDRCIQIS"]=getValueOfApsysIdrciqis();
    }
    else
    {
        ret["APSYS_IDRCIQIS"]=Json::Value();
    }
    if(getApsysIdrcifatcas())
    {
        ret["APSYS_IDRCIFATCAS"]=getValueOfApsysIdrcifatcas();
    }
    else
    {
        ret["APSYS_IDRCIFATCAS"]=Json::Value();
    }
    if(getMailingTarifTypeCd())
    {
        ret["MAILING_TARIF_TYPE_CD"]=getValueOfMailingTarifTypeCd();
    }
    else
    {
        ret["MAILING_TARIF_TYPE_CD"]=Json::Value();
    }
    if(getRegisteredCd())
    {
        ret["REGISTERED_CD"]=getValueOfRegisteredCd();
    }
    else
    {
        ret["REGISTERED_CD"]=Json::Value();
    }
    if(getRegisteredMailCd())
    {
        ret["REGISTERED_MAIL_CD"]=getValueOfRegisteredMailCd();
    }
    else
    {
        ret["REGISTERED_MAIL_CD"]=Json::Value();
    }
    if(getApsysNbperscpartiel())
    {
        ret["APSYS_NBPERSCPARTIEL"]=getValueOfApsysNbperscpartiel();
    }
    else
    {
        ret["APSYS_NBPERSCPARTIEL"]=Json::Value();
    }
    if(getAssetValueTierCd())
    {
        ret["ASSET_VALUE_TIER_CD"]=getValueOfAssetValueTierCd();
    }
    else
    {
        ret["ASSET_VALUE_TIER_CD"]=Json::Value();
    }
    if(getRelationshipTypeAmlCd())
    {
        ret["RELATIONSHIP_TYPE_AML_CD"]=getValueOfRelationshipTypeAmlCd();
    }
    else
    {
        ret["RELATIONSHIP_TYPE_AML_CD"]=Json::Value();
    }
    if(getCbAssetValueTierCd())
    {
        ret["CB_ASSET_VALUE_TIER_CD"]=getValueOfCbAssetValueTierCd();
    }
    else
    {
        ret["CB_ASSET_VALUE_TIER_CD"]=Json::Value();
    }
    if(getApprovalScore())
    {
        ret["APPROVAL_SCORE"]=getValueOfApprovalScore();
    }
    else
    {
        ret["APPROVAL_SCORE"]=Json::Value();
    }
    if(getApprovalScoreSteps())
    {
        ret["APPROVAL_SCORE_STEPS"]=getValueOfApprovalScoreSteps();
    }
    else
    {
        ret["APPROVAL_SCORE_STEPS"]=Json::Value();
    }
    if(getApsysDtdebpartl())
    {
        ret["APSYS_DTDEBPARTL"]=getApsysDtdebpartl()->toDbStringLocal();
    }
    else
    {
        ret["APSYS_DTDEBPARTL"]=Json::Value();
    }
    if(getApsysDtfinpartl())
    {
        ret["APSYS_DTFINPARTL"]=getApsysDtfinpartl()->toDbStringLocal();
    }
    else
    {
        ret["APSYS_DTFINPARTL"]=Json::Value();
    }
    if(getApsysCdmotifclos())
    {
        ret["APSYS_CDMOTIFCLOS"]=getValueOfApsysCdmotifclos();
    }
    else
    {
        ret["APSYS_CDMOTIFCLOS"]=Json::Value();
    }
    if(getApsysCdnaturecpartieemirc())
    {
        ret["APSYS_CDNATURECPARTIEEMIRC"]=getValueOfApsysCdnaturecpartieemirc();
    }
    else
    {
        ret["APSYS_CDNATURECPARTIEEMIRC"]=Json::Value();
    }
    if(getApsysFlagotheremirc())
    {
        ret["APSYS_FLAGOTHEREMIRC"]=getValueOfApsysFlagotheremirc();
    }
    else
    {
        ret["APSYS_FLAGOTHEREMIRC"]=Json::Value();
    }
    if(getApsysCdindusemirs())
    {
        ret["APSYS_CDINDUSEMIRS"]=getValueOfApsysCdindusemirs();
    }
    else
    {
        ret["APSYS_CDINDUSEMIRS"]=Json::Value();
    }
    if(getOpenedInApsysDate())
    {
        ret["OPENED_IN_APSYS_DATE"]=getOpenedInApsysDate()->toDbStringLocal();
    }
    else
    {
        ret["OPENED_IN_APSYS_DATE"]=Json::Value();
    }
    if(getApsysCdnaturecpartiefmiac())
    {
        ret["APSYS_CDNATURECPARTIEFMIAC"]=getValueOfApsysCdnaturecpartiefmiac();
    }
    else
    {
        ret["APSYS_CDNATURECPARTIEFMIAC"]=Json::Value();
    }
    if(getEbankingClosedCd())
    {
        ret["EBANKING_CLOSED_CD"]=getValueOfEbankingClosedCd();
    }
    else
    {
        ret["EBANKING_CLOSED_CD"]=Json::Value();
    }
    if(getEbankingClosingdate())
    {
        ret["EBANKING_CLOSINGDATE"]=getEbankingClosingdate()->toDbStringLocal();
    }
    else
    {
        ret["EBANKING_CLOSINGDATE"]=Json::Value();
    }
    if(getKycReviewProcessStartDate())
    {
        ret["KYC_REVIEW_PROCESS_START_DATE"]=getKycReviewProcessStartDate()->toDbStringLocal();
    }
    else
    {
        ret["KYC_REVIEW_PROCESS_START_DATE"]=Json::Value();
    }
    if(getRemarks())
    {
        ret["REMARKS"]=getValueOfRemarks();
    }
    else
    {
        ret["REMARKS"]=Json::Value();
    }
    if(getTransactionBlCountryCd())
    {
        ret["TRANSACTION_BL_COUNTRY_CD"]=getValueOfTransactionBlCountryCd();
    }
    else
    {
        ret["TRANSACTION_BL_COUNTRY_CD"]=Json::Value();
    }
    if(getClientgroupCd())
    {
        ret["CLIENTGROUP_CD"]=getValueOfClientgroupCd();
    }
    else
    {
        ret["CLIENTGROUP_CD"]=Json::Value();
    }
    if(getRiskindexCalc())
    {
        ret["RISKINDEX_CALC"]=getValueOfRiskindexCalc();
    }
    else
    {
        ret["RISKINDEX_CALC"]=Json::Value();
    }
    if(getLastCalcCriMutdatum())
    {
        ret["LAST_CALC_CRI_MUTDATUM"]=getLastCalcCriMutdatum()->toDbStringLocal();
    }
    else
    {
        ret["LAST_CALC_CRI_MUTDATUM"]=Json::Value();
    }
    if(getRisikokategorieCalcCd())
    {
        ret["RISIKOKATEGORIE_CALC_CD"]=getValueOfRisikokategorieCalcCd();
    }
    else
    {
        ret["RISIKOKATEGORIE_CALC_CD"]=Json::Value();
    }
    if(getRiskindexGroup())
    {
        ret["RISKINDEX_GROUP"]=getValueOfRiskindexGroup();
    }
    else
    {
        ret["RISKINDEX_GROUP"]=Json::Value();
    }
    if(getEstAmountRemWithMutdatum())
    {
        ret["EST_AMOUNT_REM_WITH_MUTDATUM"]=getEstAmountRemWithMutdatum()->toDbStringLocal();
    }
    else
    {
        ret["EST_AMOUNT_REM_WITH_MUTDATUM"]=Json::Value();
    }
    if(getGesamtvermoegenMutdatum())
    {
        ret["GESAMTVERMOEGEN_MUTDATUM"]=getGesamtvermoegenMutdatum()->toDbStringLocal();
    }
    else
    {
        ret["GESAMTVERMOEGEN_MUTDATUM"]=Json::Value();
    }
    if(getTransactBlCountryMutdatum())
    {
        ret["TRANSACT_BL_COUNTRY_MUTDATUM"]=getTransactBlCountryMutdatum()->toDbStringLocal();
    }
    else
    {
        ret["TRANSACT_BL_COUNTRY_MUTDATUM"]=Json::Value();
    }
    if(getAccountpurposeMutdatum())
    {
        ret["ACCOUNTPURPOSE_MUTDATUM"]=getAccountpurposeMutdatum()->toDbStringLocal();
    }
    else
    {
        ret["ACCOUNTPURPOSE_MUTDATUM"]=Json::Value();
    }
    if(getApsysFlagdeldatapersi())
    {
        ret["APSYS_FLAGDELDATAPERSI"]=getValueOfApsysFlagdeldatapersi();
    }
    else
    {
        ret["APSYS_FLAGDELDATAPERSI"]=Json::Value();
    }
    if(getApsysDtwaitdeldatapersl())
    {
        ret["APSYS_DTWAITDELDATAPERSL"]=getApsysDtwaitdeldatapersl()->toDbStringLocal();
    }
    else
    {
        ret["APSYS_DTWAITDELDATAPERSL"]=Json::Value();
    }
    if(getNameEnc())
    {
        ret["NAME_ENC"]=getValueOfNameEnc();
    }
    else
    {
        ret["NAME_ENC"]=Json::Value();
    }
    if(getInApsysTempEntsperrenCd())
    {
        ret["IN_APSYS_TEMP_ENTSPERREN_CD"]=getValueOfInApsysTempEntsperrenCd();
    }
    else
    {
        ret["IN_APSYS_TEMP_ENTSPERREN_CD"]=Json::Value();
    }
    if(getInApsysTempEntspUserid())
    {
        ret["IN_APSYS_TEMP_ENTSP_USERID"]=getValueOfInApsysTempEntspUserid();
    }
    else
    {
        ret["IN_APSYS_TEMP_ENTSP_USERID"]=Json::Value();
    }
    if(getInApsysTempEntspDatum())
    {
        ret["IN_APSYS_TEMP_ENTSP_DATUM"]=getInApsysTempEntspDatum()->toDbStringLocal();
    }
    else
    {
        ret["IN_APSYS_TEMP_ENTSP_DATUM"]=Json::Value();
    }
    if(getApsysCdregs())
    {
        ret["APSYS_CDREGS"]=getValueOfApsysCdregs();
    }
    else
    {
        ret["APSYS_CDREGS"]=Json::Value();
    }
    if(getRetentionOnHold())
    {
        ret["RETENTION_ON_HOLD"]=getValueOfRetentionOnHold();
    }
    else
    {
        ret["RETENTION_ON_HOLD"]=Json::Value();
    }
    if(getRetentionOnHoldDate())
    {
        ret["RETENTION_ON_HOLD_DATE"]=getRetentionOnHoldDate()->toDbStringLocal();
    }
    else
    {
        ret["RETENTION_ON_HOLD_DATE"]=Json::Value();
    }
    if(getRetentionOnHoldReason())
    {
        ret["RETENTION_ON_HOLD_REASON"]=getValueOfRetentionOnHoldReason();
    }
    else
    {
        ret["RETENTION_ON_HOLD_REASON"]=Json::Value();
    }
    if(getLogicalErasure())
    {
        ret["LOGICAL_ERASURE"]=getValueOfLogicalErasure();
    }
    else
    {
        ret["LOGICAL_ERASURE"]=Json::Value();
    }
    if(getLogicalErasureDate())
    {
        ret["LOGICAL_ERASURE_DATE"]=getLogicalErasureDate()->toDbStringLocal();
    }
    else
    {
        ret["LOGICAL_ERASURE_DATE"]=Json::Value();
    }
    if(getLogicalErasureReason())
    {
        ret["LOGICAL_ERASURE_REASON"]=getValueOfLogicalErasureReason();
    }
    else
    {
        ret["LOGICAL_ERASURE_REASON"]=Json::Value();
    }
    if(getComplianceMinRiskCategory())
    {
        ret["COMPLIANCE_MIN_RISK_CATEGORY"]=getValueOfComplianceMinRiskCategory();
    }
    else
    {
        ret["COMPLIANCE_MIN_RISK_CATEGORY"]=Json::Value();
    }
    if(getComplianceMinRiskComment())
    {
        ret["COMPLIANCE_MIN_RISK_COMMENT"]=getValueOfComplianceMinRiskComment();
    }
    else
    {
        ret["COMPLIANCE_MIN_RISK_COMMENT"]=Json::Value();
    }
    if(getClientStructureCd())
    {
        ret["CLIENT_STRUCTURE_CD"]=getValueOfClientStructureCd();
    }
    else
    {
        ret["CLIENT_STRUCTURE_CD"]=Json::Value();
    }
    if(getClientSubstructureCd())
    {
        ret["CLIENT_SUBSTRUCTURE_CD"]=getValueOfClientSubstructureCd();
    }
    else
    {
        ret["CLIENT_SUBSTRUCTURE_CD"]=Json::Value();
    }
    return ret;
}

bool Kunde::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("KUNDENID"))
    {
        if(!validJsonOfField(0, "KUNDENID", pJson["KUNDENID"], err, true))
            return false;
    }
    else
    {
        err="The KUNDENID column cannot be null";
        return false;
    }
    if(pJson.isMember("BEZEICHNUNG"))
    {
        if(!validJsonOfField(1, "BEZEICHNUNG", pJson["BEZEICHNUNG"], err, true))
            return false;
    }
    if(pJson.isMember("KUNDESEIT"))
    {
        if(!validJsonOfField(2, "KUNDESEIT", pJson["KUNDESEIT"], err, true))
            return false;
    }
    if(pJson.isMember("VERTRAGSPARTEI_CD"))
    {
        if(!validJsonOfField(3, "VERTRAGSPARTEI_CD", pJson["VERTRAGSPARTEI_CD"], err, true))
            return false;
    }
    if(pJson.isMember("LOESCH_CD"))
    {
        if(!validJsonOfField(4, "LOESCH_CD", pJson["LOESCH_CD"], err, true))
            return false;
    }
    if(pJson.isMember("LOESCHDATUM"))
    {
        if(!validJsonOfField(5, "LOESCHDATUM", pJson["LOESCHDATUM"], err, true))
            return false;
    }
    if(pJson.isMember("CRTDATUM"))
    {
        if(!validJsonOfField(6, "CRTDATUM", pJson["CRTDATUM"], err, true))
            return false;
    }
    if(pJson.isMember("CRTUSER"))
    {
        if(!validJsonOfField(7, "CRTUSER", pJson["CRTUSER"], err, true))
            return false;
    }
    if(pJson.isMember("MUTDATUM"))
    {
        if(!validJsonOfField(8, "MUTDATUM", pJson["MUTDATUM"], err, true))
            return false;
    }
    if(pJson.isMember("MUTUSER"))
    {
        if(!validJsonOfField(9, "MUTUSER", pJson["MUTUSER"], err, true))
            return false;
    }
    if(pJson.isMember("PSEUDOACCOUNT_CD"))
    {
        if(!validJsonOfField(10, "PSEUDOACCOUNT_CD", pJson["PSEUDOACCOUNT_CD"], err, true))
            return false;
    }
    if(pJson.isMember("KUNDEBESUCH"))
    {
        if(!validJsonOfField(11, "KUNDEBESUCH", pJson["KUNDEBESUCH"], err, true))
            return false;
    }
    if(pJson.isMember("BEZEICHNUNGVERTRAG"))
    {
        if(!validJsonOfField(12, "BEZEICHNUNGVERTRAG", pJson["BEZEICHNUNGVERTRAG"], err, true))
            return false;
    }
    if(pJson.isMember("PSEUDONYM"))
    {
        if(!validJsonOfField(13, "PSEUDONYM", pJson["PSEUDONYM"], err, true))
            return false;
    }
    if(pJson.isMember("RECHTSDOMIZIL_CD"))
    {
        if(!validJsonOfField(14, "RECHTSDOMIZIL_CD", pJson["RECHTSDOMIZIL_CD"], err, true))
            return false;
    }
    if(pJson.isMember("KORRESPONDENZSPRACH_CD"))
    {
        if(!validJsonOfField(15, "KORRESPONDENZSPRACH_CD", pJson["KORRESPONDENZSPRACH_CD"], err, true))
            return false;
    }
    if(pJson.isMember("MIT_PROFIL_CD"))
    {
        if(!validJsonOfField(16, "MIT_PROFIL_CD", pJson["MIT_PROFIL_CD"], err, true))
            return false;
    }
    if(pJson.isMember("GEMEINSCHAFTSKONTO_CD"))
    {
        if(!validJsonOfField(17, "GEMEINSCHAFTSKONTO_CD", pJson["GEMEINSCHAFTSKONTO_CD"], err, true))
            return false;
    }
    if(pJson.isMember("PIN"))
    {
        if(!validJsonOfField(18, "PIN", pJson["PIN"], err, true))
            return false;
    }
    if(pJson.isMember("VERWENDUNGSZWECK"))
    {
        if(!validJsonOfField(19, "VERWENDUNGSZWECK", pJson["VERWENDUNGSZWECK"], err, true))
            return false;
    }
    if(pJson.isMember("IDENTIFIKATIONSART_CD"))
    {
        if(!validJsonOfField(20, "IDENTIFIKATIONSART_CD", pJson["IDENTIFIKATIONSART_CD"], err, true))
            return false;
    }
    if(pJson.isMember("VERMOEGENSURSPRUNG_CD"))
    {
        if(!validJsonOfField(21, "VERMOEGENSURSPRUNG_CD", pJson["VERMOEGENSURSPRUNG_CD"], err, true))
            return false;
    }
    if(pJson.isMember("VERMOEGENSURSPRUNG"))
    {
        if(!validJsonOfField(22, "VERMOEGENSURSPRUNG", pJson["VERMOEGENSURSPRUNG"], err, true))
            return false;
    }
    if(pJson.isMember("GELDVONKONTO"))
    {
        if(!validJsonOfField(23, "GELDVONKONTO", pJson["GELDVONKONTO"], err, true))
            return false;
    }
    if(pJson.isMember("BISHERIGEBETREUUNG"))
    {
        if(!validJsonOfField(24, "BISHERIGEBETREUUNG", pJson["BISHERIGEBETREUUNG"], err, true))
            return false;
    }
    if(pJson.isMember("BISHERIGEBETREUUNGSEIT"))
    {
        if(!validJsonOfField(25, "BISHERIGEBETREUUNGSEIT", pJson["BISHERIGEBETREUUNGSEIT"], err, true))
            return false;
    }
    if(pJson.isMember("MANUALOPEN_CD"))
    {
        if(!validJsonOfField(26, "MANUALOPEN_CD", pJson["MANUALOPEN_CD"], err, true))
            return false;
    }
    if(pJson.isMember("EIN_VERMOEGEN_CD"))
    {
        if(!validJsonOfField(27, "EIN_VERMOEGEN_CD", pJson["EIN_VERMOEGEN_CD"], err, true))
            return false;
    }
    if(pJson.isMember("REGIONZAHLUNG_CD"))
    {
        if(!validJsonOfField(28, "REGIONZAHLUNG_CD", pJson["REGIONZAHLUNG_CD"], err, true))
            return false;
    }
    if(pJson.isMember("EIN_VERMOEGENART_CD"))
    {
        if(!validJsonOfField(29, "EIN_VERMOEGENART_CD", pJson["EIN_VERMOEGENART_CD"], err, true))
            return false;
    }
    if(pJson.isMember("SPEZ_WUENSCHE_CD"))
    {
        if(!validJsonOfField(30, "SPEZ_WUENSCHE_CD", pJson["SPEZ_WUENSCHE_CD"], err, true))
            return false;
    }
    if(pJson.isMember("MANAGER_CD"))
    {
        if(!validJsonOfField(31, "MANAGER_CD", pJson["MANAGER_CD"], err, true))
            return false;
    }
    if(pJson.isMember("RISKINDEX"))
    {
        if(!validJsonOfField(32, "RISKINDEX", pJson["RISKINDEX"], err, true))
            return false;
    }
    if(pJson.isMember("RISKINDEX_GUELTISEIT"))
    {
        if(!validJsonOfField(33, "RISKINDEX_GUELTISEIT", pJson["RISKINDEX_GUELTISEIT"], err, true))
            return false;
    }
    if(pJson.isMember("RISKINDEX_LETZTEBERECHNUNG"))
    {
        if(!validJsonOfField(34, "RISKINDEX_LETZTEBERECHNUNG", pJson["RISKINDEX_LETZTEBERECHNUNG"], err, true))
            return false;
    }
    if(pJson.isMember("KONTOEROEFFNUNGSART_CD"))
    {
        if(!validJsonOfField(35, "KONTOEROEFFNUNGSART_CD", pJson["KONTOEROEFFNUNGSART_CD"], err, true))
            return false;
    }
    if(pJson.isMember("RISKINDEXBERECHNEN_CD"))
    {
        if(!validJsonOfField(36, "RISKINDEXBERECHNEN_CD", pJson["RISKINDEXBERECHNEN_CD"], err, true))
            return false;
    }
    if(pJson.isMember("KUNDENNATUR_CD"))
    {
        if(!validJsonOfField(37, "KUNDENNATUR_CD", pJson["KUNDENNATUR_CD"], err, true))
            return false;
    }
    if(pJson.isMember("RISIKOKATEGORIE_CD"))
    {
        if(!validJsonOfField(38, "RISIKOKATEGORIE_CD", pJson["RISIKOKATEGORIE_CD"], err, true))
            return false;
    }
    if(pJson.isMember("PEP_CD"))
    {
        if(!validJsonOfField(39, "PEP_CD", pJson["PEP_CD"], err, true))
            return false;
    }
    if(pJson.isMember("SPEZIALKATEGORIE_CD"))
    {
        if(!validJsonOfField(40, "SPEZIALKATEGORIE_CD", pJson["SPEZIALKATEGORIE_CD"], err, true))
            return false;
    }
    if(pJson.isMember("NATURE_CD"))
    {
        if(!validJsonOfField(41, "NATURE_CD", pJson["NATURE_CD"], err, true))
            return false;
    }
    if(pJson.isMember("NAME"))
    {
        if(!validJsonOfField(42, "NAME", pJson["NAME"], err, true))
            return false;
    }
    if(pJson.isMember("LEDIGERNAME"))
    {
        if(!validJsonOfField(43, "LEDIGERNAME", pJson["LEDIGERNAME"], err, true))
            return false;
    }
    if(pJson.isMember("VORNAME"))
    {
        if(!validJsonOfField(44, "VORNAME", pJson["VORNAME"], err, true))
            return false;
    }
    if(pJson.isMember("CDPARTC"))
    {
        if(!validJsonOfField(45, "CDPARTC", pJson["CDPARTC"], err, true))
            return false;
    }
    if(pJson.isMember("NATIONALITAET_CD"))
    {
        if(!validJsonOfField(46, "NATIONALITAET_CD", pJson["NATIONALITAET_CD"], err, true))
            return false;
    }
    if(pJson.isMember("RISIKOLAND_CD"))
    {
        if(!validJsonOfField(47, "RISIKOLAND_CD", pJson["RISIKOLAND_CD"], err, true))
            return false;
    }
    if(pJson.isMember("PERSOENLICHBEKANNT_CD"))
    {
        if(!validJsonOfField(48, "PERSOENLICHBEKANNT_CD", pJson["PERSOENLICHBEKANNT_CD"], err, true))
            return false;
    }
    if(pJson.isMember("RISIKOTAETIGKEIT_CD"))
    {
        if(!validJsonOfField(49, "RISIKOTAETIGKEIT_CD", pJson["RISIKOTAETIGKEIT_CD"], err, true))
            return false;
    }
    if(pJson.isMember("STEUERDOMIZIL_CD"))
    {
        if(!validJsonOfField(50, "STEUERDOMIZIL_CD", pJson["STEUERDOMIZIL_CD"], err, true))
            return false;
    }
    if(pJson.isMember("EU_TAXSTATUS_CD"))
    {
        if(!validJsonOfField(51, "EU_TAXSTATUS_CD", pJson["EU_TAXSTATUS_CD"], err, true))
            return false;
    }
    if(pJson.isMember("TIN"))
    {
        if(!validJsonOfField(52, "TIN", pJson["TIN"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_CDROLPERSI"))
    {
        if(!validJsonOfField(53, "APSYS_CDROLPERSI", pJson["APSYS_CDROLPERSI"], err, true))
            return false;
    }
    if(pJson.isMember("VERTRAGSPRACH_CD"))
    {
        if(!validJsonOfField(54, "VERTRAGSPRACH_CD", pJson["VERTRAGSPRACH_CD"], err, true))
            return false;
    }
    if(pJson.isMember("VERMOEGENSKATEGORIE_IHAG_CD"))
    {
        if(!validJsonOfField(55, "VERMOEGENSKATEGORIE_IHAG_CD", pJson["VERMOEGENSKATEGORIE_IHAG_CD"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_INTISHS"))
    {
        if(!validJsonOfField(56, "APSYS_INTISHS", pJson["APSYS_INTISHS"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_INTILGS"))
    {
        if(!validJsonOfField(57, "APSYS_INTILGS", pJson["APSYS_INTILGS"], err, true))
            return false;
    }
    if(pJson.isMember("GESAMTVERMOEGEN_CD"))
    {
        if(!validJsonOfField(58, "GESAMTVERMOEGEN_CD", pJson["GESAMTVERMOEGEN_CD"], err, true))
            return false;
    }
    if(pJson.isMember("COMPLIANCE_OK_CD"))
    {
        if(!validJsonOfField(59, "COMPLIANCE_OK_CD", pJson["COMPLIANCE_OK_CD"], err, true))
            return false;
    }
    if(pJson.isMember("COMPLIANCE_OK_BEMERKUNG"))
    {
        if(!validJsonOfField(60, "COMPLIANCE_OK_BEMERKUNG", pJson["COMPLIANCE_OK_BEMERKUNG"], err, true))
            return false;
    }
    if(pJson.isMember("COMPLIANCE_OK_DATUM"))
    {
        if(!validJsonOfField(61, "COMPLIANCE_OK_DATUM", pJson["COMPLIANCE_OK_DATUM"], err, true))
            return false;
    }
    if(pJson.isMember("COMPLIANCE_OK_USERID"))
    {
        if(!validJsonOfField(62, "COMPLIANCE_OK_USERID", pJson["COMPLIANCE_OK_USERID"], err, true))
            return false;
    }
    if(pJson.isMember("EIN_VERMOEGEN"))
    {
        if(!validJsonOfField(63, "EIN_VERMOEGEN", pJson["EIN_VERMOEGEN"], err, true))
            return false;
    }
    if(pJson.isMember("SEGMENTIERUNG_CD"))
    {
        if(!validJsonOfField(64, "SEGMENTIERUNG_CD", pJson["SEGMENTIERUNG_CD"], err, true))
            return false;
    }
    if(pJson.isMember("AKTID"))
    {
        if(!validJsonOfField(65, "AKTID", pJson["AKTID"], err, true))
            return false;
    }
    if(pJson.isMember("VALIDID"))
    {
        if(!validJsonOfField(66, "VALIDID", pJson["VALIDID"], err, true))
            return false;
    }
    if(pJson.isMember("VALID_CD"))
    {
        if(!validJsonOfField(67, "VALID_CD", pJson["VALID_CD"], err, true))
            return false;
    }
    if(pJson.isMember("VALIDUSER"))
    {
        if(!validJsonOfField(68, "VALIDUSER", pJson["VALIDUSER"], err, true))
            return false;
    }
    if(pJson.isMember("ENC_SALT"))
    {
        if(!validJsonOfField(69, "ENC_SALT", pJson["ENC_SALT"], err, true))
            return false;
    }
    if(pJson.isMember("BEZEICHNUNG_ENC"))
    {
        if(!validJsonOfField(70, "BEZEICHNUNG_ENC", pJson["BEZEICHNUNG_ENC"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_CDMOTIFPARTS"))
    {
        if(!validJsonOfField(71, "APSYS_CDMOTIFPARTS", pJson["APSYS_CDMOTIFPARTS"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_CDINDUS0S"))
    {
        if(!validJsonOfField(72, "APSYS_CDINDUS0S", pJson["APSYS_CDINDUS0S"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_FLAGPREAVISEXEC"))
    {
        if(!validJsonOfField(73, "APSYS_FLAGPREAVISEXEC", pJson["APSYS_FLAGPREAVISEXEC"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_CDAVIOBISPECC"))
    {
        if(!validJsonOfField(74, "APSYS_CDAVIOBISPECC", pJson["APSYS_CDAVIOBISPECC"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_FLAGHISPERC"))
    {
        if(!validJsonOfField(75, "APSYS_FLAGHISPERC", pJson["APSYS_FLAGHISPERC"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_REPAMANUC"))
    {
        if(!validJsonOfField(76, "APSYS_REPAMANUC", pJson["APSYS_REPAMANUC"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_PERDEVCALC"))
    {
        if(!validJsonOfField(77, "APSYS_PERDEVCALC", pJson["APSYS_PERDEVCALC"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_FLAGUKTAXC"))
    {
        if(!validJsonOfField(78, "APSYS_FLAGUKTAXC", pJson["APSYS_FLAGUKTAXC"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_CDNOGAS"))
    {
        if(!validJsonOfField(79, "APSYS_CDNOGAS", pJson["APSYS_CDNOGAS"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_STATFISCC"))
    {
        if(!validJsonOfField(80, "APSYS_STATFISCC", pJson["APSYS_STATFISCC"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_FLAGFWTI"))
    {
        if(!validJsonOfField(81, "APSYS_FLAGFWTI", pJson["APSYS_FLAGFWTI"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_FLAGFWTUKNRSDI"))
    {
        if(!validJsonOfField(82, "APSYS_FLAGFWTUKNRSDI", pJson["APSYS_FLAGFWTUKNRSDI"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_FLAGFWTTAXSPEGEI"))
    {
        if(!validJsonOfField(83, "APSYS_FLAGFWTTAXSPEGEI", pJson["APSYS_FLAGFWTTAXSPEGEI"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_CDFWTOPTREGULFISCANCC"))
    {
        if(!validJsonOfField(84, "APSYS_CDFWTOPTREGULFISCANCC", pJson["APSYS_CDFWTOPTREGULFISCANCC"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_CDFWTSTATREGULFISCANCC"))
    {
        if(!validJsonOfField(85, "APSYS_CDFWTSTATREGULFISCANCC", pJson["APSYS_CDFWTSTATREGULFISCANCC"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_CDFWTOPTREGULFISCFUTC"))
    {
        if(!validJsonOfField(86, "APSYS_CDFWTOPTREGULFISCFUTC", pJson["APSYS_CDFWTOPTREGULFISCFUTC"], err, true))
            return false;
    }
    if(pJson.isMember("STEUERLAND_ABGST_CD"))
    {
        if(!validJsonOfField(87, "STEUERLAND_ABGST_CD", pJson["STEUERLAND_ABGST_CD"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_CDNATURES"))
    {
        if(!validJsonOfField(88, "APSYS_CDNATURES", pJson["APSYS_CDNATURES"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_SHNAS"))
    {
        if(!validJsonOfField(89, "APSYS_SHNAS", pJson["APSYS_SHNAS"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_CDPYHQDOMIS"))
    {
        if(!validJsonOfField(90, "APSYS_CDPYHQDOMIS", pJson["APSYS_CDPYHQDOMIS"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_CDPERMI"))
    {
        if(!validJsonOfField(91, "APSYS_CDPERMI", pJson["APSYS_CDPERMI"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_IDRCIS"))
    {
        if(!validJsonOfField(92, "APSYS_IDRCIS", pJson["APSYS_IDRCIS"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_FLAGISTTC"))
    {
        if(!validJsonOfField(93, "APSYS_FLAGISTTC", pJson["APSYS_FLAGISTTC"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_DEVEVALS"))
    {
        if(!validJsonOfField(94, "APSYS_DEVEVALS", pJson["APSYS_DEVEVALS"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_IDSTRUCS"))
    {
        if(!validJsonOfField(95, "APSYS_IDSTRUCS", pJson["APSYS_IDSTRUCS"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_SUIVIAGTS"))
    {
        if(!validJsonOfField(96, "APSYS_SUIVIAGTS", pJson["APSYS_SUIVIAGTS"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_CDINDUSCSSFS"))
    {
        if(!validJsonOfField(97, "APSYS_CDINDUSCSSFS", pJson["APSYS_CDINDUSCSSFS"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_CDINDUSBLUXS"))
    {
        if(!validJsonOfField(98, "APSYS_CDINDUSBLUXS", pJson["APSYS_CDINDUSBLUXS"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_CDINDUSSBUBA"))
    {
        if(!validJsonOfField(99, "APSYS_CDINDUSSBUBA", pJson["APSYS_CDINDUSSBUBA"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_CDINDUSSBNS"))
    {
        if(!validJsonOfField(100, "APSYS_CDINDUSSBNS", pJson["APSYS_CDINDUSSBNS"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_GRMTEVALS"))
    {
        if(!validJsonOfField(101, "APSYS_GRMTEVALS", pJson["APSYS_GRMTEVALS"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_IDPOCS"))
    {
        if(!validJsonOfField(102, "APSYS_IDPOCS", pJson["APSYS_IDPOCS"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_INFO"))
    {
        if(!validJsonOfField(103, "APSYS_INFO", pJson["APSYS_INFO"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_IDENTS"))
    {
        if(!validJsonOfField(104, "APSYS_IDENTS", pJson["APSYS_IDENTS"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_STATUS_OPEC"))
    {
        if(!validJsonOfField(105, "APSYS_STATUS_OPEC", pJson["APSYS_STATUS_OPEC"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_ERRI"))
    {
        if(!validJsonOfField(106, "APSYS_ERRI", pJson["APSYS_ERRI"], err, true))
            return false;
    }
    if(pJson.isMember("NATIONALITAET2_CD"))
    {
        if(!validJsonOfField(107, "NATIONALITAET2_CD", pJson["NATIONALITAET2_CD"], err, true))
            return false;
    }
    if(pJson.isMember("NATIONALITAET3_CD"))
    {
        if(!validJsonOfField(108, "NATIONALITAET3_CD", pJson["NATIONALITAET3_CD"], err, true))
            return false;
    }
    if(pJson.isMember("VERMOEGENSURSPRUNG2_CD"))
    {
        if(!validJsonOfField(109, "VERMOEGENSURSPRUNG2_CD", pJson["VERMOEGENSURSPRUNG2_CD"], err, true))
            return false;
    }
    if(pJson.isMember("VERMOEGENSURSPRUNG2"))
    {
        if(!validJsonOfField(110, "VERMOEGENSURSPRUNG2", pJson["VERMOEGENSURSPRUNG2"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP1_CD"))
    {
        if(!validJsonOfField(111, "APPROVAL_STEP1_CD", pJson["APPROVAL_STEP1_CD"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP1_USER"))
    {
        if(!validJsonOfField(112, "APPROVAL_STEP1_USER", pJson["APPROVAL_STEP1_USER"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP1_DATE"))
    {
        if(!validJsonOfField(113, "APPROVAL_STEP1_DATE", pJson["APPROVAL_STEP1_DATE"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP2_CD"))
    {
        if(!validJsonOfField(114, "APPROVAL_STEP2_CD", pJson["APPROVAL_STEP2_CD"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP2_USER"))
    {
        if(!validJsonOfField(115, "APPROVAL_STEP2_USER", pJson["APPROVAL_STEP2_USER"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP2_DATE"))
    {
        if(!validJsonOfField(116, "APPROVAL_STEP2_DATE", pJson["APPROVAL_STEP2_DATE"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP3_CD"))
    {
        if(!validJsonOfField(117, "APPROVAL_STEP3_CD", pJson["APPROVAL_STEP3_CD"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP3_USER"))
    {
        if(!validJsonOfField(118, "APPROVAL_STEP3_USER", pJson["APPROVAL_STEP3_USER"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP3_DATE"))
    {
        if(!validJsonOfField(119, "APPROVAL_STEP3_DATE", pJson["APPROVAL_STEP3_DATE"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP4_CD"))
    {
        if(!validJsonOfField(120, "APPROVAL_STEP4_CD", pJson["APPROVAL_STEP4_CD"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP4_USER"))
    {
        if(!validJsonOfField(121, "APPROVAL_STEP4_USER", pJson["APPROVAL_STEP4_USER"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP4_DATE"))
    {
        if(!validJsonOfField(122, "APPROVAL_STEP4_DATE", pJson["APPROVAL_STEP4_DATE"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP5_CD"))
    {
        if(!validJsonOfField(123, "APPROVAL_STEP5_CD", pJson["APPROVAL_STEP5_CD"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP5_USER"))
    {
        if(!validJsonOfField(124, "APPROVAL_STEP5_USER", pJson["APPROVAL_STEP5_USER"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP5_DATE"))
    {
        if(!validJsonOfField(125, "APPROVAL_STEP5_DATE", pJson["APPROVAL_STEP5_DATE"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP1_BEM"))
    {
        if(!validJsonOfField(126, "APPROVAL_STEP1_BEM", pJson["APPROVAL_STEP1_BEM"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP2_BEM"))
    {
        if(!validJsonOfField(127, "APPROVAL_STEP2_BEM", pJson["APPROVAL_STEP2_BEM"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP3_BEM"))
    {
        if(!validJsonOfField(128, "APPROVAL_STEP3_BEM", pJson["APPROVAL_STEP3_BEM"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP4_BEM"))
    {
        if(!validJsonOfField(129, "APPROVAL_STEP4_BEM", pJson["APPROVAL_STEP4_BEM"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP5_BEM"))
    {
        if(!validJsonOfField(130, "APPROVAL_STEP5_BEM", pJson["APPROVAL_STEP5_BEM"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP1_ASSES_CD"))
    {
        if(!validJsonOfField(131, "APPROVAL_STEP1_ASSES_CD", pJson["APPROVAL_STEP1_ASSES_CD"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP2_ASSES_CD"))
    {
        if(!validJsonOfField(132, "APPROVAL_STEP2_ASSES_CD", pJson["APPROVAL_STEP2_ASSES_CD"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP3_ASSES_CD"))
    {
        if(!validJsonOfField(133, "APPROVAL_STEP3_ASSES_CD", pJson["APPROVAL_STEP3_ASSES_CD"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP4_ASSES_CD"))
    {
        if(!validJsonOfField(134, "APPROVAL_STEP4_ASSES_CD", pJson["APPROVAL_STEP4_ASSES_CD"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP5_ASSES_CD"))
    {
        if(!validJsonOfField(135, "APPROVAL_STEP5_ASSES_CD", pJson["APPROVAL_STEP5_ASSES_CD"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_STATUS_CD"))
    {
        if(!validJsonOfField(136, "APPROVAL_STATUS_CD", pJson["APPROVAL_STATUS_CD"], err, true))
            return false;
    }
    if(pJson.isMember("CLIENT_STATUS_CD"))
    {
        if(!validJsonOfField(137, "CLIENT_STATUS_CD", pJson["CLIENT_STATUS_CD"], err, true))
            return false;
    }
    if(pJson.isMember("DISCHARGE_ORDERS_CD"))
    {
        if(!validJsonOfField(138, "DISCHARGE_ORDERS_CD", pJson["DISCHARGE_ORDERS_CD"], err, true))
            return false;
    }
    if(pJson.isMember("PRINT_SUMMARY_HOLDMAIL_ONLY_CD"))
    {
        if(!validJsonOfField(139, "PRINT_SUMMARY_HOLDMAIL_ONLY_CD", pJson["PRINT_SUMMARY_HOLDMAIL_ONLY_CD"], err, true))
            return false;
    }
    if(pJson.isMember("EBANKING_CONTRACT_CD"))
    {
        if(!validJsonOfField(140, "EBANKING_CONTRACT_CD", pJson["EBANKING_CONTRACT_CD"], err, true))
            return false;
    }
    if(pJson.isMember("EBANKING_CONTRACT_LANGUAGE_CD"))
    {
        if(!validJsonOfField(141, "EBANKING_CONTRACT_LANGUAGE_CD", pJson["EBANKING_CONTRACT_LANGUAGE_CD"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_DTECHDIARYL"))
    {
        if(!validJsonOfField(142, "APSYS_DTECHDIARYL", pJson["APSYS_DTECHDIARYL"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_MOTDIARYS"))
    {
        if(!validJsonOfField(143, "APSYS_MOTDIARYS", pJson["APSYS_MOTDIARYS"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_IDTYPCLIIRSS"))
    {
        if(!validJsonOfField(144, "APSYS_IDTYPCLIIRSS", pJson["APSYS_IDTYPCLIIRSS"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_IDRCIQIS"))
    {
        if(!validJsonOfField(145, "APSYS_IDRCIQIS", pJson["APSYS_IDRCIQIS"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_IDRCIFATCAS"))
    {
        if(!validJsonOfField(146, "APSYS_IDRCIFATCAS", pJson["APSYS_IDRCIFATCAS"], err, true))
            return false;
    }
    if(pJson.isMember("MAILING_TARIF_TYPE_CD"))
    {
        if(!validJsonOfField(147, "MAILING_TARIF_TYPE_CD", pJson["MAILING_TARIF_TYPE_CD"], err, true))
            return false;
    }
    if(pJson.isMember("REGISTERED_CD"))
    {
        if(!validJsonOfField(148, "REGISTERED_CD", pJson["REGISTERED_CD"], err, true))
            return false;
    }
    if(pJson.isMember("REGISTERED_MAIL_CD"))
    {
        if(!validJsonOfField(149, "REGISTERED_MAIL_CD", pJson["REGISTERED_MAIL_CD"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_NBPERSCPARTIEL"))
    {
        if(!validJsonOfField(150, "APSYS_NBPERSCPARTIEL", pJson["APSYS_NBPERSCPARTIEL"], err, true))
            return false;
    }
    if(pJson.isMember("ASSET_VALUE_TIER_CD"))
    {
        if(!validJsonOfField(151, "ASSET_VALUE_TIER_CD", pJson["ASSET_VALUE_TIER_CD"], err, true))
            return false;
    }
    if(pJson.isMember("RELATIONSHIP_TYPE_AML_CD"))
    {
        if(!validJsonOfField(152, "RELATIONSHIP_TYPE_AML_CD", pJson["RELATIONSHIP_TYPE_AML_CD"], err, true))
            return false;
    }
    if(pJson.isMember("CB_ASSET_VALUE_TIER_CD"))
    {
        if(!validJsonOfField(153, "CB_ASSET_VALUE_TIER_CD", pJson["CB_ASSET_VALUE_TIER_CD"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_SCORE"))
    {
        if(!validJsonOfField(154, "APPROVAL_SCORE", pJson["APPROVAL_SCORE"], err, true))
            return false;
    }
    if(pJson.isMember("APPROVAL_SCORE_STEPS"))
    {
        if(!validJsonOfField(155, "APPROVAL_SCORE_STEPS", pJson["APPROVAL_SCORE_STEPS"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_DTDEBPARTL"))
    {
        if(!validJsonOfField(156, "APSYS_DTDEBPARTL", pJson["APSYS_DTDEBPARTL"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_DTFINPARTL"))
    {
        if(!validJsonOfField(157, "APSYS_DTFINPARTL", pJson["APSYS_DTFINPARTL"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_CDMOTIFCLOS"))
    {
        if(!validJsonOfField(158, "APSYS_CDMOTIFCLOS", pJson["APSYS_CDMOTIFCLOS"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_CDNATURECPARTIEEMIRC"))
    {
        if(!validJsonOfField(159, "APSYS_CDNATURECPARTIEEMIRC", pJson["APSYS_CDNATURECPARTIEEMIRC"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_FLAGOTHEREMIRC"))
    {
        if(!validJsonOfField(160, "APSYS_FLAGOTHEREMIRC", pJson["APSYS_FLAGOTHEREMIRC"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_CDINDUSEMIRS"))
    {
        if(!validJsonOfField(161, "APSYS_CDINDUSEMIRS", pJson["APSYS_CDINDUSEMIRS"], err, true))
            return false;
    }
    if(pJson.isMember("OPENED_IN_APSYS_DATE"))
    {
        if(!validJsonOfField(162, "OPENED_IN_APSYS_DATE", pJson["OPENED_IN_APSYS_DATE"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_CDNATURECPARTIEFMIAC"))
    {
        if(!validJsonOfField(163, "APSYS_CDNATURECPARTIEFMIAC", pJson["APSYS_CDNATURECPARTIEFMIAC"], err, true))
            return false;
    }
    if(pJson.isMember("EBANKING_CLOSED_CD"))
    {
        if(!validJsonOfField(164, "EBANKING_CLOSED_CD", pJson["EBANKING_CLOSED_CD"], err, true))
            return false;
    }
    if(pJson.isMember("EBANKING_CLOSINGDATE"))
    {
        if(!validJsonOfField(165, "EBANKING_CLOSINGDATE", pJson["EBANKING_CLOSINGDATE"], err, true))
            return false;
    }
    if(pJson.isMember("KYC_REVIEW_PROCESS_START_DATE"))
    {
        if(!validJsonOfField(166, "KYC_REVIEW_PROCESS_START_DATE", pJson["KYC_REVIEW_PROCESS_START_DATE"], err, true))
            return false;
    }
    if(pJson.isMember("REMARKS"))
    {
        if(!validJsonOfField(167, "REMARKS", pJson["REMARKS"], err, true))
            return false;
    }
    if(pJson.isMember("TRANSACTION_BL_COUNTRY_CD"))
    {
        if(!validJsonOfField(168, "TRANSACTION_BL_COUNTRY_CD", pJson["TRANSACTION_BL_COUNTRY_CD"], err, true))
            return false;
    }
    if(pJson.isMember("CLIENTGROUP_CD"))
    {
        if(!validJsonOfField(169, "CLIENTGROUP_CD", pJson["CLIENTGROUP_CD"], err, true))
            return false;
    }
    if(pJson.isMember("RISKINDEX_CALC"))
    {
        if(!validJsonOfField(170, "RISKINDEX_CALC", pJson["RISKINDEX_CALC"], err, true))
            return false;
    }
    if(pJson.isMember("LAST_CALC_CRI_MUTDATUM"))
    {
        if(!validJsonOfField(171, "LAST_CALC_CRI_MUTDATUM", pJson["LAST_CALC_CRI_MUTDATUM"], err, true))
            return false;
    }
    if(pJson.isMember("RISIKOKATEGORIE_CALC_CD"))
    {
        if(!validJsonOfField(172, "RISIKOKATEGORIE_CALC_CD", pJson["RISIKOKATEGORIE_CALC_CD"], err, true))
            return false;
    }
    if(pJson.isMember("RISKINDEX_GROUP"))
    {
        if(!validJsonOfField(173, "RISKINDEX_GROUP", pJson["RISKINDEX_GROUP"], err, true))
            return false;
    }
    if(pJson.isMember("EST_AMOUNT_REM_WITH_MUTDATUM"))
    {
        if(!validJsonOfField(174, "EST_AMOUNT_REM_WITH_MUTDATUM", pJson["EST_AMOUNT_REM_WITH_MUTDATUM"], err, true))
            return false;
    }
    if(pJson.isMember("GESAMTVERMOEGEN_MUTDATUM"))
    {
        if(!validJsonOfField(175, "GESAMTVERMOEGEN_MUTDATUM", pJson["GESAMTVERMOEGEN_MUTDATUM"], err, true))
            return false;
    }
    if(pJson.isMember("TRANSACT_BL_COUNTRY_MUTDATUM"))
    {
        if(!validJsonOfField(176, "TRANSACT_BL_COUNTRY_MUTDATUM", pJson["TRANSACT_BL_COUNTRY_MUTDATUM"], err, true))
            return false;
    }
    if(pJson.isMember("ACCOUNTPURPOSE_MUTDATUM"))
    {
        if(!validJsonOfField(177, "ACCOUNTPURPOSE_MUTDATUM", pJson["ACCOUNTPURPOSE_MUTDATUM"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_FLAGDELDATAPERSI"))
    {
        if(!validJsonOfField(178, "APSYS_FLAGDELDATAPERSI", pJson["APSYS_FLAGDELDATAPERSI"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_DTWAITDELDATAPERSL"))
    {
        if(!validJsonOfField(179, "APSYS_DTWAITDELDATAPERSL", pJson["APSYS_DTWAITDELDATAPERSL"], err, true))
            return false;
    }
    if(pJson.isMember("NAME_ENC"))
    {
        if(!validJsonOfField(180, "NAME_ENC", pJson["NAME_ENC"], err, true))
            return false;
    }
    if(pJson.isMember("IN_APSYS_TEMP_ENTSPERREN_CD"))
    {
        if(!validJsonOfField(181, "IN_APSYS_TEMP_ENTSPERREN_CD", pJson["IN_APSYS_TEMP_ENTSPERREN_CD"], err, true))
            return false;
    }
    if(pJson.isMember("IN_APSYS_TEMP_ENTSP_USERID"))
    {
        if(!validJsonOfField(182, "IN_APSYS_TEMP_ENTSP_USERID", pJson["IN_APSYS_TEMP_ENTSP_USERID"], err, true))
            return false;
    }
    if(pJson.isMember("IN_APSYS_TEMP_ENTSP_DATUM"))
    {
        if(!validJsonOfField(183, "IN_APSYS_TEMP_ENTSP_DATUM", pJson["IN_APSYS_TEMP_ENTSP_DATUM"], err, true))
            return false;
    }
    if(pJson.isMember("APSYS_CDREGS"))
    {
        if(!validJsonOfField(184, "APSYS_CDREGS", pJson["APSYS_CDREGS"], err, true))
            return false;
    }
    if(pJson.isMember("RETENTION_ON_HOLD"))
    {
        if(!validJsonOfField(185, "RETENTION_ON_HOLD", pJson["RETENTION_ON_HOLD"], err, true))
            return false;
    }
    if(pJson.isMember("RETENTION_ON_HOLD_DATE"))
    {
        if(!validJsonOfField(186, "RETENTION_ON_HOLD_DATE", pJson["RETENTION_ON_HOLD_DATE"], err, true))
            return false;
    }
    if(pJson.isMember("RETENTION_ON_HOLD_REASON"))
    {
        if(!validJsonOfField(187, "RETENTION_ON_HOLD_REASON", pJson["RETENTION_ON_HOLD_REASON"], err, true))
            return false;
    }
    if(pJson.isMember("LOGICAL_ERASURE"))
    {
        if(!validJsonOfField(188, "LOGICAL_ERASURE", pJson["LOGICAL_ERASURE"], err, true))
            return false;
    }
    if(pJson.isMember("LOGICAL_ERASURE_DATE"))
    {
        if(!validJsonOfField(189, "LOGICAL_ERASURE_DATE", pJson["LOGICAL_ERASURE_DATE"], err, true))
            return false;
    }
    if(pJson.isMember("LOGICAL_ERASURE_REASON"))
    {
        if(!validJsonOfField(190, "LOGICAL_ERASURE_REASON", pJson["LOGICAL_ERASURE_REASON"], err, true))
            return false;
    }
    if(pJson.isMember("COMPLIANCE_MIN_RISK_CATEGORY"))
    {
        if(!validJsonOfField(191, "COMPLIANCE_MIN_RISK_CATEGORY", pJson["COMPLIANCE_MIN_RISK_CATEGORY"], err, true))
            return false;
    }
    if(pJson.isMember("COMPLIANCE_MIN_RISK_COMMENT"))
    {
        if(!validJsonOfField(192, "COMPLIANCE_MIN_RISK_COMMENT", pJson["COMPLIANCE_MIN_RISK_COMMENT"], err, true))
            return false;
    }
    if(pJson.isMember("CLIENT_STRUCTURE_CD"))
    {
        if(!validJsonOfField(193, "CLIENT_STRUCTURE_CD", pJson["CLIENT_STRUCTURE_CD"], err, true))
            return false;
    }
    if(pJson.isMember("CLIENT_SUBSTRUCTURE_CD"))
    {
        if(!validJsonOfField(194, "CLIENT_SUBSTRUCTURE_CD", pJson["CLIENT_SUBSTRUCTURE_CD"], err, true))
            return false;
    }
    return true;
}
bool Kunde::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 195)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[15].empty())
      {
          if(pJson.isMember(pMasqueradingVector[15]))
          {
              if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[16].empty())
      {
          if(pJson.isMember(pMasqueradingVector[16]))
          {
              if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[17].empty())
      {
          if(pJson.isMember(pMasqueradingVector[17]))
          {
              if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[18].empty())
      {
          if(pJson.isMember(pMasqueradingVector[18]))
          {
              if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[19].empty())
      {
          if(pJson.isMember(pMasqueradingVector[19]))
          {
              if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[20].empty())
      {
          if(pJson.isMember(pMasqueradingVector[20]))
          {
              if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[21].empty())
      {
          if(pJson.isMember(pMasqueradingVector[21]))
          {
              if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[22].empty())
      {
          if(pJson.isMember(pMasqueradingVector[22]))
          {
              if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[23].empty())
      {
          if(pJson.isMember(pMasqueradingVector[23]))
          {
              if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[24].empty())
      {
          if(pJson.isMember(pMasqueradingVector[24]))
          {
              if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[25].empty())
      {
          if(pJson.isMember(pMasqueradingVector[25]))
          {
              if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[26].empty())
      {
          if(pJson.isMember(pMasqueradingVector[26]))
          {
              if(!validJsonOfField(26, pMasqueradingVector[26], pJson[pMasqueradingVector[26]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[27].empty())
      {
          if(pJson.isMember(pMasqueradingVector[27]))
          {
              if(!validJsonOfField(27, pMasqueradingVector[27], pJson[pMasqueradingVector[27]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[28].empty())
      {
          if(pJson.isMember(pMasqueradingVector[28]))
          {
              if(!validJsonOfField(28, pMasqueradingVector[28], pJson[pMasqueradingVector[28]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[29].empty())
      {
          if(pJson.isMember(pMasqueradingVector[29]))
          {
              if(!validJsonOfField(29, pMasqueradingVector[29], pJson[pMasqueradingVector[29]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[30].empty())
      {
          if(pJson.isMember(pMasqueradingVector[30]))
          {
              if(!validJsonOfField(30, pMasqueradingVector[30], pJson[pMasqueradingVector[30]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[31].empty())
      {
          if(pJson.isMember(pMasqueradingVector[31]))
          {
              if(!validJsonOfField(31, pMasqueradingVector[31], pJson[pMasqueradingVector[31]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[32].empty())
      {
          if(pJson.isMember(pMasqueradingVector[32]))
          {
              if(!validJsonOfField(32, pMasqueradingVector[32], pJson[pMasqueradingVector[32]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[33].empty())
      {
          if(pJson.isMember(pMasqueradingVector[33]))
          {
              if(!validJsonOfField(33, pMasqueradingVector[33], pJson[pMasqueradingVector[33]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[34].empty())
      {
          if(pJson.isMember(pMasqueradingVector[34]))
          {
              if(!validJsonOfField(34, pMasqueradingVector[34], pJson[pMasqueradingVector[34]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[35].empty())
      {
          if(pJson.isMember(pMasqueradingVector[35]))
          {
              if(!validJsonOfField(35, pMasqueradingVector[35], pJson[pMasqueradingVector[35]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[36].empty())
      {
          if(pJson.isMember(pMasqueradingVector[36]))
          {
              if(!validJsonOfField(36, pMasqueradingVector[36], pJson[pMasqueradingVector[36]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[37].empty())
      {
          if(pJson.isMember(pMasqueradingVector[37]))
          {
              if(!validJsonOfField(37, pMasqueradingVector[37], pJson[pMasqueradingVector[37]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[38].empty())
      {
          if(pJson.isMember(pMasqueradingVector[38]))
          {
              if(!validJsonOfField(38, pMasqueradingVector[38], pJson[pMasqueradingVector[38]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[39].empty())
      {
          if(pJson.isMember(pMasqueradingVector[39]))
          {
              if(!validJsonOfField(39, pMasqueradingVector[39], pJson[pMasqueradingVector[39]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[40].empty())
      {
          if(pJson.isMember(pMasqueradingVector[40]))
          {
              if(!validJsonOfField(40, pMasqueradingVector[40], pJson[pMasqueradingVector[40]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[41].empty())
      {
          if(pJson.isMember(pMasqueradingVector[41]))
          {
              if(!validJsonOfField(41, pMasqueradingVector[41], pJson[pMasqueradingVector[41]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[42].empty())
      {
          if(pJson.isMember(pMasqueradingVector[42]))
          {
              if(!validJsonOfField(42, pMasqueradingVector[42], pJson[pMasqueradingVector[42]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[43].empty())
      {
          if(pJson.isMember(pMasqueradingVector[43]))
          {
              if(!validJsonOfField(43, pMasqueradingVector[43], pJson[pMasqueradingVector[43]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[44].empty())
      {
          if(pJson.isMember(pMasqueradingVector[44]))
          {
              if(!validJsonOfField(44, pMasqueradingVector[44], pJson[pMasqueradingVector[44]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[45].empty())
      {
          if(pJson.isMember(pMasqueradingVector[45]))
          {
              if(!validJsonOfField(45, pMasqueradingVector[45], pJson[pMasqueradingVector[45]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[46].empty())
      {
          if(pJson.isMember(pMasqueradingVector[46]))
          {
              if(!validJsonOfField(46, pMasqueradingVector[46], pJson[pMasqueradingVector[46]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[47].empty())
      {
          if(pJson.isMember(pMasqueradingVector[47]))
          {
              if(!validJsonOfField(47, pMasqueradingVector[47], pJson[pMasqueradingVector[47]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[48].empty())
      {
          if(pJson.isMember(pMasqueradingVector[48]))
          {
              if(!validJsonOfField(48, pMasqueradingVector[48], pJson[pMasqueradingVector[48]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[49].empty())
      {
          if(pJson.isMember(pMasqueradingVector[49]))
          {
              if(!validJsonOfField(49, pMasqueradingVector[49], pJson[pMasqueradingVector[49]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[50].empty())
      {
          if(pJson.isMember(pMasqueradingVector[50]))
          {
              if(!validJsonOfField(50, pMasqueradingVector[50], pJson[pMasqueradingVector[50]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[51].empty())
      {
          if(pJson.isMember(pMasqueradingVector[51]))
          {
              if(!validJsonOfField(51, pMasqueradingVector[51], pJson[pMasqueradingVector[51]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[52].empty())
      {
          if(pJson.isMember(pMasqueradingVector[52]))
          {
              if(!validJsonOfField(52, pMasqueradingVector[52], pJson[pMasqueradingVector[52]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[53].empty())
      {
          if(pJson.isMember(pMasqueradingVector[53]))
          {
              if(!validJsonOfField(53, pMasqueradingVector[53], pJson[pMasqueradingVector[53]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[54].empty())
      {
          if(pJson.isMember(pMasqueradingVector[54]))
          {
              if(!validJsonOfField(54, pMasqueradingVector[54], pJson[pMasqueradingVector[54]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[55].empty())
      {
          if(pJson.isMember(pMasqueradingVector[55]))
          {
              if(!validJsonOfField(55, pMasqueradingVector[55], pJson[pMasqueradingVector[55]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[56].empty())
      {
          if(pJson.isMember(pMasqueradingVector[56]))
          {
              if(!validJsonOfField(56, pMasqueradingVector[56], pJson[pMasqueradingVector[56]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[57].empty())
      {
          if(pJson.isMember(pMasqueradingVector[57]))
          {
              if(!validJsonOfField(57, pMasqueradingVector[57], pJson[pMasqueradingVector[57]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[58].empty())
      {
          if(pJson.isMember(pMasqueradingVector[58]))
          {
              if(!validJsonOfField(58, pMasqueradingVector[58], pJson[pMasqueradingVector[58]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[59].empty())
      {
          if(pJson.isMember(pMasqueradingVector[59]))
          {
              if(!validJsonOfField(59, pMasqueradingVector[59], pJson[pMasqueradingVector[59]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[60].empty())
      {
          if(pJson.isMember(pMasqueradingVector[60]))
          {
              if(!validJsonOfField(60, pMasqueradingVector[60], pJson[pMasqueradingVector[60]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[61].empty())
      {
          if(pJson.isMember(pMasqueradingVector[61]))
          {
              if(!validJsonOfField(61, pMasqueradingVector[61], pJson[pMasqueradingVector[61]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[62].empty())
      {
          if(pJson.isMember(pMasqueradingVector[62]))
          {
              if(!validJsonOfField(62, pMasqueradingVector[62], pJson[pMasqueradingVector[62]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[63].empty())
      {
          if(pJson.isMember(pMasqueradingVector[63]))
          {
              if(!validJsonOfField(63, pMasqueradingVector[63], pJson[pMasqueradingVector[63]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[64].empty())
      {
          if(pJson.isMember(pMasqueradingVector[64]))
          {
              if(!validJsonOfField(64, pMasqueradingVector[64], pJson[pMasqueradingVector[64]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[65].empty())
      {
          if(pJson.isMember(pMasqueradingVector[65]))
          {
              if(!validJsonOfField(65, pMasqueradingVector[65], pJson[pMasqueradingVector[65]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[66].empty())
      {
          if(pJson.isMember(pMasqueradingVector[66]))
          {
              if(!validJsonOfField(66, pMasqueradingVector[66], pJson[pMasqueradingVector[66]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[67].empty())
      {
          if(pJson.isMember(pMasqueradingVector[67]))
          {
              if(!validJsonOfField(67, pMasqueradingVector[67], pJson[pMasqueradingVector[67]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[68].empty())
      {
          if(pJson.isMember(pMasqueradingVector[68]))
          {
              if(!validJsonOfField(68, pMasqueradingVector[68], pJson[pMasqueradingVector[68]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[69].empty())
      {
          if(pJson.isMember(pMasqueradingVector[69]))
          {
              if(!validJsonOfField(69, pMasqueradingVector[69], pJson[pMasqueradingVector[69]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[70].empty())
      {
          if(pJson.isMember(pMasqueradingVector[70]))
          {
              if(!validJsonOfField(70, pMasqueradingVector[70], pJson[pMasqueradingVector[70]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[71].empty())
      {
          if(pJson.isMember(pMasqueradingVector[71]))
          {
              if(!validJsonOfField(71, pMasqueradingVector[71], pJson[pMasqueradingVector[71]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[72].empty())
      {
          if(pJson.isMember(pMasqueradingVector[72]))
          {
              if(!validJsonOfField(72, pMasqueradingVector[72], pJson[pMasqueradingVector[72]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[73].empty())
      {
          if(pJson.isMember(pMasqueradingVector[73]))
          {
              if(!validJsonOfField(73, pMasqueradingVector[73], pJson[pMasqueradingVector[73]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[74].empty())
      {
          if(pJson.isMember(pMasqueradingVector[74]))
          {
              if(!validJsonOfField(74, pMasqueradingVector[74], pJson[pMasqueradingVector[74]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[75].empty())
      {
          if(pJson.isMember(pMasqueradingVector[75]))
          {
              if(!validJsonOfField(75, pMasqueradingVector[75], pJson[pMasqueradingVector[75]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[76].empty())
      {
          if(pJson.isMember(pMasqueradingVector[76]))
          {
              if(!validJsonOfField(76, pMasqueradingVector[76], pJson[pMasqueradingVector[76]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[77].empty())
      {
          if(pJson.isMember(pMasqueradingVector[77]))
          {
              if(!validJsonOfField(77, pMasqueradingVector[77], pJson[pMasqueradingVector[77]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[78].empty())
      {
          if(pJson.isMember(pMasqueradingVector[78]))
          {
              if(!validJsonOfField(78, pMasqueradingVector[78], pJson[pMasqueradingVector[78]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[79].empty())
      {
          if(pJson.isMember(pMasqueradingVector[79]))
          {
              if(!validJsonOfField(79, pMasqueradingVector[79], pJson[pMasqueradingVector[79]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[80].empty())
      {
          if(pJson.isMember(pMasqueradingVector[80]))
          {
              if(!validJsonOfField(80, pMasqueradingVector[80], pJson[pMasqueradingVector[80]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[81].empty())
      {
          if(pJson.isMember(pMasqueradingVector[81]))
          {
              if(!validJsonOfField(81, pMasqueradingVector[81], pJson[pMasqueradingVector[81]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[82].empty())
      {
          if(pJson.isMember(pMasqueradingVector[82]))
          {
              if(!validJsonOfField(82, pMasqueradingVector[82], pJson[pMasqueradingVector[82]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[83].empty())
      {
          if(pJson.isMember(pMasqueradingVector[83]))
          {
              if(!validJsonOfField(83, pMasqueradingVector[83], pJson[pMasqueradingVector[83]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[84].empty())
      {
          if(pJson.isMember(pMasqueradingVector[84]))
          {
              if(!validJsonOfField(84, pMasqueradingVector[84], pJson[pMasqueradingVector[84]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[85].empty())
      {
          if(pJson.isMember(pMasqueradingVector[85]))
          {
              if(!validJsonOfField(85, pMasqueradingVector[85], pJson[pMasqueradingVector[85]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[86].empty())
      {
          if(pJson.isMember(pMasqueradingVector[86]))
          {
              if(!validJsonOfField(86, pMasqueradingVector[86], pJson[pMasqueradingVector[86]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[87].empty())
      {
          if(pJson.isMember(pMasqueradingVector[87]))
          {
              if(!validJsonOfField(87, pMasqueradingVector[87], pJson[pMasqueradingVector[87]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[88].empty())
      {
          if(pJson.isMember(pMasqueradingVector[88]))
          {
              if(!validJsonOfField(88, pMasqueradingVector[88], pJson[pMasqueradingVector[88]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[89].empty())
      {
          if(pJson.isMember(pMasqueradingVector[89]))
          {
              if(!validJsonOfField(89, pMasqueradingVector[89], pJson[pMasqueradingVector[89]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[90].empty())
      {
          if(pJson.isMember(pMasqueradingVector[90]))
          {
              if(!validJsonOfField(90, pMasqueradingVector[90], pJson[pMasqueradingVector[90]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[91].empty())
      {
          if(pJson.isMember(pMasqueradingVector[91]))
          {
              if(!validJsonOfField(91, pMasqueradingVector[91], pJson[pMasqueradingVector[91]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[92].empty())
      {
          if(pJson.isMember(pMasqueradingVector[92]))
          {
              if(!validJsonOfField(92, pMasqueradingVector[92], pJson[pMasqueradingVector[92]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[93].empty())
      {
          if(pJson.isMember(pMasqueradingVector[93]))
          {
              if(!validJsonOfField(93, pMasqueradingVector[93], pJson[pMasqueradingVector[93]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[94].empty())
      {
          if(pJson.isMember(pMasqueradingVector[94]))
          {
              if(!validJsonOfField(94, pMasqueradingVector[94], pJson[pMasqueradingVector[94]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[95].empty())
      {
          if(pJson.isMember(pMasqueradingVector[95]))
          {
              if(!validJsonOfField(95, pMasqueradingVector[95], pJson[pMasqueradingVector[95]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[96].empty())
      {
          if(pJson.isMember(pMasqueradingVector[96]))
          {
              if(!validJsonOfField(96, pMasqueradingVector[96], pJson[pMasqueradingVector[96]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[97].empty())
      {
          if(pJson.isMember(pMasqueradingVector[97]))
          {
              if(!validJsonOfField(97, pMasqueradingVector[97], pJson[pMasqueradingVector[97]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[98].empty())
      {
          if(pJson.isMember(pMasqueradingVector[98]))
          {
              if(!validJsonOfField(98, pMasqueradingVector[98], pJson[pMasqueradingVector[98]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[99].empty())
      {
          if(pJson.isMember(pMasqueradingVector[99]))
          {
              if(!validJsonOfField(99, pMasqueradingVector[99], pJson[pMasqueradingVector[99]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[100].empty())
      {
          if(pJson.isMember(pMasqueradingVector[100]))
          {
              if(!validJsonOfField(100, pMasqueradingVector[100], pJson[pMasqueradingVector[100]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[101].empty())
      {
          if(pJson.isMember(pMasqueradingVector[101]))
          {
              if(!validJsonOfField(101, pMasqueradingVector[101], pJson[pMasqueradingVector[101]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[102].empty())
      {
          if(pJson.isMember(pMasqueradingVector[102]))
          {
              if(!validJsonOfField(102, pMasqueradingVector[102], pJson[pMasqueradingVector[102]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[103].empty())
      {
          if(pJson.isMember(pMasqueradingVector[103]))
          {
              if(!validJsonOfField(103, pMasqueradingVector[103], pJson[pMasqueradingVector[103]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[104].empty())
      {
          if(pJson.isMember(pMasqueradingVector[104]))
          {
              if(!validJsonOfField(104, pMasqueradingVector[104], pJson[pMasqueradingVector[104]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[105].empty())
      {
          if(pJson.isMember(pMasqueradingVector[105]))
          {
              if(!validJsonOfField(105, pMasqueradingVector[105], pJson[pMasqueradingVector[105]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[106].empty())
      {
          if(pJson.isMember(pMasqueradingVector[106]))
          {
              if(!validJsonOfField(106, pMasqueradingVector[106], pJson[pMasqueradingVector[106]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[107].empty())
      {
          if(pJson.isMember(pMasqueradingVector[107]))
          {
              if(!validJsonOfField(107, pMasqueradingVector[107], pJson[pMasqueradingVector[107]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[108].empty())
      {
          if(pJson.isMember(pMasqueradingVector[108]))
          {
              if(!validJsonOfField(108, pMasqueradingVector[108], pJson[pMasqueradingVector[108]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[109].empty())
      {
          if(pJson.isMember(pMasqueradingVector[109]))
          {
              if(!validJsonOfField(109, pMasqueradingVector[109], pJson[pMasqueradingVector[109]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[110].empty())
      {
          if(pJson.isMember(pMasqueradingVector[110]))
          {
              if(!validJsonOfField(110, pMasqueradingVector[110], pJson[pMasqueradingVector[110]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[111].empty())
      {
          if(pJson.isMember(pMasqueradingVector[111]))
          {
              if(!validJsonOfField(111, pMasqueradingVector[111], pJson[pMasqueradingVector[111]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[112].empty())
      {
          if(pJson.isMember(pMasqueradingVector[112]))
          {
              if(!validJsonOfField(112, pMasqueradingVector[112], pJson[pMasqueradingVector[112]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[113].empty())
      {
          if(pJson.isMember(pMasqueradingVector[113]))
          {
              if(!validJsonOfField(113, pMasqueradingVector[113], pJson[pMasqueradingVector[113]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[114].empty())
      {
          if(pJson.isMember(pMasqueradingVector[114]))
          {
              if(!validJsonOfField(114, pMasqueradingVector[114], pJson[pMasqueradingVector[114]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[115].empty())
      {
          if(pJson.isMember(pMasqueradingVector[115]))
          {
              if(!validJsonOfField(115, pMasqueradingVector[115], pJson[pMasqueradingVector[115]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[116].empty())
      {
          if(pJson.isMember(pMasqueradingVector[116]))
          {
              if(!validJsonOfField(116, pMasqueradingVector[116], pJson[pMasqueradingVector[116]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[117].empty())
      {
          if(pJson.isMember(pMasqueradingVector[117]))
          {
              if(!validJsonOfField(117, pMasqueradingVector[117], pJson[pMasqueradingVector[117]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[118].empty())
      {
          if(pJson.isMember(pMasqueradingVector[118]))
          {
              if(!validJsonOfField(118, pMasqueradingVector[118], pJson[pMasqueradingVector[118]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[119].empty())
      {
          if(pJson.isMember(pMasqueradingVector[119]))
          {
              if(!validJsonOfField(119, pMasqueradingVector[119], pJson[pMasqueradingVector[119]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[120].empty())
      {
          if(pJson.isMember(pMasqueradingVector[120]))
          {
              if(!validJsonOfField(120, pMasqueradingVector[120], pJson[pMasqueradingVector[120]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[121].empty())
      {
          if(pJson.isMember(pMasqueradingVector[121]))
          {
              if(!validJsonOfField(121, pMasqueradingVector[121], pJson[pMasqueradingVector[121]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[122].empty())
      {
          if(pJson.isMember(pMasqueradingVector[122]))
          {
              if(!validJsonOfField(122, pMasqueradingVector[122], pJson[pMasqueradingVector[122]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[123].empty())
      {
          if(pJson.isMember(pMasqueradingVector[123]))
          {
              if(!validJsonOfField(123, pMasqueradingVector[123], pJson[pMasqueradingVector[123]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[124].empty())
      {
          if(pJson.isMember(pMasqueradingVector[124]))
          {
              if(!validJsonOfField(124, pMasqueradingVector[124], pJson[pMasqueradingVector[124]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[125].empty())
      {
          if(pJson.isMember(pMasqueradingVector[125]))
          {
              if(!validJsonOfField(125, pMasqueradingVector[125], pJson[pMasqueradingVector[125]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[126].empty())
      {
          if(pJson.isMember(pMasqueradingVector[126]))
          {
              if(!validJsonOfField(126, pMasqueradingVector[126], pJson[pMasqueradingVector[126]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[127].empty())
      {
          if(pJson.isMember(pMasqueradingVector[127]))
          {
              if(!validJsonOfField(127, pMasqueradingVector[127], pJson[pMasqueradingVector[127]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[128].empty())
      {
          if(pJson.isMember(pMasqueradingVector[128]))
          {
              if(!validJsonOfField(128, pMasqueradingVector[128], pJson[pMasqueradingVector[128]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[129].empty())
      {
          if(pJson.isMember(pMasqueradingVector[129]))
          {
              if(!validJsonOfField(129, pMasqueradingVector[129], pJson[pMasqueradingVector[129]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[130].empty())
      {
          if(pJson.isMember(pMasqueradingVector[130]))
          {
              if(!validJsonOfField(130, pMasqueradingVector[130], pJson[pMasqueradingVector[130]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[131].empty())
      {
          if(pJson.isMember(pMasqueradingVector[131]))
          {
              if(!validJsonOfField(131, pMasqueradingVector[131], pJson[pMasqueradingVector[131]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[132].empty())
      {
          if(pJson.isMember(pMasqueradingVector[132]))
          {
              if(!validJsonOfField(132, pMasqueradingVector[132], pJson[pMasqueradingVector[132]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[133].empty())
      {
          if(pJson.isMember(pMasqueradingVector[133]))
          {
              if(!validJsonOfField(133, pMasqueradingVector[133], pJson[pMasqueradingVector[133]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[134].empty())
      {
          if(pJson.isMember(pMasqueradingVector[134]))
          {
              if(!validJsonOfField(134, pMasqueradingVector[134], pJson[pMasqueradingVector[134]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[135].empty())
      {
          if(pJson.isMember(pMasqueradingVector[135]))
          {
              if(!validJsonOfField(135, pMasqueradingVector[135], pJson[pMasqueradingVector[135]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[136].empty())
      {
          if(pJson.isMember(pMasqueradingVector[136]))
          {
              if(!validJsonOfField(136, pMasqueradingVector[136], pJson[pMasqueradingVector[136]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[137].empty())
      {
          if(pJson.isMember(pMasqueradingVector[137]))
          {
              if(!validJsonOfField(137, pMasqueradingVector[137], pJson[pMasqueradingVector[137]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[138].empty())
      {
          if(pJson.isMember(pMasqueradingVector[138]))
          {
              if(!validJsonOfField(138, pMasqueradingVector[138], pJson[pMasqueradingVector[138]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[139].empty())
      {
          if(pJson.isMember(pMasqueradingVector[139]))
          {
              if(!validJsonOfField(139, pMasqueradingVector[139], pJson[pMasqueradingVector[139]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[140].empty())
      {
          if(pJson.isMember(pMasqueradingVector[140]))
          {
              if(!validJsonOfField(140, pMasqueradingVector[140], pJson[pMasqueradingVector[140]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[141].empty())
      {
          if(pJson.isMember(pMasqueradingVector[141]))
          {
              if(!validJsonOfField(141, pMasqueradingVector[141], pJson[pMasqueradingVector[141]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[142].empty())
      {
          if(pJson.isMember(pMasqueradingVector[142]))
          {
              if(!validJsonOfField(142, pMasqueradingVector[142], pJson[pMasqueradingVector[142]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[143].empty())
      {
          if(pJson.isMember(pMasqueradingVector[143]))
          {
              if(!validJsonOfField(143, pMasqueradingVector[143], pJson[pMasqueradingVector[143]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[144].empty())
      {
          if(pJson.isMember(pMasqueradingVector[144]))
          {
              if(!validJsonOfField(144, pMasqueradingVector[144], pJson[pMasqueradingVector[144]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[145].empty())
      {
          if(pJson.isMember(pMasqueradingVector[145]))
          {
              if(!validJsonOfField(145, pMasqueradingVector[145], pJson[pMasqueradingVector[145]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[146].empty())
      {
          if(pJson.isMember(pMasqueradingVector[146]))
          {
              if(!validJsonOfField(146, pMasqueradingVector[146], pJson[pMasqueradingVector[146]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[147].empty())
      {
          if(pJson.isMember(pMasqueradingVector[147]))
          {
              if(!validJsonOfField(147, pMasqueradingVector[147], pJson[pMasqueradingVector[147]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[148].empty())
      {
          if(pJson.isMember(pMasqueradingVector[148]))
          {
              if(!validJsonOfField(148, pMasqueradingVector[148], pJson[pMasqueradingVector[148]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[149].empty())
      {
          if(pJson.isMember(pMasqueradingVector[149]))
          {
              if(!validJsonOfField(149, pMasqueradingVector[149], pJson[pMasqueradingVector[149]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[150].empty())
      {
          if(pJson.isMember(pMasqueradingVector[150]))
          {
              if(!validJsonOfField(150, pMasqueradingVector[150], pJson[pMasqueradingVector[150]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[151].empty())
      {
          if(pJson.isMember(pMasqueradingVector[151]))
          {
              if(!validJsonOfField(151, pMasqueradingVector[151], pJson[pMasqueradingVector[151]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[152].empty())
      {
          if(pJson.isMember(pMasqueradingVector[152]))
          {
              if(!validJsonOfField(152, pMasqueradingVector[152], pJson[pMasqueradingVector[152]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[153].empty())
      {
          if(pJson.isMember(pMasqueradingVector[153]))
          {
              if(!validJsonOfField(153, pMasqueradingVector[153], pJson[pMasqueradingVector[153]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[154].empty())
      {
          if(pJson.isMember(pMasqueradingVector[154]))
          {
              if(!validJsonOfField(154, pMasqueradingVector[154], pJson[pMasqueradingVector[154]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[155].empty())
      {
          if(pJson.isMember(pMasqueradingVector[155]))
          {
              if(!validJsonOfField(155, pMasqueradingVector[155], pJson[pMasqueradingVector[155]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[156].empty())
      {
          if(pJson.isMember(pMasqueradingVector[156]))
          {
              if(!validJsonOfField(156, pMasqueradingVector[156], pJson[pMasqueradingVector[156]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[157].empty())
      {
          if(pJson.isMember(pMasqueradingVector[157]))
          {
              if(!validJsonOfField(157, pMasqueradingVector[157], pJson[pMasqueradingVector[157]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[158].empty())
      {
          if(pJson.isMember(pMasqueradingVector[158]))
          {
              if(!validJsonOfField(158, pMasqueradingVector[158], pJson[pMasqueradingVector[158]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[159].empty())
      {
          if(pJson.isMember(pMasqueradingVector[159]))
          {
              if(!validJsonOfField(159, pMasqueradingVector[159], pJson[pMasqueradingVector[159]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[160].empty())
      {
          if(pJson.isMember(pMasqueradingVector[160]))
          {
              if(!validJsonOfField(160, pMasqueradingVector[160], pJson[pMasqueradingVector[160]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[161].empty())
      {
          if(pJson.isMember(pMasqueradingVector[161]))
          {
              if(!validJsonOfField(161, pMasqueradingVector[161], pJson[pMasqueradingVector[161]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[162].empty())
      {
          if(pJson.isMember(pMasqueradingVector[162]))
          {
              if(!validJsonOfField(162, pMasqueradingVector[162], pJson[pMasqueradingVector[162]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[163].empty())
      {
          if(pJson.isMember(pMasqueradingVector[163]))
          {
              if(!validJsonOfField(163, pMasqueradingVector[163], pJson[pMasqueradingVector[163]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[164].empty())
      {
          if(pJson.isMember(pMasqueradingVector[164]))
          {
              if(!validJsonOfField(164, pMasqueradingVector[164], pJson[pMasqueradingVector[164]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[165].empty())
      {
          if(pJson.isMember(pMasqueradingVector[165]))
          {
              if(!validJsonOfField(165, pMasqueradingVector[165], pJson[pMasqueradingVector[165]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[166].empty())
      {
          if(pJson.isMember(pMasqueradingVector[166]))
          {
              if(!validJsonOfField(166, pMasqueradingVector[166], pJson[pMasqueradingVector[166]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[167].empty())
      {
          if(pJson.isMember(pMasqueradingVector[167]))
          {
              if(!validJsonOfField(167, pMasqueradingVector[167], pJson[pMasqueradingVector[167]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[168].empty())
      {
          if(pJson.isMember(pMasqueradingVector[168]))
          {
              if(!validJsonOfField(168, pMasqueradingVector[168], pJson[pMasqueradingVector[168]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[169].empty())
      {
          if(pJson.isMember(pMasqueradingVector[169]))
          {
              if(!validJsonOfField(169, pMasqueradingVector[169], pJson[pMasqueradingVector[169]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[170].empty())
      {
          if(pJson.isMember(pMasqueradingVector[170]))
          {
              if(!validJsonOfField(170, pMasqueradingVector[170], pJson[pMasqueradingVector[170]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[171].empty())
      {
          if(pJson.isMember(pMasqueradingVector[171]))
          {
              if(!validJsonOfField(171, pMasqueradingVector[171], pJson[pMasqueradingVector[171]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[172].empty())
      {
          if(pJson.isMember(pMasqueradingVector[172]))
          {
              if(!validJsonOfField(172, pMasqueradingVector[172], pJson[pMasqueradingVector[172]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[173].empty())
      {
          if(pJson.isMember(pMasqueradingVector[173]))
          {
              if(!validJsonOfField(173, pMasqueradingVector[173], pJson[pMasqueradingVector[173]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[174].empty())
      {
          if(pJson.isMember(pMasqueradingVector[174]))
          {
              if(!validJsonOfField(174, pMasqueradingVector[174], pJson[pMasqueradingVector[174]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[175].empty())
      {
          if(pJson.isMember(pMasqueradingVector[175]))
          {
              if(!validJsonOfField(175, pMasqueradingVector[175], pJson[pMasqueradingVector[175]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[176].empty())
      {
          if(pJson.isMember(pMasqueradingVector[176]))
          {
              if(!validJsonOfField(176, pMasqueradingVector[176], pJson[pMasqueradingVector[176]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[177].empty())
      {
          if(pJson.isMember(pMasqueradingVector[177]))
          {
              if(!validJsonOfField(177, pMasqueradingVector[177], pJson[pMasqueradingVector[177]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[178].empty())
      {
          if(pJson.isMember(pMasqueradingVector[178]))
          {
              if(!validJsonOfField(178, pMasqueradingVector[178], pJson[pMasqueradingVector[178]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[179].empty())
      {
          if(pJson.isMember(pMasqueradingVector[179]))
          {
              if(!validJsonOfField(179, pMasqueradingVector[179], pJson[pMasqueradingVector[179]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[180].empty())
      {
          if(pJson.isMember(pMasqueradingVector[180]))
          {
              if(!validJsonOfField(180, pMasqueradingVector[180], pJson[pMasqueradingVector[180]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[181].empty())
      {
          if(pJson.isMember(pMasqueradingVector[181]))
          {
              if(!validJsonOfField(181, pMasqueradingVector[181], pJson[pMasqueradingVector[181]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[182].empty())
      {
          if(pJson.isMember(pMasqueradingVector[182]))
          {
              if(!validJsonOfField(182, pMasqueradingVector[182], pJson[pMasqueradingVector[182]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[183].empty())
      {
          if(pJson.isMember(pMasqueradingVector[183]))
          {
              if(!validJsonOfField(183, pMasqueradingVector[183], pJson[pMasqueradingVector[183]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[184].empty())
      {
          if(pJson.isMember(pMasqueradingVector[184]))
          {
              if(!validJsonOfField(184, pMasqueradingVector[184], pJson[pMasqueradingVector[184]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[185].empty())
      {
          if(pJson.isMember(pMasqueradingVector[185]))
          {
              if(!validJsonOfField(185, pMasqueradingVector[185], pJson[pMasqueradingVector[185]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[186].empty())
      {
          if(pJson.isMember(pMasqueradingVector[186]))
          {
              if(!validJsonOfField(186, pMasqueradingVector[186], pJson[pMasqueradingVector[186]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[187].empty())
      {
          if(pJson.isMember(pMasqueradingVector[187]))
          {
              if(!validJsonOfField(187, pMasqueradingVector[187], pJson[pMasqueradingVector[187]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[188].empty())
      {
          if(pJson.isMember(pMasqueradingVector[188]))
          {
              if(!validJsonOfField(188, pMasqueradingVector[188], pJson[pMasqueradingVector[188]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[189].empty())
      {
          if(pJson.isMember(pMasqueradingVector[189]))
          {
              if(!validJsonOfField(189, pMasqueradingVector[189], pJson[pMasqueradingVector[189]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[190].empty())
      {
          if(pJson.isMember(pMasqueradingVector[190]))
          {
              if(!validJsonOfField(190, pMasqueradingVector[190], pJson[pMasqueradingVector[190]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[191].empty())
      {
          if(pJson.isMember(pMasqueradingVector[191]))
          {
              if(!validJsonOfField(191, pMasqueradingVector[191], pJson[pMasqueradingVector[191]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[192].empty())
      {
          if(pJson.isMember(pMasqueradingVector[192]))
          {
              if(!validJsonOfField(192, pMasqueradingVector[192], pJson[pMasqueradingVector[192]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[193].empty())
      {
          if(pJson.isMember(pMasqueradingVector[193]))
          {
              if(!validJsonOfField(193, pMasqueradingVector[193], pJson[pMasqueradingVector[193]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[194].empty())
      {
          if(pJson.isMember(pMasqueradingVector[194]))
          {
              if(!validJsonOfField(194, pMasqueradingVector[194], pJson[pMasqueradingVector[194]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Kunde::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("KUNDENID"))
    {
        if(!validJsonOfField(0, "KUNDENID", pJson["KUNDENID"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("BEZEICHNUNG"))
    {
        if(!validJsonOfField(1, "BEZEICHNUNG", pJson["BEZEICHNUNG"], err, false))
            return false;
    }
    if(pJson.isMember("KUNDESEIT"))
    {
        if(!validJsonOfField(2, "KUNDESEIT", pJson["KUNDESEIT"], err, false))
            return false;
    }
    if(pJson.isMember("VERTRAGSPARTEI_CD"))
    {
        if(!validJsonOfField(3, "VERTRAGSPARTEI_CD", pJson["VERTRAGSPARTEI_CD"], err, false))
            return false;
    }
    if(pJson.isMember("LOESCH_CD"))
    {
        if(!validJsonOfField(4, "LOESCH_CD", pJson["LOESCH_CD"], err, false))
            return false;
    }
    if(pJson.isMember("LOESCHDATUM"))
    {
        if(!validJsonOfField(5, "LOESCHDATUM", pJson["LOESCHDATUM"], err, false))
            return false;
    }
    if(pJson.isMember("CRTDATUM"))
    {
        if(!validJsonOfField(6, "CRTDATUM", pJson["CRTDATUM"], err, false))
            return false;
    }
    if(pJson.isMember("CRTUSER"))
    {
        if(!validJsonOfField(7, "CRTUSER", pJson["CRTUSER"], err, false))
            return false;
    }
    if(pJson.isMember("MUTDATUM"))
    {
        if(!validJsonOfField(8, "MUTDATUM", pJson["MUTDATUM"], err, false))
            return false;
    }
    if(pJson.isMember("MUTUSER"))
    {
        if(!validJsonOfField(9, "MUTUSER", pJson["MUTUSER"], err, false))
            return false;
    }
    if(pJson.isMember("PSEUDOACCOUNT_CD"))
    {
        if(!validJsonOfField(10, "PSEUDOACCOUNT_CD", pJson["PSEUDOACCOUNT_CD"], err, false))
            return false;
    }
    if(pJson.isMember("KUNDEBESUCH"))
    {
        if(!validJsonOfField(11, "KUNDEBESUCH", pJson["KUNDEBESUCH"], err, false))
            return false;
    }
    if(pJson.isMember("BEZEICHNUNGVERTRAG"))
    {
        if(!validJsonOfField(12, "BEZEICHNUNGVERTRAG", pJson["BEZEICHNUNGVERTRAG"], err, false))
            return false;
    }
    if(pJson.isMember("PSEUDONYM"))
    {
        if(!validJsonOfField(13, "PSEUDONYM", pJson["PSEUDONYM"], err, false))
            return false;
    }
    if(pJson.isMember("RECHTSDOMIZIL_CD"))
    {
        if(!validJsonOfField(14, "RECHTSDOMIZIL_CD", pJson["RECHTSDOMIZIL_CD"], err, false))
            return false;
    }
    if(pJson.isMember("KORRESPONDENZSPRACH_CD"))
    {
        if(!validJsonOfField(15, "KORRESPONDENZSPRACH_CD", pJson["KORRESPONDENZSPRACH_CD"], err, false))
            return false;
    }
    if(pJson.isMember("MIT_PROFIL_CD"))
    {
        if(!validJsonOfField(16, "MIT_PROFIL_CD", pJson["MIT_PROFIL_CD"], err, false))
            return false;
    }
    if(pJson.isMember("GEMEINSCHAFTSKONTO_CD"))
    {
        if(!validJsonOfField(17, "GEMEINSCHAFTSKONTO_CD", pJson["GEMEINSCHAFTSKONTO_CD"], err, false))
            return false;
    }
    if(pJson.isMember("PIN"))
    {
        if(!validJsonOfField(18, "PIN", pJson["PIN"], err, false))
            return false;
    }
    if(pJson.isMember("VERWENDUNGSZWECK"))
    {
        if(!validJsonOfField(19, "VERWENDUNGSZWECK", pJson["VERWENDUNGSZWECK"], err, false))
            return false;
    }
    if(pJson.isMember("IDENTIFIKATIONSART_CD"))
    {
        if(!validJsonOfField(20, "IDENTIFIKATIONSART_CD", pJson["IDENTIFIKATIONSART_CD"], err, false))
            return false;
    }
    if(pJson.isMember("VERMOEGENSURSPRUNG_CD"))
    {
        if(!validJsonOfField(21, "VERMOEGENSURSPRUNG_CD", pJson["VERMOEGENSURSPRUNG_CD"], err, false))
            return false;
    }
    if(pJson.isMember("VERMOEGENSURSPRUNG"))
    {
        if(!validJsonOfField(22, "VERMOEGENSURSPRUNG", pJson["VERMOEGENSURSPRUNG"], err, false))
            return false;
    }
    if(pJson.isMember("GELDVONKONTO"))
    {
        if(!validJsonOfField(23, "GELDVONKONTO", pJson["GELDVONKONTO"], err, false))
            return false;
    }
    if(pJson.isMember("BISHERIGEBETREUUNG"))
    {
        if(!validJsonOfField(24, "BISHERIGEBETREUUNG", pJson["BISHERIGEBETREUUNG"], err, false))
            return false;
    }
    if(pJson.isMember("BISHERIGEBETREUUNGSEIT"))
    {
        if(!validJsonOfField(25, "BISHERIGEBETREUUNGSEIT", pJson["BISHERIGEBETREUUNGSEIT"], err, false))
            return false;
    }
    if(pJson.isMember("MANUALOPEN_CD"))
    {
        if(!validJsonOfField(26, "MANUALOPEN_CD", pJson["MANUALOPEN_CD"], err, false))
            return false;
    }
    if(pJson.isMember("EIN_VERMOEGEN_CD"))
    {
        if(!validJsonOfField(27, "EIN_VERMOEGEN_CD", pJson["EIN_VERMOEGEN_CD"], err, false))
            return false;
    }
    if(pJson.isMember("REGIONZAHLUNG_CD"))
    {
        if(!validJsonOfField(28, "REGIONZAHLUNG_CD", pJson["REGIONZAHLUNG_CD"], err, false))
            return false;
    }
    if(pJson.isMember("EIN_VERMOEGENART_CD"))
    {
        if(!validJsonOfField(29, "EIN_VERMOEGENART_CD", pJson["EIN_VERMOEGENART_CD"], err, false))
            return false;
    }
    if(pJson.isMember("SPEZ_WUENSCHE_CD"))
    {
        if(!validJsonOfField(30, "SPEZ_WUENSCHE_CD", pJson["SPEZ_WUENSCHE_CD"], err, false))
            return false;
    }
    if(pJson.isMember("MANAGER_CD"))
    {
        if(!validJsonOfField(31, "MANAGER_CD", pJson["MANAGER_CD"], err, false))
            return false;
    }
    if(pJson.isMember("RISKINDEX"))
    {
        if(!validJsonOfField(32, "RISKINDEX", pJson["RISKINDEX"], err, false))
            return false;
    }
    if(pJson.isMember("RISKINDEX_GUELTISEIT"))
    {
        if(!validJsonOfField(33, "RISKINDEX_GUELTISEIT", pJson["RISKINDEX_GUELTISEIT"], err, false))
            return false;
    }
    if(pJson.isMember("RISKINDEX_LETZTEBERECHNUNG"))
    {
        if(!validJsonOfField(34, "RISKINDEX_LETZTEBERECHNUNG", pJson["RISKINDEX_LETZTEBERECHNUNG"], err, false))
            return false;
    }
    if(pJson.isMember("KONTOEROEFFNUNGSART_CD"))
    {
        if(!validJsonOfField(35, "KONTOEROEFFNUNGSART_CD", pJson["KONTOEROEFFNUNGSART_CD"], err, false))
            return false;
    }
    if(pJson.isMember("RISKINDEXBERECHNEN_CD"))
    {
        if(!validJsonOfField(36, "RISKINDEXBERECHNEN_CD", pJson["RISKINDEXBERECHNEN_CD"], err, false))
            return false;
    }
    if(pJson.isMember("KUNDENNATUR_CD"))
    {
        if(!validJsonOfField(37, "KUNDENNATUR_CD", pJson["KUNDENNATUR_CD"], err, false))
            return false;
    }
    if(pJson.isMember("RISIKOKATEGORIE_CD"))
    {
        if(!validJsonOfField(38, "RISIKOKATEGORIE_CD", pJson["RISIKOKATEGORIE_CD"], err, false))
            return false;
    }
    if(pJson.isMember("PEP_CD"))
    {
        if(!validJsonOfField(39, "PEP_CD", pJson["PEP_CD"], err, false))
            return false;
    }
    if(pJson.isMember("SPEZIALKATEGORIE_CD"))
    {
        if(!validJsonOfField(40, "SPEZIALKATEGORIE_CD", pJson["SPEZIALKATEGORIE_CD"], err, false))
            return false;
    }
    if(pJson.isMember("NATURE_CD"))
    {
        if(!validJsonOfField(41, "NATURE_CD", pJson["NATURE_CD"], err, false))
            return false;
    }
    if(pJson.isMember("NAME"))
    {
        if(!validJsonOfField(42, "NAME", pJson["NAME"], err, false))
            return false;
    }
    if(pJson.isMember("LEDIGERNAME"))
    {
        if(!validJsonOfField(43, "LEDIGERNAME", pJson["LEDIGERNAME"], err, false))
            return false;
    }
    if(pJson.isMember("VORNAME"))
    {
        if(!validJsonOfField(44, "VORNAME", pJson["VORNAME"], err, false))
            return false;
    }
    if(pJson.isMember("CDPARTC"))
    {
        if(!validJsonOfField(45, "CDPARTC", pJson["CDPARTC"], err, false))
            return false;
    }
    if(pJson.isMember("NATIONALITAET_CD"))
    {
        if(!validJsonOfField(46, "NATIONALITAET_CD", pJson["NATIONALITAET_CD"], err, false))
            return false;
    }
    if(pJson.isMember("RISIKOLAND_CD"))
    {
        if(!validJsonOfField(47, "RISIKOLAND_CD", pJson["RISIKOLAND_CD"], err, false))
            return false;
    }
    if(pJson.isMember("PERSOENLICHBEKANNT_CD"))
    {
        if(!validJsonOfField(48, "PERSOENLICHBEKANNT_CD", pJson["PERSOENLICHBEKANNT_CD"], err, false))
            return false;
    }
    if(pJson.isMember("RISIKOTAETIGKEIT_CD"))
    {
        if(!validJsonOfField(49, "RISIKOTAETIGKEIT_CD", pJson["RISIKOTAETIGKEIT_CD"], err, false))
            return false;
    }
    if(pJson.isMember("STEUERDOMIZIL_CD"))
    {
        if(!validJsonOfField(50, "STEUERDOMIZIL_CD", pJson["STEUERDOMIZIL_CD"], err, false))
            return false;
    }
    if(pJson.isMember("EU_TAXSTATUS_CD"))
    {
        if(!validJsonOfField(51, "EU_TAXSTATUS_CD", pJson["EU_TAXSTATUS_CD"], err, false))
            return false;
    }
    if(pJson.isMember("TIN"))
    {
        if(!validJsonOfField(52, "TIN", pJson["TIN"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_CDROLPERSI"))
    {
        if(!validJsonOfField(53, "APSYS_CDROLPERSI", pJson["APSYS_CDROLPERSI"], err, false))
            return false;
    }
    if(pJson.isMember("VERTRAGSPRACH_CD"))
    {
        if(!validJsonOfField(54, "VERTRAGSPRACH_CD", pJson["VERTRAGSPRACH_CD"], err, false))
            return false;
    }
    if(pJson.isMember("VERMOEGENSKATEGORIE_IHAG_CD"))
    {
        if(!validJsonOfField(55, "VERMOEGENSKATEGORIE_IHAG_CD", pJson["VERMOEGENSKATEGORIE_IHAG_CD"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_INTISHS"))
    {
        if(!validJsonOfField(56, "APSYS_INTISHS", pJson["APSYS_INTISHS"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_INTILGS"))
    {
        if(!validJsonOfField(57, "APSYS_INTILGS", pJson["APSYS_INTILGS"], err, false))
            return false;
    }
    if(pJson.isMember("GESAMTVERMOEGEN_CD"))
    {
        if(!validJsonOfField(58, "GESAMTVERMOEGEN_CD", pJson["GESAMTVERMOEGEN_CD"], err, false))
            return false;
    }
    if(pJson.isMember("COMPLIANCE_OK_CD"))
    {
        if(!validJsonOfField(59, "COMPLIANCE_OK_CD", pJson["COMPLIANCE_OK_CD"], err, false))
            return false;
    }
    if(pJson.isMember("COMPLIANCE_OK_BEMERKUNG"))
    {
        if(!validJsonOfField(60, "COMPLIANCE_OK_BEMERKUNG", pJson["COMPLIANCE_OK_BEMERKUNG"], err, false))
            return false;
    }
    if(pJson.isMember("COMPLIANCE_OK_DATUM"))
    {
        if(!validJsonOfField(61, "COMPLIANCE_OK_DATUM", pJson["COMPLIANCE_OK_DATUM"], err, false))
            return false;
    }
    if(pJson.isMember("COMPLIANCE_OK_USERID"))
    {
        if(!validJsonOfField(62, "COMPLIANCE_OK_USERID", pJson["COMPLIANCE_OK_USERID"], err, false))
            return false;
    }
    if(pJson.isMember("EIN_VERMOEGEN"))
    {
        if(!validJsonOfField(63, "EIN_VERMOEGEN", pJson["EIN_VERMOEGEN"], err, false))
            return false;
    }
    if(pJson.isMember("SEGMENTIERUNG_CD"))
    {
        if(!validJsonOfField(64, "SEGMENTIERUNG_CD", pJson["SEGMENTIERUNG_CD"], err, false))
            return false;
    }
    if(pJson.isMember("AKTID"))
    {
        if(!validJsonOfField(65, "AKTID", pJson["AKTID"], err, false))
            return false;
    }
    if(pJson.isMember("VALIDID"))
    {
        if(!validJsonOfField(66, "VALIDID", pJson["VALIDID"], err, false))
            return false;
    }
    if(pJson.isMember("VALID_CD"))
    {
        if(!validJsonOfField(67, "VALID_CD", pJson["VALID_CD"], err, false))
            return false;
    }
    if(pJson.isMember("VALIDUSER"))
    {
        if(!validJsonOfField(68, "VALIDUSER", pJson["VALIDUSER"], err, false))
            return false;
    }
    if(pJson.isMember("ENC_SALT"))
    {
        if(!validJsonOfField(69, "ENC_SALT", pJson["ENC_SALT"], err, false))
            return false;
    }
    if(pJson.isMember("BEZEICHNUNG_ENC"))
    {
        if(!validJsonOfField(70, "BEZEICHNUNG_ENC", pJson["BEZEICHNUNG_ENC"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_CDMOTIFPARTS"))
    {
        if(!validJsonOfField(71, "APSYS_CDMOTIFPARTS", pJson["APSYS_CDMOTIFPARTS"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_CDINDUS0S"))
    {
        if(!validJsonOfField(72, "APSYS_CDINDUS0S", pJson["APSYS_CDINDUS0S"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_FLAGPREAVISEXEC"))
    {
        if(!validJsonOfField(73, "APSYS_FLAGPREAVISEXEC", pJson["APSYS_FLAGPREAVISEXEC"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_CDAVIOBISPECC"))
    {
        if(!validJsonOfField(74, "APSYS_CDAVIOBISPECC", pJson["APSYS_CDAVIOBISPECC"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_FLAGHISPERC"))
    {
        if(!validJsonOfField(75, "APSYS_FLAGHISPERC", pJson["APSYS_FLAGHISPERC"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_REPAMANUC"))
    {
        if(!validJsonOfField(76, "APSYS_REPAMANUC", pJson["APSYS_REPAMANUC"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_PERDEVCALC"))
    {
        if(!validJsonOfField(77, "APSYS_PERDEVCALC", pJson["APSYS_PERDEVCALC"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_FLAGUKTAXC"))
    {
        if(!validJsonOfField(78, "APSYS_FLAGUKTAXC", pJson["APSYS_FLAGUKTAXC"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_CDNOGAS"))
    {
        if(!validJsonOfField(79, "APSYS_CDNOGAS", pJson["APSYS_CDNOGAS"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_STATFISCC"))
    {
        if(!validJsonOfField(80, "APSYS_STATFISCC", pJson["APSYS_STATFISCC"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_FLAGFWTI"))
    {
        if(!validJsonOfField(81, "APSYS_FLAGFWTI", pJson["APSYS_FLAGFWTI"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_FLAGFWTUKNRSDI"))
    {
        if(!validJsonOfField(82, "APSYS_FLAGFWTUKNRSDI", pJson["APSYS_FLAGFWTUKNRSDI"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_FLAGFWTTAXSPEGEI"))
    {
        if(!validJsonOfField(83, "APSYS_FLAGFWTTAXSPEGEI", pJson["APSYS_FLAGFWTTAXSPEGEI"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_CDFWTOPTREGULFISCANCC"))
    {
        if(!validJsonOfField(84, "APSYS_CDFWTOPTREGULFISCANCC", pJson["APSYS_CDFWTOPTREGULFISCANCC"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_CDFWTSTATREGULFISCANCC"))
    {
        if(!validJsonOfField(85, "APSYS_CDFWTSTATREGULFISCANCC", pJson["APSYS_CDFWTSTATREGULFISCANCC"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_CDFWTOPTREGULFISCFUTC"))
    {
        if(!validJsonOfField(86, "APSYS_CDFWTOPTREGULFISCFUTC", pJson["APSYS_CDFWTOPTREGULFISCFUTC"], err, false))
            return false;
    }
    if(pJson.isMember("STEUERLAND_ABGST_CD"))
    {
        if(!validJsonOfField(87, "STEUERLAND_ABGST_CD", pJson["STEUERLAND_ABGST_CD"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_CDNATURES"))
    {
        if(!validJsonOfField(88, "APSYS_CDNATURES", pJson["APSYS_CDNATURES"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_SHNAS"))
    {
        if(!validJsonOfField(89, "APSYS_SHNAS", pJson["APSYS_SHNAS"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_CDPYHQDOMIS"))
    {
        if(!validJsonOfField(90, "APSYS_CDPYHQDOMIS", pJson["APSYS_CDPYHQDOMIS"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_CDPERMI"))
    {
        if(!validJsonOfField(91, "APSYS_CDPERMI", pJson["APSYS_CDPERMI"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_IDRCIS"))
    {
        if(!validJsonOfField(92, "APSYS_IDRCIS", pJson["APSYS_IDRCIS"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_FLAGISTTC"))
    {
        if(!validJsonOfField(93, "APSYS_FLAGISTTC", pJson["APSYS_FLAGISTTC"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_DEVEVALS"))
    {
        if(!validJsonOfField(94, "APSYS_DEVEVALS", pJson["APSYS_DEVEVALS"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_IDSTRUCS"))
    {
        if(!validJsonOfField(95, "APSYS_IDSTRUCS", pJson["APSYS_IDSTRUCS"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_SUIVIAGTS"))
    {
        if(!validJsonOfField(96, "APSYS_SUIVIAGTS", pJson["APSYS_SUIVIAGTS"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_CDINDUSCSSFS"))
    {
        if(!validJsonOfField(97, "APSYS_CDINDUSCSSFS", pJson["APSYS_CDINDUSCSSFS"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_CDINDUSBLUXS"))
    {
        if(!validJsonOfField(98, "APSYS_CDINDUSBLUXS", pJson["APSYS_CDINDUSBLUXS"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_CDINDUSSBUBA"))
    {
        if(!validJsonOfField(99, "APSYS_CDINDUSSBUBA", pJson["APSYS_CDINDUSSBUBA"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_CDINDUSSBNS"))
    {
        if(!validJsonOfField(100, "APSYS_CDINDUSSBNS", pJson["APSYS_CDINDUSSBNS"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_GRMTEVALS"))
    {
        if(!validJsonOfField(101, "APSYS_GRMTEVALS", pJson["APSYS_GRMTEVALS"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_IDPOCS"))
    {
        if(!validJsonOfField(102, "APSYS_IDPOCS", pJson["APSYS_IDPOCS"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_INFO"))
    {
        if(!validJsonOfField(103, "APSYS_INFO", pJson["APSYS_INFO"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_IDENTS"))
    {
        if(!validJsonOfField(104, "APSYS_IDENTS", pJson["APSYS_IDENTS"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_STATUS_OPEC"))
    {
        if(!validJsonOfField(105, "APSYS_STATUS_OPEC", pJson["APSYS_STATUS_OPEC"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_ERRI"))
    {
        if(!validJsonOfField(106, "APSYS_ERRI", pJson["APSYS_ERRI"], err, false))
            return false;
    }
    if(pJson.isMember("NATIONALITAET2_CD"))
    {
        if(!validJsonOfField(107, "NATIONALITAET2_CD", pJson["NATIONALITAET2_CD"], err, false))
            return false;
    }
    if(pJson.isMember("NATIONALITAET3_CD"))
    {
        if(!validJsonOfField(108, "NATIONALITAET3_CD", pJson["NATIONALITAET3_CD"], err, false))
            return false;
    }
    if(pJson.isMember("VERMOEGENSURSPRUNG2_CD"))
    {
        if(!validJsonOfField(109, "VERMOEGENSURSPRUNG2_CD", pJson["VERMOEGENSURSPRUNG2_CD"], err, false))
            return false;
    }
    if(pJson.isMember("VERMOEGENSURSPRUNG2"))
    {
        if(!validJsonOfField(110, "VERMOEGENSURSPRUNG2", pJson["VERMOEGENSURSPRUNG2"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP1_CD"))
    {
        if(!validJsonOfField(111, "APPROVAL_STEP1_CD", pJson["APPROVAL_STEP1_CD"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP1_USER"))
    {
        if(!validJsonOfField(112, "APPROVAL_STEP1_USER", pJson["APPROVAL_STEP1_USER"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP1_DATE"))
    {
        if(!validJsonOfField(113, "APPROVAL_STEP1_DATE", pJson["APPROVAL_STEP1_DATE"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP2_CD"))
    {
        if(!validJsonOfField(114, "APPROVAL_STEP2_CD", pJson["APPROVAL_STEP2_CD"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP2_USER"))
    {
        if(!validJsonOfField(115, "APPROVAL_STEP2_USER", pJson["APPROVAL_STEP2_USER"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP2_DATE"))
    {
        if(!validJsonOfField(116, "APPROVAL_STEP2_DATE", pJson["APPROVAL_STEP2_DATE"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP3_CD"))
    {
        if(!validJsonOfField(117, "APPROVAL_STEP3_CD", pJson["APPROVAL_STEP3_CD"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP3_USER"))
    {
        if(!validJsonOfField(118, "APPROVAL_STEP3_USER", pJson["APPROVAL_STEP3_USER"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP3_DATE"))
    {
        if(!validJsonOfField(119, "APPROVAL_STEP3_DATE", pJson["APPROVAL_STEP3_DATE"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP4_CD"))
    {
        if(!validJsonOfField(120, "APPROVAL_STEP4_CD", pJson["APPROVAL_STEP4_CD"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP4_USER"))
    {
        if(!validJsonOfField(121, "APPROVAL_STEP4_USER", pJson["APPROVAL_STEP4_USER"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP4_DATE"))
    {
        if(!validJsonOfField(122, "APPROVAL_STEP4_DATE", pJson["APPROVAL_STEP4_DATE"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP5_CD"))
    {
        if(!validJsonOfField(123, "APPROVAL_STEP5_CD", pJson["APPROVAL_STEP5_CD"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP5_USER"))
    {
        if(!validJsonOfField(124, "APPROVAL_STEP5_USER", pJson["APPROVAL_STEP5_USER"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP5_DATE"))
    {
        if(!validJsonOfField(125, "APPROVAL_STEP5_DATE", pJson["APPROVAL_STEP5_DATE"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP1_BEM"))
    {
        if(!validJsonOfField(126, "APPROVAL_STEP1_BEM", pJson["APPROVAL_STEP1_BEM"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP2_BEM"))
    {
        if(!validJsonOfField(127, "APPROVAL_STEP2_BEM", pJson["APPROVAL_STEP2_BEM"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP3_BEM"))
    {
        if(!validJsonOfField(128, "APPROVAL_STEP3_BEM", pJson["APPROVAL_STEP3_BEM"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP4_BEM"))
    {
        if(!validJsonOfField(129, "APPROVAL_STEP4_BEM", pJson["APPROVAL_STEP4_BEM"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP5_BEM"))
    {
        if(!validJsonOfField(130, "APPROVAL_STEP5_BEM", pJson["APPROVAL_STEP5_BEM"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP1_ASSES_CD"))
    {
        if(!validJsonOfField(131, "APPROVAL_STEP1_ASSES_CD", pJson["APPROVAL_STEP1_ASSES_CD"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP2_ASSES_CD"))
    {
        if(!validJsonOfField(132, "APPROVAL_STEP2_ASSES_CD", pJson["APPROVAL_STEP2_ASSES_CD"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP3_ASSES_CD"))
    {
        if(!validJsonOfField(133, "APPROVAL_STEP3_ASSES_CD", pJson["APPROVAL_STEP3_ASSES_CD"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP4_ASSES_CD"))
    {
        if(!validJsonOfField(134, "APPROVAL_STEP4_ASSES_CD", pJson["APPROVAL_STEP4_ASSES_CD"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STEP5_ASSES_CD"))
    {
        if(!validJsonOfField(135, "APPROVAL_STEP5_ASSES_CD", pJson["APPROVAL_STEP5_ASSES_CD"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_STATUS_CD"))
    {
        if(!validJsonOfField(136, "APPROVAL_STATUS_CD", pJson["APPROVAL_STATUS_CD"], err, false))
            return false;
    }
    if(pJson.isMember("CLIENT_STATUS_CD"))
    {
        if(!validJsonOfField(137, "CLIENT_STATUS_CD", pJson["CLIENT_STATUS_CD"], err, false))
            return false;
    }
    if(pJson.isMember("DISCHARGE_ORDERS_CD"))
    {
        if(!validJsonOfField(138, "DISCHARGE_ORDERS_CD", pJson["DISCHARGE_ORDERS_CD"], err, false))
            return false;
    }
    if(pJson.isMember("PRINT_SUMMARY_HOLDMAIL_ONLY_CD"))
    {
        if(!validJsonOfField(139, "PRINT_SUMMARY_HOLDMAIL_ONLY_CD", pJson["PRINT_SUMMARY_HOLDMAIL_ONLY_CD"], err, false))
            return false;
    }
    if(pJson.isMember("EBANKING_CONTRACT_CD"))
    {
        if(!validJsonOfField(140, "EBANKING_CONTRACT_CD", pJson["EBANKING_CONTRACT_CD"], err, false))
            return false;
    }
    if(pJson.isMember("EBANKING_CONTRACT_LANGUAGE_CD"))
    {
        if(!validJsonOfField(141, "EBANKING_CONTRACT_LANGUAGE_CD", pJson["EBANKING_CONTRACT_LANGUAGE_CD"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_DTECHDIARYL"))
    {
        if(!validJsonOfField(142, "APSYS_DTECHDIARYL", pJson["APSYS_DTECHDIARYL"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_MOTDIARYS"))
    {
        if(!validJsonOfField(143, "APSYS_MOTDIARYS", pJson["APSYS_MOTDIARYS"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_IDTYPCLIIRSS"))
    {
        if(!validJsonOfField(144, "APSYS_IDTYPCLIIRSS", pJson["APSYS_IDTYPCLIIRSS"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_IDRCIQIS"))
    {
        if(!validJsonOfField(145, "APSYS_IDRCIQIS", pJson["APSYS_IDRCIQIS"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_IDRCIFATCAS"))
    {
        if(!validJsonOfField(146, "APSYS_IDRCIFATCAS", pJson["APSYS_IDRCIFATCAS"], err, false))
            return false;
    }
    if(pJson.isMember("MAILING_TARIF_TYPE_CD"))
    {
        if(!validJsonOfField(147, "MAILING_TARIF_TYPE_CD", pJson["MAILING_TARIF_TYPE_CD"], err, false))
            return false;
    }
    if(pJson.isMember("REGISTERED_CD"))
    {
        if(!validJsonOfField(148, "REGISTERED_CD", pJson["REGISTERED_CD"], err, false))
            return false;
    }
    if(pJson.isMember("REGISTERED_MAIL_CD"))
    {
        if(!validJsonOfField(149, "REGISTERED_MAIL_CD", pJson["REGISTERED_MAIL_CD"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_NBPERSCPARTIEL"))
    {
        if(!validJsonOfField(150, "APSYS_NBPERSCPARTIEL", pJson["APSYS_NBPERSCPARTIEL"], err, false))
            return false;
    }
    if(pJson.isMember("ASSET_VALUE_TIER_CD"))
    {
        if(!validJsonOfField(151, "ASSET_VALUE_TIER_CD", pJson["ASSET_VALUE_TIER_CD"], err, false))
            return false;
    }
    if(pJson.isMember("RELATIONSHIP_TYPE_AML_CD"))
    {
        if(!validJsonOfField(152, "RELATIONSHIP_TYPE_AML_CD", pJson["RELATIONSHIP_TYPE_AML_CD"], err, false))
            return false;
    }
    if(pJson.isMember("CB_ASSET_VALUE_TIER_CD"))
    {
        if(!validJsonOfField(153, "CB_ASSET_VALUE_TIER_CD", pJson["CB_ASSET_VALUE_TIER_CD"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_SCORE"))
    {
        if(!validJsonOfField(154, "APPROVAL_SCORE", pJson["APPROVAL_SCORE"], err, false))
            return false;
    }
    if(pJson.isMember("APPROVAL_SCORE_STEPS"))
    {
        if(!validJsonOfField(155, "APPROVAL_SCORE_STEPS", pJson["APPROVAL_SCORE_STEPS"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_DTDEBPARTL"))
    {
        if(!validJsonOfField(156, "APSYS_DTDEBPARTL", pJson["APSYS_DTDEBPARTL"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_DTFINPARTL"))
    {
        if(!validJsonOfField(157, "APSYS_DTFINPARTL", pJson["APSYS_DTFINPARTL"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_CDMOTIFCLOS"))
    {
        if(!validJsonOfField(158, "APSYS_CDMOTIFCLOS", pJson["APSYS_CDMOTIFCLOS"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_CDNATURECPARTIEEMIRC"))
    {
        if(!validJsonOfField(159, "APSYS_CDNATURECPARTIEEMIRC", pJson["APSYS_CDNATURECPARTIEEMIRC"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_FLAGOTHEREMIRC"))
    {
        if(!validJsonOfField(160, "APSYS_FLAGOTHEREMIRC", pJson["APSYS_FLAGOTHEREMIRC"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_CDINDUSEMIRS"))
    {
        if(!validJsonOfField(161, "APSYS_CDINDUSEMIRS", pJson["APSYS_CDINDUSEMIRS"], err, false))
            return false;
    }
    if(pJson.isMember("OPENED_IN_APSYS_DATE"))
    {
        if(!validJsonOfField(162, "OPENED_IN_APSYS_DATE", pJson["OPENED_IN_APSYS_DATE"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_CDNATURECPARTIEFMIAC"))
    {
        if(!validJsonOfField(163, "APSYS_CDNATURECPARTIEFMIAC", pJson["APSYS_CDNATURECPARTIEFMIAC"], err, false))
            return false;
    }
    if(pJson.isMember("EBANKING_CLOSED_CD"))
    {
        if(!validJsonOfField(164, "EBANKING_CLOSED_CD", pJson["EBANKING_CLOSED_CD"], err, false))
            return false;
    }
    if(pJson.isMember("EBANKING_CLOSINGDATE"))
    {
        if(!validJsonOfField(165, "EBANKING_CLOSINGDATE", pJson["EBANKING_CLOSINGDATE"], err, false))
            return false;
    }
    if(pJson.isMember("KYC_REVIEW_PROCESS_START_DATE"))
    {
        if(!validJsonOfField(166, "KYC_REVIEW_PROCESS_START_DATE", pJson["KYC_REVIEW_PROCESS_START_DATE"], err, false))
            return false;
    }
    if(pJson.isMember("REMARKS"))
    {
        if(!validJsonOfField(167, "REMARKS", pJson["REMARKS"], err, false))
            return false;
    }
    if(pJson.isMember("TRANSACTION_BL_COUNTRY_CD"))
    {
        if(!validJsonOfField(168, "TRANSACTION_BL_COUNTRY_CD", pJson["TRANSACTION_BL_COUNTRY_CD"], err, false))
            return false;
    }
    if(pJson.isMember("CLIENTGROUP_CD"))
    {
        if(!validJsonOfField(169, "CLIENTGROUP_CD", pJson["CLIENTGROUP_CD"], err, false))
            return false;
    }
    if(pJson.isMember("RISKINDEX_CALC"))
    {
        if(!validJsonOfField(170, "RISKINDEX_CALC", pJson["RISKINDEX_CALC"], err, false))
            return false;
    }
    if(pJson.isMember("LAST_CALC_CRI_MUTDATUM"))
    {
        if(!validJsonOfField(171, "LAST_CALC_CRI_MUTDATUM", pJson["LAST_CALC_CRI_MUTDATUM"], err, false))
            return false;
    }
    if(pJson.isMember("RISIKOKATEGORIE_CALC_CD"))
    {
        if(!validJsonOfField(172, "RISIKOKATEGORIE_CALC_CD", pJson["RISIKOKATEGORIE_CALC_CD"], err, false))
            return false;
    }
    if(pJson.isMember("RISKINDEX_GROUP"))
    {
        if(!validJsonOfField(173, "RISKINDEX_GROUP", pJson["RISKINDEX_GROUP"], err, false))
            return false;
    }
    if(pJson.isMember("EST_AMOUNT_REM_WITH_MUTDATUM"))
    {
        if(!validJsonOfField(174, "EST_AMOUNT_REM_WITH_MUTDATUM", pJson["EST_AMOUNT_REM_WITH_MUTDATUM"], err, false))
            return false;
    }
    if(pJson.isMember("GESAMTVERMOEGEN_MUTDATUM"))
    {
        if(!validJsonOfField(175, "GESAMTVERMOEGEN_MUTDATUM", pJson["GESAMTVERMOEGEN_MUTDATUM"], err, false))
            return false;
    }
    if(pJson.isMember("TRANSACT_BL_COUNTRY_MUTDATUM"))
    {
        if(!validJsonOfField(176, "TRANSACT_BL_COUNTRY_MUTDATUM", pJson["TRANSACT_BL_COUNTRY_MUTDATUM"], err, false))
            return false;
    }
    if(pJson.isMember("ACCOUNTPURPOSE_MUTDATUM"))
    {
        if(!validJsonOfField(177, "ACCOUNTPURPOSE_MUTDATUM", pJson["ACCOUNTPURPOSE_MUTDATUM"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_FLAGDELDATAPERSI"))
    {
        if(!validJsonOfField(178, "APSYS_FLAGDELDATAPERSI", pJson["APSYS_FLAGDELDATAPERSI"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_DTWAITDELDATAPERSL"))
    {
        if(!validJsonOfField(179, "APSYS_DTWAITDELDATAPERSL", pJson["APSYS_DTWAITDELDATAPERSL"], err, false))
            return false;
    }
    if(pJson.isMember("NAME_ENC"))
    {
        if(!validJsonOfField(180, "NAME_ENC", pJson["NAME_ENC"], err, false))
            return false;
    }
    if(pJson.isMember("IN_APSYS_TEMP_ENTSPERREN_CD"))
    {
        if(!validJsonOfField(181, "IN_APSYS_TEMP_ENTSPERREN_CD", pJson["IN_APSYS_TEMP_ENTSPERREN_CD"], err, false))
            return false;
    }
    if(pJson.isMember("IN_APSYS_TEMP_ENTSP_USERID"))
    {
        if(!validJsonOfField(182, "IN_APSYS_TEMP_ENTSP_USERID", pJson["IN_APSYS_TEMP_ENTSP_USERID"], err, false))
            return false;
    }
    if(pJson.isMember("IN_APSYS_TEMP_ENTSP_DATUM"))
    {
        if(!validJsonOfField(183, "IN_APSYS_TEMP_ENTSP_DATUM", pJson["IN_APSYS_TEMP_ENTSP_DATUM"], err, false))
            return false;
    }
    if(pJson.isMember("APSYS_CDREGS"))
    {
        if(!validJsonOfField(184, "APSYS_CDREGS", pJson["APSYS_CDREGS"], err, false))
            return false;
    }
    if(pJson.isMember("RETENTION_ON_HOLD"))
    {
        if(!validJsonOfField(185, "RETENTION_ON_HOLD", pJson["RETENTION_ON_HOLD"], err, false))
            return false;
    }
    if(pJson.isMember("RETENTION_ON_HOLD_DATE"))
    {
        if(!validJsonOfField(186, "RETENTION_ON_HOLD_DATE", pJson["RETENTION_ON_HOLD_DATE"], err, false))
            return false;
    }
    if(pJson.isMember("RETENTION_ON_HOLD_REASON"))
    {
        if(!validJsonOfField(187, "RETENTION_ON_HOLD_REASON", pJson["RETENTION_ON_HOLD_REASON"], err, false))
            return false;
    }
    if(pJson.isMember("LOGICAL_ERASURE"))
    {
        if(!validJsonOfField(188, "LOGICAL_ERASURE", pJson["LOGICAL_ERASURE"], err, false))
            return false;
    }
    if(pJson.isMember("LOGICAL_ERASURE_DATE"))
    {
        if(!validJsonOfField(189, "LOGICAL_ERASURE_DATE", pJson["LOGICAL_ERASURE_DATE"], err, false))
            return false;
    }
    if(pJson.isMember("LOGICAL_ERASURE_REASON"))
    {
        if(!validJsonOfField(190, "LOGICAL_ERASURE_REASON", pJson["LOGICAL_ERASURE_REASON"], err, false))
            return false;
    }
    if(pJson.isMember("COMPLIANCE_MIN_RISK_CATEGORY"))
    {
        if(!validJsonOfField(191, "COMPLIANCE_MIN_RISK_CATEGORY", pJson["COMPLIANCE_MIN_RISK_CATEGORY"], err, false))
            return false;
    }
    if(pJson.isMember("COMPLIANCE_MIN_RISK_COMMENT"))
    {
        if(!validJsonOfField(192, "COMPLIANCE_MIN_RISK_COMMENT", pJson["COMPLIANCE_MIN_RISK_COMMENT"], err, false))
            return false;
    }
    if(pJson.isMember("CLIENT_STRUCTURE_CD"))
    {
        if(!validJsonOfField(193, "CLIENT_STRUCTURE_CD", pJson["CLIENT_STRUCTURE_CD"], err, false))
            return false;
    }
    if(pJson.isMember("CLIENT_SUBSTRUCTURE_CD"))
    {
        if(!validJsonOfField(194, "CLIENT_SUBSTRUCTURE_CD", pJson["CLIENT_SUBSTRUCTURE_CD"], err, false))
            return false;
    }
    return true;
}
bool Kunde::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 195)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
      if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
      {
          if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
              return false;
      }
      if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
      {
          if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
              return false;
      }
      if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
      {
          if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
              return false;
      }
      if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
      {
          if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
              return false;
      }
      if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
      {
          if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
              return false;
      }
      if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
      {
          if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
              return false;
      }
      if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
      {
          if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, false))
              return false;
      }
      if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
      {
          if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, false))
              return false;
      }
      if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
      {
          if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, false))
              return false;
      }
      if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
      {
          if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, false))
              return false;
      }
      if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
      {
          if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, false))
              return false;
      }
      if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
      {
          if(!validJsonOfField(26, pMasqueradingVector[26], pJson[pMasqueradingVector[26]], err, false))
              return false;
      }
      if(!pMasqueradingVector[27].empty() && pJson.isMember(pMasqueradingVector[27]))
      {
          if(!validJsonOfField(27, pMasqueradingVector[27], pJson[pMasqueradingVector[27]], err, false))
              return false;
      }
      if(!pMasqueradingVector[28].empty() && pJson.isMember(pMasqueradingVector[28]))
      {
          if(!validJsonOfField(28, pMasqueradingVector[28], pJson[pMasqueradingVector[28]], err, false))
              return false;
      }
      if(!pMasqueradingVector[29].empty() && pJson.isMember(pMasqueradingVector[29]))
      {
          if(!validJsonOfField(29, pMasqueradingVector[29], pJson[pMasqueradingVector[29]], err, false))
              return false;
      }
      if(!pMasqueradingVector[30].empty() && pJson.isMember(pMasqueradingVector[30]))
      {
          if(!validJsonOfField(30, pMasqueradingVector[30], pJson[pMasqueradingVector[30]], err, false))
              return false;
      }
      if(!pMasqueradingVector[31].empty() && pJson.isMember(pMasqueradingVector[31]))
      {
          if(!validJsonOfField(31, pMasqueradingVector[31], pJson[pMasqueradingVector[31]], err, false))
              return false;
      }
      if(!pMasqueradingVector[32].empty() && pJson.isMember(pMasqueradingVector[32]))
      {
          if(!validJsonOfField(32, pMasqueradingVector[32], pJson[pMasqueradingVector[32]], err, false))
              return false;
      }
      if(!pMasqueradingVector[33].empty() && pJson.isMember(pMasqueradingVector[33]))
      {
          if(!validJsonOfField(33, pMasqueradingVector[33], pJson[pMasqueradingVector[33]], err, false))
              return false;
      }
      if(!pMasqueradingVector[34].empty() && pJson.isMember(pMasqueradingVector[34]))
      {
          if(!validJsonOfField(34, pMasqueradingVector[34], pJson[pMasqueradingVector[34]], err, false))
              return false;
      }
      if(!pMasqueradingVector[35].empty() && pJson.isMember(pMasqueradingVector[35]))
      {
          if(!validJsonOfField(35, pMasqueradingVector[35], pJson[pMasqueradingVector[35]], err, false))
              return false;
      }
      if(!pMasqueradingVector[36].empty() && pJson.isMember(pMasqueradingVector[36]))
      {
          if(!validJsonOfField(36, pMasqueradingVector[36], pJson[pMasqueradingVector[36]], err, false))
              return false;
      }
      if(!pMasqueradingVector[37].empty() && pJson.isMember(pMasqueradingVector[37]))
      {
          if(!validJsonOfField(37, pMasqueradingVector[37], pJson[pMasqueradingVector[37]], err, false))
              return false;
      }
      if(!pMasqueradingVector[38].empty() && pJson.isMember(pMasqueradingVector[38]))
      {
          if(!validJsonOfField(38, pMasqueradingVector[38], pJson[pMasqueradingVector[38]], err, false))
              return false;
      }
      if(!pMasqueradingVector[39].empty() && pJson.isMember(pMasqueradingVector[39]))
      {
          if(!validJsonOfField(39, pMasqueradingVector[39], pJson[pMasqueradingVector[39]], err, false))
              return false;
      }
      if(!pMasqueradingVector[40].empty() && pJson.isMember(pMasqueradingVector[40]))
      {
          if(!validJsonOfField(40, pMasqueradingVector[40], pJson[pMasqueradingVector[40]], err, false))
              return false;
      }
      if(!pMasqueradingVector[41].empty() && pJson.isMember(pMasqueradingVector[41]))
      {
          if(!validJsonOfField(41, pMasqueradingVector[41], pJson[pMasqueradingVector[41]], err, false))
              return false;
      }
      if(!pMasqueradingVector[42].empty() && pJson.isMember(pMasqueradingVector[42]))
      {
          if(!validJsonOfField(42, pMasqueradingVector[42], pJson[pMasqueradingVector[42]], err, false))
              return false;
      }
      if(!pMasqueradingVector[43].empty() && pJson.isMember(pMasqueradingVector[43]))
      {
          if(!validJsonOfField(43, pMasqueradingVector[43], pJson[pMasqueradingVector[43]], err, false))
              return false;
      }
      if(!pMasqueradingVector[44].empty() && pJson.isMember(pMasqueradingVector[44]))
      {
          if(!validJsonOfField(44, pMasqueradingVector[44], pJson[pMasqueradingVector[44]], err, false))
              return false;
      }
      if(!pMasqueradingVector[45].empty() && pJson.isMember(pMasqueradingVector[45]))
      {
          if(!validJsonOfField(45, pMasqueradingVector[45], pJson[pMasqueradingVector[45]], err, false))
              return false;
      }
      if(!pMasqueradingVector[46].empty() && pJson.isMember(pMasqueradingVector[46]))
      {
          if(!validJsonOfField(46, pMasqueradingVector[46], pJson[pMasqueradingVector[46]], err, false))
              return false;
      }
      if(!pMasqueradingVector[47].empty() && pJson.isMember(pMasqueradingVector[47]))
      {
          if(!validJsonOfField(47, pMasqueradingVector[47], pJson[pMasqueradingVector[47]], err, false))
              return false;
      }
      if(!pMasqueradingVector[48].empty() && pJson.isMember(pMasqueradingVector[48]))
      {
          if(!validJsonOfField(48, pMasqueradingVector[48], pJson[pMasqueradingVector[48]], err, false))
              return false;
      }
      if(!pMasqueradingVector[49].empty() && pJson.isMember(pMasqueradingVector[49]))
      {
          if(!validJsonOfField(49, pMasqueradingVector[49], pJson[pMasqueradingVector[49]], err, false))
              return false;
      }
      if(!pMasqueradingVector[50].empty() && pJson.isMember(pMasqueradingVector[50]))
      {
          if(!validJsonOfField(50, pMasqueradingVector[50], pJson[pMasqueradingVector[50]], err, false))
              return false;
      }
      if(!pMasqueradingVector[51].empty() && pJson.isMember(pMasqueradingVector[51]))
      {
          if(!validJsonOfField(51, pMasqueradingVector[51], pJson[pMasqueradingVector[51]], err, false))
              return false;
      }
      if(!pMasqueradingVector[52].empty() && pJson.isMember(pMasqueradingVector[52]))
      {
          if(!validJsonOfField(52, pMasqueradingVector[52], pJson[pMasqueradingVector[52]], err, false))
              return false;
      }
      if(!pMasqueradingVector[53].empty() && pJson.isMember(pMasqueradingVector[53]))
      {
          if(!validJsonOfField(53, pMasqueradingVector[53], pJson[pMasqueradingVector[53]], err, false))
              return false;
      }
      if(!pMasqueradingVector[54].empty() && pJson.isMember(pMasqueradingVector[54]))
      {
          if(!validJsonOfField(54, pMasqueradingVector[54], pJson[pMasqueradingVector[54]], err, false))
              return false;
      }
      if(!pMasqueradingVector[55].empty() && pJson.isMember(pMasqueradingVector[55]))
      {
          if(!validJsonOfField(55, pMasqueradingVector[55], pJson[pMasqueradingVector[55]], err, false))
              return false;
      }
      if(!pMasqueradingVector[56].empty() && pJson.isMember(pMasqueradingVector[56]))
      {
          if(!validJsonOfField(56, pMasqueradingVector[56], pJson[pMasqueradingVector[56]], err, false))
              return false;
      }
      if(!pMasqueradingVector[57].empty() && pJson.isMember(pMasqueradingVector[57]))
      {
          if(!validJsonOfField(57, pMasqueradingVector[57], pJson[pMasqueradingVector[57]], err, false))
              return false;
      }
      if(!pMasqueradingVector[58].empty() && pJson.isMember(pMasqueradingVector[58]))
      {
          if(!validJsonOfField(58, pMasqueradingVector[58], pJson[pMasqueradingVector[58]], err, false))
              return false;
      }
      if(!pMasqueradingVector[59].empty() && pJson.isMember(pMasqueradingVector[59]))
      {
          if(!validJsonOfField(59, pMasqueradingVector[59], pJson[pMasqueradingVector[59]], err, false))
              return false;
      }
      if(!pMasqueradingVector[60].empty() && pJson.isMember(pMasqueradingVector[60]))
      {
          if(!validJsonOfField(60, pMasqueradingVector[60], pJson[pMasqueradingVector[60]], err, false))
              return false;
      }
      if(!pMasqueradingVector[61].empty() && pJson.isMember(pMasqueradingVector[61]))
      {
          if(!validJsonOfField(61, pMasqueradingVector[61], pJson[pMasqueradingVector[61]], err, false))
              return false;
      }
      if(!pMasqueradingVector[62].empty() && pJson.isMember(pMasqueradingVector[62]))
      {
          if(!validJsonOfField(62, pMasqueradingVector[62], pJson[pMasqueradingVector[62]], err, false))
              return false;
      }
      if(!pMasqueradingVector[63].empty() && pJson.isMember(pMasqueradingVector[63]))
      {
          if(!validJsonOfField(63, pMasqueradingVector[63], pJson[pMasqueradingVector[63]], err, false))
              return false;
      }
      if(!pMasqueradingVector[64].empty() && pJson.isMember(pMasqueradingVector[64]))
      {
          if(!validJsonOfField(64, pMasqueradingVector[64], pJson[pMasqueradingVector[64]], err, false))
              return false;
      }
      if(!pMasqueradingVector[65].empty() && pJson.isMember(pMasqueradingVector[65]))
      {
          if(!validJsonOfField(65, pMasqueradingVector[65], pJson[pMasqueradingVector[65]], err, false))
              return false;
      }
      if(!pMasqueradingVector[66].empty() && pJson.isMember(pMasqueradingVector[66]))
      {
          if(!validJsonOfField(66, pMasqueradingVector[66], pJson[pMasqueradingVector[66]], err, false))
              return false;
      }
      if(!pMasqueradingVector[67].empty() && pJson.isMember(pMasqueradingVector[67]))
      {
          if(!validJsonOfField(67, pMasqueradingVector[67], pJson[pMasqueradingVector[67]], err, false))
              return false;
      }
      if(!pMasqueradingVector[68].empty() && pJson.isMember(pMasqueradingVector[68]))
      {
          if(!validJsonOfField(68, pMasqueradingVector[68], pJson[pMasqueradingVector[68]], err, false))
              return false;
      }
      if(!pMasqueradingVector[69].empty() && pJson.isMember(pMasqueradingVector[69]))
      {
          if(!validJsonOfField(69, pMasqueradingVector[69], pJson[pMasqueradingVector[69]], err, false))
              return false;
      }
      if(!pMasqueradingVector[70].empty() && pJson.isMember(pMasqueradingVector[70]))
      {
          if(!validJsonOfField(70, pMasqueradingVector[70], pJson[pMasqueradingVector[70]], err, false))
              return false;
      }
      if(!pMasqueradingVector[71].empty() && pJson.isMember(pMasqueradingVector[71]))
      {
          if(!validJsonOfField(71, pMasqueradingVector[71], pJson[pMasqueradingVector[71]], err, false))
              return false;
      }
      if(!pMasqueradingVector[72].empty() && pJson.isMember(pMasqueradingVector[72]))
      {
          if(!validJsonOfField(72, pMasqueradingVector[72], pJson[pMasqueradingVector[72]], err, false))
              return false;
      }
      if(!pMasqueradingVector[73].empty() && pJson.isMember(pMasqueradingVector[73]))
      {
          if(!validJsonOfField(73, pMasqueradingVector[73], pJson[pMasqueradingVector[73]], err, false))
              return false;
      }
      if(!pMasqueradingVector[74].empty() && pJson.isMember(pMasqueradingVector[74]))
      {
          if(!validJsonOfField(74, pMasqueradingVector[74], pJson[pMasqueradingVector[74]], err, false))
              return false;
      }
      if(!pMasqueradingVector[75].empty() && pJson.isMember(pMasqueradingVector[75]))
      {
          if(!validJsonOfField(75, pMasqueradingVector[75], pJson[pMasqueradingVector[75]], err, false))
              return false;
      }
      if(!pMasqueradingVector[76].empty() && pJson.isMember(pMasqueradingVector[76]))
      {
          if(!validJsonOfField(76, pMasqueradingVector[76], pJson[pMasqueradingVector[76]], err, false))
              return false;
      }
      if(!pMasqueradingVector[77].empty() && pJson.isMember(pMasqueradingVector[77]))
      {
          if(!validJsonOfField(77, pMasqueradingVector[77], pJson[pMasqueradingVector[77]], err, false))
              return false;
      }
      if(!pMasqueradingVector[78].empty() && pJson.isMember(pMasqueradingVector[78]))
      {
          if(!validJsonOfField(78, pMasqueradingVector[78], pJson[pMasqueradingVector[78]], err, false))
              return false;
      }
      if(!pMasqueradingVector[79].empty() && pJson.isMember(pMasqueradingVector[79]))
      {
          if(!validJsonOfField(79, pMasqueradingVector[79], pJson[pMasqueradingVector[79]], err, false))
              return false;
      }
      if(!pMasqueradingVector[80].empty() && pJson.isMember(pMasqueradingVector[80]))
      {
          if(!validJsonOfField(80, pMasqueradingVector[80], pJson[pMasqueradingVector[80]], err, false))
              return false;
      }
      if(!pMasqueradingVector[81].empty() && pJson.isMember(pMasqueradingVector[81]))
      {
          if(!validJsonOfField(81, pMasqueradingVector[81], pJson[pMasqueradingVector[81]], err, false))
              return false;
      }
      if(!pMasqueradingVector[82].empty() && pJson.isMember(pMasqueradingVector[82]))
      {
          if(!validJsonOfField(82, pMasqueradingVector[82], pJson[pMasqueradingVector[82]], err, false))
              return false;
      }
      if(!pMasqueradingVector[83].empty() && pJson.isMember(pMasqueradingVector[83]))
      {
          if(!validJsonOfField(83, pMasqueradingVector[83], pJson[pMasqueradingVector[83]], err, false))
              return false;
      }
      if(!pMasqueradingVector[84].empty() && pJson.isMember(pMasqueradingVector[84]))
      {
          if(!validJsonOfField(84, pMasqueradingVector[84], pJson[pMasqueradingVector[84]], err, false))
              return false;
      }
      if(!pMasqueradingVector[85].empty() && pJson.isMember(pMasqueradingVector[85]))
      {
          if(!validJsonOfField(85, pMasqueradingVector[85], pJson[pMasqueradingVector[85]], err, false))
              return false;
      }
      if(!pMasqueradingVector[86].empty() && pJson.isMember(pMasqueradingVector[86]))
      {
          if(!validJsonOfField(86, pMasqueradingVector[86], pJson[pMasqueradingVector[86]], err, false))
              return false;
      }
      if(!pMasqueradingVector[87].empty() && pJson.isMember(pMasqueradingVector[87]))
      {
          if(!validJsonOfField(87, pMasqueradingVector[87], pJson[pMasqueradingVector[87]], err, false))
              return false;
      }
      if(!pMasqueradingVector[88].empty() && pJson.isMember(pMasqueradingVector[88]))
      {
          if(!validJsonOfField(88, pMasqueradingVector[88], pJson[pMasqueradingVector[88]], err, false))
              return false;
      }
      if(!pMasqueradingVector[89].empty() && pJson.isMember(pMasqueradingVector[89]))
      {
          if(!validJsonOfField(89, pMasqueradingVector[89], pJson[pMasqueradingVector[89]], err, false))
              return false;
      }
      if(!pMasqueradingVector[90].empty() && pJson.isMember(pMasqueradingVector[90]))
      {
          if(!validJsonOfField(90, pMasqueradingVector[90], pJson[pMasqueradingVector[90]], err, false))
              return false;
      }
      if(!pMasqueradingVector[91].empty() && pJson.isMember(pMasqueradingVector[91]))
      {
          if(!validJsonOfField(91, pMasqueradingVector[91], pJson[pMasqueradingVector[91]], err, false))
              return false;
      }
      if(!pMasqueradingVector[92].empty() && pJson.isMember(pMasqueradingVector[92]))
      {
          if(!validJsonOfField(92, pMasqueradingVector[92], pJson[pMasqueradingVector[92]], err, false))
              return false;
      }
      if(!pMasqueradingVector[93].empty() && pJson.isMember(pMasqueradingVector[93]))
      {
          if(!validJsonOfField(93, pMasqueradingVector[93], pJson[pMasqueradingVector[93]], err, false))
              return false;
      }
      if(!pMasqueradingVector[94].empty() && pJson.isMember(pMasqueradingVector[94]))
      {
          if(!validJsonOfField(94, pMasqueradingVector[94], pJson[pMasqueradingVector[94]], err, false))
              return false;
      }
      if(!pMasqueradingVector[95].empty() && pJson.isMember(pMasqueradingVector[95]))
      {
          if(!validJsonOfField(95, pMasqueradingVector[95], pJson[pMasqueradingVector[95]], err, false))
              return false;
      }
      if(!pMasqueradingVector[96].empty() && pJson.isMember(pMasqueradingVector[96]))
      {
          if(!validJsonOfField(96, pMasqueradingVector[96], pJson[pMasqueradingVector[96]], err, false))
              return false;
      }
      if(!pMasqueradingVector[97].empty() && pJson.isMember(pMasqueradingVector[97]))
      {
          if(!validJsonOfField(97, pMasqueradingVector[97], pJson[pMasqueradingVector[97]], err, false))
              return false;
      }
      if(!pMasqueradingVector[98].empty() && pJson.isMember(pMasqueradingVector[98]))
      {
          if(!validJsonOfField(98, pMasqueradingVector[98], pJson[pMasqueradingVector[98]], err, false))
              return false;
      }
      if(!pMasqueradingVector[99].empty() && pJson.isMember(pMasqueradingVector[99]))
      {
          if(!validJsonOfField(99, pMasqueradingVector[99], pJson[pMasqueradingVector[99]], err, false))
              return false;
      }
      if(!pMasqueradingVector[100].empty() && pJson.isMember(pMasqueradingVector[100]))
      {
          if(!validJsonOfField(100, pMasqueradingVector[100], pJson[pMasqueradingVector[100]], err, false))
              return false;
      }
      if(!pMasqueradingVector[101].empty() && pJson.isMember(pMasqueradingVector[101]))
      {
          if(!validJsonOfField(101, pMasqueradingVector[101], pJson[pMasqueradingVector[101]], err, false))
              return false;
      }
      if(!pMasqueradingVector[102].empty() && pJson.isMember(pMasqueradingVector[102]))
      {
          if(!validJsonOfField(102, pMasqueradingVector[102], pJson[pMasqueradingVector[102]], err, false))
              return false;
      }
      if(!pMasqueradingVector[103].empty() && pJson.isMember(pMasqueradingVector[103]))
      {
          if(!validJsonOfField(103, pMasqueradingVector[103], pJson[pMasqueradingVector[103]], err, false))
              return false;
      }
      if(!pMasqueradingVector[104].empty() && pJson.isMember(pMasqueradingVector[104]))
      {
          if(!validJsonOfField(104, pMasqueradingVector[104], pJson[pMasqueradingVector[104]], err, false))
              return false;
      }
      if(!pMasqueradingVector[105].empty() && pJson.isMember(pMasqueradingVector[105]))
      {
          if(!validJsonOfField(105, pMasqueradingVector[105], pJson[pMasqueradingVector[105]], err, false))
              return false;
      }
      if(!pMasqueradingVector[106].empty() && pJson.isMember(pMasqueradingVector[106]))
      {
          if(!validJsonOfField(106, pMasqueradingVector[106], pJson[pMasqueradingVector[106]], err, false))
              return false;
      }
      if(!pMasqueradingVector[107].empty() && pJson.isMember(pMasqueradingVector[107]))
      {
          if(!validJsonOfField(107, pMasqueradingVector[107], pJson[pMasqueradingVector[107]], err, false))
              return false;
      }
      if(!pMasqueradingVector[108].empty() && pJson.isMember(pMasqueradingVector[108]))
      {
          if(!validJsonOfField(108, pMasqueradingVector[108], pJson[pMasqueradingVector[108]], err, false))
              return false;
      }
      if(!pMasqueradingVector[109].empty() && pJson.isMember(pMasqueradingVector[109]))
      {
          if(!validJsonOfField(109, pMasqueradingVector[109], pJson[pMasqueradingVector[109]], err, false))
              return false;
      }
      if(!pMasqueradingVector[110].empty() && pJson.isMember(pMasqueradingVector[110]))
      {
          if(!validJsonOfField(110, pMasqueradingVector[110], pJson[pMasqueradingVector[110]], err, false))
              return false;
      }
      if(!pMasqueradingVector[111].empty() && pJson.isMember(pMasqueradingVector[111]))
      {
          if(!validJsonOfField(111, pMasqueradingVector[111], pJson[pMasqueradingVector[111]], err, false))
              return false;
      }
      if(!pMasqueradingVector[112].empty() && pJson.isMember(pMasqueradingVector[112]))
      {
          if(!validJsonOfField(112, pMasqueradingVector[112], pJson[pMasqueradingVector[112]], err, false))
              return false;
      }
      if(!pMasqueradingVector[113].empty() && pJson.isMember(pMasqueradingVector[113]))
      {
          if(!validJsonOfField(113, pMasqueradingVector[113], pJson[pMasqueradingVector[113]], err, false))
              return false;
      }
      if(!pMasqueradingVector[114].empty() && pJson.isMember(pMasqueradingVector[114]))
      {
          if(!validJsonOfField(114, pMasqueradingVector[114], pJson[pMasqueradingVector[114]], err, false))
              return false;
      }
      if(!pMasqueradingVector[115].empty() && pJson.isMember(pMasqueradingVector[115]))
      {
          if(!validJsonOfField(115, pMasqueradingVector[115], pJson[pMasqueradingVector[115]], err, false))
              return false;
      }
      if(!pMasqueradingVector[116].empty() && pJson.isMember(pMasqueradingVector[116]))
      {
          if(!validJsonOfField(116, pMasqueradingVector[116], pJson[pMasqueradingVector[116]], err, false))
              return false;
      }
      if(!pMasqueradingVector[117].empty() && pJson.isMember(pMasqueradingVector[117]))
      {
          if(!validJsonOfField(117, pMasqueradingVector[117], pJson[pMasqueradingVector[117]], err, false))
              return false;
      }
      if(!pMasqueradingVector[118].empty() && pJson.isMember(pMasqueradingVector[118]))
      {
          if(!validJsonOfField(118, pMasqueradingVector[118], pJson[pMasqueradingVector[118]], err, false))
              return false;
      }
      if(!pMasqueradingVector[119].empty() && pJson.isMember(pMasqueradingVector[119]))
      {
          if(!validJsonOfField(119, pMasqueradingVector[119], pJson[pMasqueradingVector[119]], err, false))
              return false;
      }
      if(!pMasqueradingVector[120].empty() && pJson.isMember(pMasqueradingVector[120]))
      {
          if(!validJsonOfField(120, pMasqueradingVector[120], pJson[pMasqueradingVector[120]], err, false))
              return false;
      }
      if(!pMasqueradingVector[121].empty() && pJson.isMember(pMasqueradingVector[121]))
      {
          if(!validJsonOfField(121, pMasqueradingVector[121], pJson[pMasqueradingVector[121]], err, false))
              return false;
      }
      if(!pMasqueradingVector[122].empty() && pJson.isMember(pMasqueradingVector[122]))
      {
          if(!validJsonOfField(122, pMasqueradingVector[122], pJson[pMasqueradingVector[122]], err, false))
              return false;
      }
      if(!pMasqueradingVector[123].empty() && pJson.isMember(pMasqueradingVector[123]))
      {
          if(!validJsonOfField(123, pMasqueradingVector[123], pJson[pMasqueradingVector[123]], err, false))
              return false;
      }
      if(!pMasqueradingVector[124].empty() && pJson.isMember(pMasqueradingVector[124]))
      {
          if(!validJsonOfField(124, pMasqueradingVector[124], pJson[pMasqueradingVector[124]], err, false))
              return false;
      }
      if(!pMasqueradingVector[125].empty() && pJson.isMember(pMasqueradingVector[125]))
      {
          if(!validJsonOfField(125, pMasqueradingVector[125], pJson[pMasqueradingVector[125]], err, false))
              return false;
      }
      if(!pMasqueradingVector[126].empty() && pJson.isMember(pMasqueradingVector[126]))
      {
          if(!validJsonOfField(126, pMasqueradingVector[126], pJson[pMasqueradingVector[126]], err, false))
              return false;
      }
      if(!pMasqueradingVector[127].empty() && pJson.isMember(pMasqueradingVector[127]))
      {
          if(!validJsonOfField(127, pMasqueradingVector[127], pJson[pMasqueradingVector[127]], err, false))
              return false;
      }
      if(!pMasqueradingVector[128].empty() && pJson.isMember(pMasqueradingVector[128]))
      {
          if(!validJsonOfField(128, pMasqueradingVector[128], pJson[pMasqueradingVector[128]], err, false))
              return false;
      }
      if(!pMasqueradingVector[129].empty() && pJson.isMember(pMasqueradingVector[129]))
      {
          if(!validJsonOfField(129, pMasqueradingVector[129], pJson[pMasqueradingVector[129]], err, false))
              return false;
      }
      if(!pMasqueradingVector[130].empty() && pJson.isMember(pMasqueradingVector[130]))
      {
          if(!validJsonOfField(130, pMasqueradingVector[130], pJson[pMasqueradingVector[130]], err, false))
              return false;
      }
      if(!pMasqueradingVector[131].empty() && pJson.isMember(pMasqueradingVector[131]))
      {
          if(!validJsonOfField(131, pMasqueradingVector[131], pJson[pMasqueradingVector[131]], err, false))
              return false;
      }
      if(!pMasqueradingVector[132].empty() && pJson.isMember(pMasqueradingVector[132]))
      {
          if(!validJsonOfField(132, pMasqueradingVector[132], pJson[pMasqueradingVector[132]], err, false))
              return false;
      }
      if(!pMasqueradingVector[133].empty() && pJson.isMember(pMasqueradingVector[133]))
      {
          if(!validJsonOfField(133, pMasqueradingVector[133], pJson[pMasqueradingVector[133]], err, false))
              return false;
      }
      if(!pMasqueradingVector[134].empty() && pJson.isMember(pMasqueradingVector[134]))
      {
          if(!validJsonOfField(134, pMasqueradingVector[134], pJson[pMasqueradingVector[134]], err, false))
              return false;
      }
      if(!pMasqueradingVector[135].empty() && pJson.isMember(pMasqueradingVector[135]))
      {
          if(!validJsonOfField(135, pMasqueradingVector[135], pJson[pMasqueradingVector[135]], err, false))
              return false;
      }
      if(!pMasqueradingVector[136].empty() && pJson.isMember(pMasqueradingVector[136]))
      {
          if(!validJsonOfField(136, pMasqueradingVector[136], pJson[pMasqueradingVector[136]], err, false))
              return false;
      }
      if(!pMasqueradingVector[137].empty() && pJson.isMember(pMasqueradingVector[137]))
      {
          if(!validJsonOfField(137, pMasqueradingVector[137], pJson[pMasqueradingVector[137]], err, false))
              return false;
      }
      if(!pMasqueradingVector[138].empty() && pJson.isMember(pMasqueradingVector[138]))
      {
          if(!validJsonOfField(138, pMasqueradingVector[138], pJson[pMasqueradingVector[138]], err, false))
              return false;
      }
      if(!pMasqueradingVector[139].empty() && pJson.isMember(pMasqueradingVector[139]))
      {
          if(!validJsonOfField(139, pMasqueradingVector[139], pJson[pMasqueradingVector[139]], err, false))
              return false;
      }
      if(!pMasqueradingVector[140].empty() && pJson.isMember(pMasqueradingVector[140]))
      {
          if(!validJsonOfField(140, pMasqueradingVector[140], pJson[pMasqueradingVector[140]], err, false))
              return false;
      }
      if(!pMasqueradingVector[141].empty() && pJson.isMember(pMasqueradingVector[141]))
      {
          if(!validJsonOfField(141, pMasqueradingVector[141], pJson[pMasqueradingVector[141]], err, false))
              return false;
      }
      if(!pMasqueradingVector[142].empty() && pJson.isMember(pMasqueradingVector[142]))
      {
          if(!validJsonOfField(142, pMasqueradingVector[142], pJson[pMasqueradingVector[142]], err, false))
              return false;
      }
      if(!pMasqueradingVector[143].empty() && pJson.isMember(pMasqueradingVector[143]))
      {
          if(!validJsonOfField(143, pMasqueradingVector[143], pJson[pMasqueradingVector[143]], err, false))
              return false;
      }
      if(!pMasqueradingVector[144].empty() && pJson.isMember(pMasqueradingVector[144]))
      {
          if(!validJsonOfField(144, pMasqueradingVector[144], pJson[pMasqueradingVector[144]], err, false))
              return false;
      }
      if(!pMasqueradingVector[145].empty() && pJson.isMember(pMasqueradingVector[145]))
      {
          if(!validJsonOfField(145, pMasqueradingVector[145], pJson[pMasqueradingVector[145]], err, false))
              return false;
      }
      if(!pMasqueradingVector[146].empty() && pJson.isMember(pMasqueradingVector[146]))
      {
          if(!validJsonOfField(146, pMasqueradingVector[146], pJson[pMasqueradingVector[146]], err, false))
              return false;
      }
      if(!pMasqueradingVector[147].empty() && pJson.isMember(pMasqueradingVector[147]))
      {
          if(!validJsonOfField(147, pMasqueradingVector[147], pJson[pMasqueradingVector[147]], err, false))
              return false;
      }
      if(!pMasqueradingVector[148].empty() && pJson.isMember(pMasqueradingVector[148]))
      {
          if(!validJsonOfField(148, pMasqueradingVector[148], pJson[pMasqueradingVector[148]], err, false))
              return false;
      }
      if(!pMasqueradingVector[149].empty() && pJson.isMember(pMasqueradingVector[149]))
      {
          if(!validJsonOfField(149, pMasqueradingVector[149], pJson[pMasqueradingVector[149]], err, false))
              return false;
      }
      if(!pMasqueradingVector[150].empty() && pJson.isMember(pMasqueradingVector[150]))
      {
          if(!validJsonOfField(150, pMasqueradingVector[150], pJson[pMasqueradingVector[150]], err, false))
              return false;
      }
      if(!pMasqueradingVector[151].empty() && pJson.isMember(pMasqueradingVector[151]))
      {
          if(!validJsonOfField(151, pMasqueradingVector[151], pJson[pMasqueradingVector[151]], err, false))
              return false;
      }
      if(!pMasqueradingVector[152].empty() && pJson.isMember(pMasqueradingVector[152]))
      {
          if(!validJsonOfField(152, pMasqueradingVector[152], pJson[pMasqueradingVector[152]], err, false))
              return false;
      }
      if(!pMasqueradingVector[153].empty() && pJson.isMember(pMasqueradingVector[153]))
      {
          if(!validJsonOfField(153, pMasqueradingVector[153], pJson[pMasqueradingVector[153]], err, false))
              return false;
      }
      if(!pMasqueradingVector[154].empty() && pJson.isMember(pMasqueradingVector[154]))
      {
          if(!validJsonOfField(154, pMasqueradingVector[154], pJson[pMasqueradingVector[154]], err, false))
              return false;
      }
      if(!pMasqueradingVector[155].empty() && pJson.isMember(pMasqueradingVector[155]))
      {
          if(!validJsonOfField(155, pMasqueradingVector[155], pJson[pMasqueradingVector[155]], err, false))
              return false;
      }
      if(!pMasqueradingVector[156].empty() && pJson.isMember(pMasqueradingVector[156]))
      {
          if(!validJsonOfField(156, pMasqueradingVector[156], pJson[pMasqueradingVector[156]], err, false))
              return false;
      }
      if(!pMasqueradingVector[157].empty() && pJson.isMember(pMasqueradingVector[157]))
      {
          if(!validJsonOfField(157, pMasqueradingVector[157], pJson[pMasqueradingVector[157]], err, false))
              return false;
      }
      if(!pMasqueradingVector[158].empty() && pJson.isMember(pMasqueradingVector[158]))
      {
          if(!validJsonOfField(158, pMasqueradingVector[158], pJson[pMasqueradingVector[158]], err, false))
              return false;
      }
      if(!pMasqueradingVector[159].empty() && pJson.isMember(pMasqueradingVector[159]))
      {
          if(!validJsonOfField(159, pMasqueradingVector[159], pJson[pMasqueradingVector[159]], err, false))
              return false;
      }
      if(!pMasqueradingVector[160].empty() && pJson.isMember(pMasqueradingVector[160]))
      {
          if(!validJsonOfField(160, pMasqueradingVector[160], pJson[pMasqueradingVector[160]], err, false))
              return false;
      }
      if(!pMasqueradingVector[161].empty() && pJson.isMember(pMasqueradingVector[161]))
      {
          if(!validJsonOfField(161, pMasqueradingVector[161], pJson[pMasqueradingVector[161]], err, false))
              return false;
      }
      if(!pMasqueradingVector[162].empty() && pJson.isMember(pMasqueradingVector[162]))
      {
          if(!validJsonOfField(162, pMasqueradingVector[162], pJson[pMasqueradingVector[162]], err, false))
              return false;
      }
      if(!pMasqueradingVector[163].empty() && pJson.isMember(pMasqueradingVector[163]))
      {
          if(!validJsonOfField(163, pMasqueradingVector[163], pJson[pMasqueradingVector[163]], err, false))
              return false;
      }
      if(!pMasqueradingVector[164].empty() && pJson.isMember(pMasqueradingVector[164]))
      {
          if(!validJsonOfField(164, pMasqueradingVector[164], pJson[pMasqueradingVector[164]], err, false))
              return false;
      }
      if(!pMasqueradingVector[165].empty() && pJson.isMember(pMasqueradingVector[165]))
      {
          if(!validJsonOfField(165, pMasqueradingVector[165], pJson[pMasqueradingVector[165]], err, false))
              return false;
      }
      if(!pMasqueradingVector[166].empty() && pJson.isMember(pMasqueradingVector[166]))
      {
          if(!validJsonOfField(166, pMasqueradingVector[166], pJson[pMasqueradingVector[166]], err, false))
              return false;
      }
      if(!pMasqueradingVector[167].empty() && pJson.isMember(pMasqueradingVector[167]))
      {
          if(!validJsonOfField(167, pMasqueradingVector[167], pJson[pMasqueradingVector[167]], err, false))
              return false;
      }
      if(!pMasqueradingVector[168].empty() && pJson.isMember(pMasqueradingVector[168]))
      {
          if(!validJsonOfField(168, pMasqueradingVector[168], pJson[pMasqueradingVector[168]], err, false))
              return false;
      }
      if(!pMasqueradingVector[169].empty() && pJson.isMember(pMasqueradingVector[169]))
      {
          if(!validJsonOfField(169, pMasqueradingVector[169], pJson[pMasqueradingVector[169]], err, false))
              return false;
      }
      if(!pMasqueradingVector[170].empty() && pJson.isMember(pMasqueradingVector[170]))
      {
          if(!validJsonOfField(170, pMasqueradingVector[170], pJson[pMasqueradingVector[170]], err, false))
              return false;
      }
      if(!pMasqueradingVector[171].empty() && pJson.isMember(pMasqueradingVector[171]))
      {
          if(!validJsonOfField(171, pMasqueradingVector[171], pJson[pMasqueradingVector[171]], err, false))
              return false;
      }
      if(!pMasqueradingVector[172].empty() && pJson.isMember(pMasqueradingVector[172]))
      {
          if(!validJsonOfField(172, pMasqueradingVector[172], pJson[pMasqueradingVector[172]], err, false))
              return false;
      }
      if(!pMasqueradingVector[173].empty() && pJson.isMember(pMasqueradingVector[173]))
      {
          if(!validJsonOfField(173, pMasqueradingVector[173], pJson[pMasqueradingVector[173]], err, false))
              return false;
      }
      if(!pMasqueradingVector[174].empty() && pJson.isMember(pMasqueradingVector[174]))
      {
          if(!validJsonOfField(174, pMasqueradingVector[174], pJson[pMasqueradingVector[174]], err, false))
              return false;
      }
      if(!pMasqueradingVector[175].empty() && pJson.isMember(pMasqueradingVector[175]))
      {
          if(!validJsonOfField(175, pMasqueradingVector[175], pJson[pMasqueradingVector[175]], err, false))
              return false;
      }
      if(!pMasqueradingVector[176].empty() && pJson.isMember(pMasqueradingVector[176]))
      {
          if(!validJsonOfField(176, pMasqueradingVector[176], pJson[pMasqueradingVector[176]], err, false))
              return false;
      }
      if(!pMasqueradingVector[177].empty() && pJson.isMember(pMasqueradingVector[177]))
      {
          if(!validJsonOfField(177, pMasqueradingVector[177], pJson[pMasqueradingVector[177]], err, false))
              return false;
      }
      if(!pMasqueradingVector[178].empty() && pJson.isMember(pMasqueradingVector[178]))
      {
          if(!validJsonOfField(178, pMasqueradingVector[178], pJson[pMasqueradingVector[178]], err, false))
              return false;
      }
      if(!pMasqueradingVector[179].empty() && pJson.isMember(pMasqueradingVector[179]))
      {
          if(!validJsonOfField(179, pMasqueradingVector[179], pJson[pMasqueradingVector[179]], err, false))
              return false;
      }
      if(!pMasqueradingVector[180].empty() && pJson.isMember(pMasqueradingVector[180]))
      {
          if(!validJsonOfField(180, pMasqueradingVector[180], pJson[pMasqueradingVector[180]], err, false))
              return false;
      }
      if(!pMasqueradingVector[181].empty() && pJson.isMember(pMasqueradingVector[181]))
      {
          if(!validJsonOfField(181, pMasqueradingVector[181], pJson[pMasqueradingVector[181]], err, false))
              return false;
      }
      if(!pMasqueradingVector[182].empty() && pJson.isMember(pMasqueradingVector[182]))
      {
          if(!validJsonOfField(182, pMasqueradingVector[182], pJson[pMasqueradingVector[182]], err, false))
              return false;
      }
      if(!pMasqueradingVector[183].empty() && pJson.isMember(pMasqueradingVector[183]))
      {
          if(!validJsonOfField(183, pMasqueradingVector[183], pJson[pMasqueradingVector[183]], err, false))
              return false;
      }
      if(!pMasqueradingVector[184].empty() && pJson.isMember(pMasqueradingVector[184]))
      {
          if(!validJsonOfField(184, pMasqueradingVector[184], pJson[pMasqueradingVector[184]], err, false))
              return false;
      }
      if(!pMasqueradingVector[185].empty() && pJson.isMember(pMasqueradingVector[185]))
      {
          if(!validJsonOfField(185, pMasqueradingVector[185], pJson[pMasqueradingVector[185]], err, false))
              return false;
      }
      if(!pMasqueradingVector[186].empty() && pJson.isMember(pMasqueradingVector[186]))
      {
          if(!validJsonOfField(186, pMasqueradingVector[186], pJson[pMasqueradingVector[186]], err, false))
              return false;
      }
      if(!pMasqueradingVector[187].empty() && pJson.isMember(pMasqueradingVector[187]))
      {
          if(!validJsonOfField(187, pMasqueradingVector[187], pJson[pMasqueradingVector[187]], err, false))
              return false;
      }
      if(!pMasqueradingVector[188].empty() && pJson.isMember(pMasqueradingVector[188]))
      {
          if(!validJsonOfField(188, pMasqueradingVector[188], pJson[pMasqueradingVector[188]], err, false))
              return false;
      }
      if(!pMasqueradingVector[189].empty() && pJson.isMember(pMasqueradingVector[189]))
      {
          if(!validJsonOfField(189, pMasqueradingVector[189], pJson[pMasqueradingVector[189]], err, false))
              return false;
      }
      if(!pMasqueradingVector[190].empty() && pJson.isMember(pMasqueradingVector[190]))
      {
          if(!validJsonOfField(190, pMasqueradingVector[190], pJson[pMasqueradingVector[190]], err, false))
              return false;
      }
      if(!pMasqueradingVector[191].empty() && pJson.isMember(pMasqueradingVector[191]))
      {
          if(!validJsonOfField(191, pMasqueradingVector[191], pJson[pMasqueradingVector[191]], err, false))
              return false;
      }
      if(!pMasqueradingVector[192].empty() && pJson.isMember(pMasqueradingVector[192]))
      {
          if(!validJsonOfField(192, pMasqueradingVector[192], pJson[pMasqueradingVector[192]], err, false))
              return false;
      }
      if(!pMasqueradingVector[193].empty() && pJson.isMember(pMasqueradingVector[193]))
      {
          if(!validJsonOfField(193, pMasqueradingVector[193], pJson[pMasqueradingVector[193]], err, false))
              return false;
      }
      if(!pMasqueradingVector[194].empty() && pJson.isMember(pMasqueradingVector[194]))
      {
          if(!validJsonOfField(194, pMasqueradingVector[194], pJson[pMasqueradingVector[194]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Kunde::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 160)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 160)";
                return false;
            }

            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 15:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 17:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 18:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 19:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 700)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 700)";
                return false;
            }

            break;
        case 20:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 21:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 22:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1000)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1000)";
                return false;
            }

            break;
        case 23:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 24:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 25:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 26:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 27:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 28:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 5)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 5)";
                return false;
            }

            break;
        case 29:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 30:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 31:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 8)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 8)";
                return false;
            }

            break;
        case 32:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 33:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 34:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 35:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 36:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 37:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 38:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 39:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 40:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 41:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 42:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 60)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 60)";
                return false;
            }

            break;
        case 43:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 60)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 60)";
                return false;
            }

            break;
        case 44:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 45:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 46:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 47:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 48:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 49:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 50:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 51:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 52:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 53:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 54:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 55:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 56:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 57:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 60)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 60)";
                return false;
            }

            break;
        case 58:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 59:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 60:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 2000)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 2000)";
                return false;
            }

            break;
        case 61:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 62:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 63:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 64:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 65:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 66:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 67:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 68:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 69:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 70:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 71:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 72:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 4)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 4)";
                return false;
            }

            break;
        case 73:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 74:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 75:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 76:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 77:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 78:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 79:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 6)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 6)";
                return false;
            }

            break;
        case 80:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 81:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 82:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 83:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 84:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 85:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 86:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 87:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 88:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 2)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 2)";
                return false;
            }

            break;
        case 89:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 13)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 13)";
                return false;
            }

            break;
        case 90:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 91:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 92:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 93:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 94:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 95:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 96:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 8)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 8)";
                return false;
            }

            break;
        case 97:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 6)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 6)";
                return false;
            }

            break;
        case 98:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 5)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 5)";
                return false;
            }

            break;
        case 99:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 5)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 5)";
                return false;
            }

            break;
        case 100:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 4)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 4)";
                return false;
            }

            break;
        case 101:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 102:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 103:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 60)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 60)";
                return false;
            }

            break;
        case 104:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 105:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 2)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 2)";
                return false;
            }

            break;
        case 106:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 107:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 108:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 109:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 110:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1000)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1000)";
                return false;
            }

            break;
        case 111:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 112:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 113:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 114:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 115:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 116:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 117:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 118:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 119:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 120:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 121:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 122:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 123:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 124:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 125:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 126:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 512)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 512)";
                return false;
            }

            break;
        case 127:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 512)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 512)";
                return false;
            }

            break;
        case 128:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 512)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 512)";
                return false;
            }

            break;
        case 129:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 512)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 512)";
                return false;
            }

            break;
        case 130:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 512)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 512)";
                return false;
            }

            break;
        case 131:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 132:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 133:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 134:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 135:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 136:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 137:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 138:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 139:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 140:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 141:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 142:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 143:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 144:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 2)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 2)";
                return false;
            }

            break;
        case 145:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 2)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 2)";
                return false;
            }

            break;
        case 146:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 2)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 2)";
                return false;
            }

            break;
        case 147:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 148:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 149:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 150:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 151:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 152:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 10)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 10)";
                return false;
            }

            break;
        case 153:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 154:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 155:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 156:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 157:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 158:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 159:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 160:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 161:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 2)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 2)";
                return false;
            }

            break;
        case 162:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 163:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 164:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 165:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 166:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 167:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 200)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 200)";
                return false;
            }

            break;
        case 168:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 169:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 170:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 171:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 172:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 173:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 174:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 175:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 176:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 177:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 178:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 179:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 180:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 181:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 182:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 183:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 184:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 185:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 186:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 187:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 2000)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 2000)";
                return false;
            }

            break;
        case 188:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 189:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 190:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 2000)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 2000)";
                return false;
            }

            break;
        case 191:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 192:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 193:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 194:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
