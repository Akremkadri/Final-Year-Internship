/**
 *
 *  Land.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Land.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::cim_web;

const std::string Land::Cols::_LAND_CD = "LAND_CD";
const std::string Land::Cols::_AUFETIKETTE_CD = "AUFETIKETTE_CD";
const std::string Land::Cols::_LAND = "LAND";
const std::string Land::Cols::_KURZCODE = "KURZCODE";
const std::string Land::Cols::_PLZVORAUS_CD = "PLZVORAUS_CD";
const std::string Land::Cols::_VORWAHL = "VORWAHL";
const std::string Land::Cols::_WAEHRUNGS_CD = "WAEHRUNGS_CD";
const std::string Land::Cols::_INLAND_CD = "INLAND_CD";
const std::string Land::Cols::_VERSANDPRIORITAET_CD = "VERSANDPRIORITAET_CD";
const std::string Land::Cols::_RISIKOGRUPPE = "RISIKOGRUPPE";
const std::string Land::Cols::_RISKINDEX = "RISKINDEX";
const std::string Land::Cols::_EU_LAND_CD = "EU_LAND_CD";
const std::string Land::Cols::_CRTDATUM = "CRTDATUM";
const std::string Land::Cols::_CRTUSER = "CRTUSER";
const std::string Land::Cols::_MUTDATUM = "MUTDATUM";
const std::string Land::Cols::_MUTUSER = "MUTUSER";
const std::string Land::Cols::_LOESCH_CD = "LOESCH_CD";
const std::string Land::Cols::_LOESCHDATUM = "LOESCHDATUM";
const std::string Land::Cols::_LOESCHUSER = "LOESCHUSER";
const std::string Land::Cols::_FF_TAXCODE = "FF_TAXCODE";
const std::string Land::Cols::_FF_LANDCODE = "FF_LANDCODE";
const std::string Land::Cols::_ABGST_RELEVANT_CD = "ABGST_RELEVANT_CD";
const std::string Land::Cols::_US_FATCA_LAND_CD = "US_FATCA_LAND_CD";
const std::string Land::Cols::_IGA_STATUS = "IGA_STATUS";
const std::string Land::Cols::_US_TERRITORY_CD = "US_TERRITORY_CD";
const std::string Land::Cols::_DESTINATION_CD = "DESTINATION_CD";
const std::string Land::Cols::_AUFTEILUNG = "AUFTEILUNG";
const std::string Land::Cols::_STATFISCC_INLAND_CD = "STATFISCC_INLAND_CD";
const std::string Land::Cols::_AEOI_REPORTABLE_CD = "AEOI_REPORTABLE_CD";
const std::string Land::Cols::_AEOI_REP_AGREEMENT_DATE = "AEOI_REP_AGREEMENT_DATE";
const std::string Land::Cols::_AEOI_START_REPORTING_YEAR = "AEOI_START_REPORTING_YEAR";
const std::string Land::Cols::_TIN_AVAILABLE_CD = "TIN_AVAILABLE_CD";
const std::string Land::Cols::_JURISDICTION_OF_BANK_CD = "JURISDICTION_OF_BANK_CD";
const std::string Land::Cols::_AEOI_FIRST_YEAR_OF_REPORTING = "AEOI_FIRST_YEAR_OF_REPORTING";
const std::string Land::Cols::_AEOI_REP_WIDER_APPROACH_CD = "AEOI_REP_WIDER_APPROACH_CD";
const std::string Land::Cols::_NAFTA_COUNTRY_CD = "NAFTA_COUNTRY_CD";
const std::string Land::Cols::_EEA_COUNTRY_CD = "EEA_COUNTRY_CD";
const std::string Land::Cols::_US_CDI_COUNTRY_CD = "US_CDI_COUNTRY_CD";
const std::string Land::Cols::_AEOI_PARTICIPATING_COUNTRY_CD = "AEOI_PARTICIPATING_COUNTRY_CD";
const std::string Land::Cols::_LAND_A3_CD = "LAND_A3_CD";
const std::string Land::Cols::_CDI_WITH_SWITZERLAND_CD = "CDI_WITH_SWITZERLAND_CD";
const std::string Land::primaryKeyName = "LAND_CD";
const bool Land::hasPrimaryKey = true;
const std::string Land::tableName = "LAND";

const std::vector<typename Land::MetaData> Land::metaData_={
{"LAND_CD","std::string","varchar(3)",3,0,1,1},
{"AUFETIKETTE_CD","std::string","varchar(1)",1,0,0,0},
{"LAND","std::string","varchar(60)",60,0,0,0},
{"KURZCODE","std::string","varchar(5)",5,0,0,0},
{"PLZVORAUS_CD","std::string","varchar(1)",1,0,0,0},
{"VORWAHL","std::string","varchar(10)",10,0,0,0},
{"WAEHRUNGS_CD","std::string","varchar(3)",3,0,0,0},
{"INLAND_CD","std::string","varchar(1)",1,0,0,0},
{"VERSANDPRIORITAET_CD","std::string","decimal(2,0)",0,0,0,0},
{"RISIKOGRUPPE","std::string","decimal(1,0)",0,0,0,0},
{"RISKINDEX","double","double",8,0,0,0},
{"EU_LAND_CD","std::string","varchar(1)",1,0,0,0},
{"CRTDATUM","::trantor::Date","datetime",0,0,0,0},
{"CRTUSER","std::string","varchar(30)",30,0,0,0},
{"MUTDATUM","::trantor::Date","datetime",0,0,0,0},
{"MUTUSER","std::string","varchar(30)",30,0,0,0},
{"LOESCH_CD","std::string","varchar(1)",1,0,0,0},
{"LOESCHDATUM","::trantor::Date","datetime",0,0,0,0},
{"LOESCHUSER","std::string","varchar(30)",30,0,0,0},
{"FF_TAXCODE","std::string","varchar(20)",20,0,0,0},
{"FF_LANDCODE","std::string","varchar(20)",20,0,0,0},
{"ABGST_RELEVANT_CD","std::string","varchar(1)",1,0,0,0},
{"US_FATCA_LAND_CD","std::string","varchar(1)",1,0,0,0},
{"IGA_STATUS","double","double",8,0,0,0},
{"US_TERRITORY_CD","std::string","varchar(1)",1,0,0,0},
{"DESTINATION_CD","double","double",8,0,0,0},
{"AUFTEILUNG","std::string","varchar(30)",30,0,0,0},
{"STATFISCC_INLAND_CD","std::string","varchar(1)",1,0,0,0},
{"AEOI_REPORTABLE_CD","std::string","varchar(1)",1,0,0,0},
{"AEOI_REP_AGREEMENT_DATE","::trantor::Date","datetime",0,0,0,0},
{"AEOI_START_REPORTING_YEAR","::trantor::Date","datetime",0,0,0,0},
{"TIN_AVAILABLE_CD","std::string","varchar(1)",1,0,0,0},
{"JURISDICTION_OF_BANK_CD","std::string","varchar(1)",1,0,0,0},
{"AEOI_FIRST_YEAR_OF_REPORTING","::trantor::Date","datetime",0,0,0,0},
{"AEOI_REP_WIDER_APPROACH_CD","std::string","varchar(1)",1,0,0,0},
{"NAFTA_COUNTRY_CD","std::string","varchar(1)",1,0,0,0},
{"EEA_COUNTRY_CD","std::string","varchar(1)",1,0,0,0},
{"US_CDI_COUNTRY_CD","std::string","varchar(1)",1,0,0,0},
{"AEOI_PARTICIPATING_COUNTRY_CD","std::string","varchar(1)",1,0,0,0},
{"LAND_A3_CD","std::string","varchar(3)",3,0,0,0},
{"CDI_WITH_SWITZERLAND_CD","std::string","varchar(1)",1,0,0,0}
};
const std::string &Land::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Land::Land(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["LAND_CD"].isNull())
        {
            landCd_=std::make_shared<std::string>(r["LAND_CD"].as<std::string>());
        }
        if(!r["AUFETIKETTE_CD"].isNull())
        {
            aufetiketteCd_=std::make_shared<std::string>(r["AUFETIKETTE_CD"].as<std::string>());
        }
        if(!r["LAND"].isNull())
        {
            land_=std::make_shared<std::string>(r["LAND"].as<std::string>());
        }
        if(!r["KURZCODE"].isNull())
        {
            kurzcode_=std::make_shared<std::string>(r["KURZCODE"].as<std::string>());
        }
        if(!r["PLZVORAUS_CD"].isNull())
        {
            plzvorausCd_=std::make_shared<std::string>(r["PLZVORAUS_CD"].as<std::string>());
        }
        if(!r["VORWAHL"].isNull())
        {
            vorwahl_=std::make_shared<std::string>(r["VORWAHL"].as<std::string>());
        }
        if(!r["WAEHRUNGS_CD"].isNull())
        {
            waehrungsCd_=std::make_shared<std::string>(r["WAEHRUNGS_CD"].as<std::string>());
        }
        if(!r["INLAND_CD"].isNull())
        {
            inlandCd_=std::make_shared<std::string>(r["INLAND_CD"].as<std::string>());
        }
        if(!r["VERSANDPRIORITAET_CD"].isNull())
        {
            versandprioritaetCd_=std::make_shared<std::string>(r["VERSANDPRIORITAET_CD"].as<std::string>());
        }
        if(!r["RISIKOGRUPPE"].isNull())
        {
            risikogruppe_=std::make_shared<std::string>(r["RISIKOGRUPPE"].as<std::string>());
        }
        if(!r["RISKINDEX"].isNull())
        {
            riskindex_=std::make_shared<double>(r["RISKINDEX"].as<double>());
        }
        if(!r["EU_LAND_CD"].isNull())
        {
            euLandCd_=std::make_shared<std::string>(r["EU_LAND_CD"].as<std::string>());
        }
        if(!r["CRTDATUM"].isNull())
        {
            auto timeStr = r["CRTDATUM"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                crtdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["CRTUSER"].isNull())
        {
            crtuser_=std::make_shared<std::string>(r["CRTUSER"].as<std::string>());
        }
        if(!r["MUTDATUM"].isNull())
        {
            auto timeStr = r["MUTDATUM"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                mutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["MUTUSER"].isNull())
        {
            mutuser_=std::make_shared<std::string>(r["MUTUSER"].as<std::string>());
        }
        if(!r["LOESCH_CD"].isNull())
        {
            loeschCd_=std::make_shared<std::string>(r["LOESCH_CD"].as<std::string>());
        }
        if(!r["LOESCHDATUM"].isNull())
        {
            auto timeStr = r["LOESCHDATUM"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                loeschdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["LOESCHUSER"].isNull())
        {
            loeschuser_=std::make_shared<std::string>(r["LOESCHUSER"].as<std::string>());
        }
        if(!r["FF_TAXCODE"].isNull())
        {
            ffTaxcode_=std::make_shared<std::string>(r["FF_TAXCODE"].as<std::string>());
        }
        if(!r["FF_LANDCODE"].isNull())
        {
            ffLandcode_=std::make_shared<std::string>(r["FF_LANDCODE"].as<std::string>());
        }
        if(!r["ABGST_RELEVANT_CD"].isNull())
        {
            abgstRelevantCd_=std::make_shared<std::string>(r["ABGST_RELEVANT_CD"].as<std::string>());
        }
        if(!r["US_FATCA_LAND_CD"].isNull())
        {
            usFatcaLandCd_=std::make_shared<std::string>(r["US_FATCA_LAND_CD"].as<std::string>());
        }
        if(!r["IGA_STATUS"].isNull())
        {
            igaStatus_=std::make_shared<double>(r["IGA_STATUS"].as<double>());
        }
        if(!r["US_TERRITORY_CD"].isNull())
        {
            usTerritoryCd_=std::make_shared<std::string>(r["US_TERRITORY_CD"].as<std::string>());
        }
        if(!r["DESTINATION_CD"].isNull())
        {
            destinationCd_=std::make_shared<double>(r["DESTINATION_CD"].as<double>());
        }
        if(!r["AUFTEILUNG"].isNull())
        {
            aufteilung_=std::make_shared<std::string>(r["AUFTEILUNG"].as<std::string>());
        }
        if(!r["STATFISCC_INLAND_CD"].isNull())
        {
            statfisccInlandCd_=std::make_shared<std::string>(r["STATFISCC_INLAND_CD"].as<std::string>());
        }
        if(!r["AEOI_REPORTABLE_CD"].isNull())
        {
            aeoiReportableCd_=std::make_shared<std::string>(r["AEOI_REPORTABLE_CD"].as<std::string>());
        }
        if(!r["AEOI_REP_AGREEMENT_DATE"].isNull())
        {
            auto timeStr = r["AEOI_REP_AGREEMENT_DATE"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                aeoiRepAgreementDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["AEOI_START_REPORTING_YEAR"].isNull())
        {
            auto timeStr = r["AEOI_START_REPORTING_YEAR"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                aeoiStartReportingYear_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["TIN_AVAILABLE_CD"].isNull())
        {
            tinAvailableCd_=std::make_shared<std::string>(r["TIN_AVAILABLE_CD"].as<std::string>());
        }
        if(!r["JURISDICTION_OF_BANK_CD"].isNull())
        {
            jurisdictionOfBankCd_=std::make_shared<std::string>(r["JURISDICTION_OF_BANK_CD"].as<std::string>());
        }
        if(!r["AEOI_FIRST_YEAR_OF_REPORTING"].isNull())
        {
            auto timeStr = r["AEOI_FIRST_YEAR_OF_REPORTING"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                aeoiFirstYearOfReporting_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["AEOI_REP_WIDER_APPROACH_CD"].isNull())
        {
            aeoiRepWiderApproachCd_=std::make_shared<std::string>(r["AEOI_REP_WIDER_APPROACH_CD"].as<std::string>());
        }
        if(!r["NAFTA_COUNTRY_CD"].isNull())
        {
            naftaCountryCd_=std::make_shared<std::string>(r["NAFTA_COUNTRY_CD"].as<std::string>());
        }
        if(!r["EEA_COUNTRY_CD"].isNull())
        {
            eeaCountryCd_=std::make_shared<std::string>(r["EEA_COUNTRY_CD"].as<std::string>());
        }
        if(!r["US_CDI_COUNTRY_CD"].isNull())
        {
            usCdiCountryCd_=std::make_shared<std::string>(r["US_CDI_COUNTRY_CD"].as<std::string>());
        }
        if(!r["AEOI_PARTICIPATING_COUNTRY_CD"].isNull())
        {
            aeoiParticipatingCountryCd_=std::make_shared<std::string>(r["AEOI_PARTICIPATING_COUNTRY_CD"].as<std::string>());
        }
        if(!r["LAND_A3_CD"].isNull())
        {
            landA3Cd_=std::make_shared<std::string>(r["LAND_A3_CD"].as<std::string>());
        }
        if(!r["CDI_WITH_SWITZERLAND_CD"].isNull())
        {
            cdiWithSwitzerlandCd_=std::make_shared<std::string>(r["CDI_WITH_SWITZERLAND_CD"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 41 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            landCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            aufetiketteCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            land_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            kurzcode_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            plzvorausCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            vorwahl_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            waehrungsCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            inlandCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            versandprioritaetCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            risikogruppe_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            riskindex_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            euLandCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                crtdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            crtuser_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                mutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            mutuser_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            loeschCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                loeschdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            loeschuser_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            ffTaxcode_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            ffLandcode_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 21;
        if(!r[index].isNull())
        {
            abgstRelevantCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 22;
        if(!r[index].isNull())
        {
            usFatcaLandCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 23;
        if(!r[index].isNull())
        {
            igaStatus_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 24;
        if(!r[index].isNull())
        {
            usTerritoryCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 25;
        if(!r[index].isNull())
        {
            destinationCd_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 26;
        if(!r[index].isNull())
        {
            aufteilung_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 27;
        if(!r[index].isNull())
        {
            statfisccInlandCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 28;
        if(!r[index].isNull())
        {
            aeoiReportableCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 29;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                aeoiRepAgreementDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 30;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                aeoiStartReportingYear_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 31;
        if(!r[index].isNull())
        {
            tinAvailableCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 32;
        if(!r[index].isNull())
        {
            jurisdictionOfBankCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 33;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                aeoiFirstYearOfReporting_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 34;
        if(!r[index].isNull())
        {
            aeoiRepWiderApproachCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 35;
        if(!r[index].isNull())
        {
            naftaCountryCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 36;
        if(!r[index].isNull())
        {
            eeaCountryCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 37;
        if(!r[index].isNull())
        {
            usCdiCountryCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 38;
        if(!r[index].isNull())
        {
            aeoiParticipatingCountryCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 39;
        if(!r[index].isNull())
        {
            landA3Cd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 40;
        if(!r[index].isNull())
        {
            cdiWithSwitzerlandCd_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Land::Land(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 41)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            landCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            aufetiketteCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            land_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            kurzcode_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            plzvorausCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            vorwahl_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            waehrungsCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            inlandCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            versandprioritaetCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            risikogruppe_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            riskindex_=std::make_shared<double>(pJson[pMasqueradingVector[10]].asDouble());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            euLandCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[12]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                crtdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            crtuser_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[14]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                mutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            mutuser_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            loeschCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[17]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                loeschdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            loeschuser_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            ffTaxcode_=std::make_shared<std::string>(pJson[pMasqueradingVector[19]].asString());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            ffLandcode_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            abgstRelevantCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[21]].asString());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            usFatcaLandCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[22]].asString());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            igaStatus_=std::make_shared<double>(pJson[pMasqueradingVector[23]].asDouble());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            usTerritoryCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[24]].asString());
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            destinationCd_=std::make_shared<double>(pJson[pMasqueradingVector[25]].asDouble());
        }
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        dirtyFlag_[26] = true;
        if(!pJson[pMasqueradingVector[26]].isNull())
        {
            aufteilung_=std::make_shared<std::string>(pJson[pMasqueradingVector[26]].asString());
        }
    }
    if(!pMasqueradingVector[27].empty() && pJson.isMember(pMasqueradingVector[27]))
    {
        dirtyFlag_[27] = true;
        if(!pJson[pMasqueradingVector[27]].isNull())
        {
            statfisccInlandCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[27]].asString());
        }
    }
    if(!pMasqueradingVector[28].empty() && pJson.isMember(pMasqueradingVector[28]))
    {
        dirtyFlag_[28] = true;
        if(!pJson[pMasqueradingVector[28]].isNull())
        {
            aeoiReportableCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[28]].asString());
        }
    }
    if(!pMasqueradingVector[29].empty() && pJson.isMember(pMasqueradingVector[29]))
    {
        dirtyFlag_[29] = true;
        if(!pJson[pMasqueradingVector[29]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[29]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                aeoiRepAgreementDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[30].empty() && pJson.isMember(pMasqueradingVector[30]))
    {
        dirtyFlag_[30] = true;
        if(!pJson[pMasqueradingVector[30]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[30]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                aeoiStartReportingYear_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[31].empty() && pJson.isMember(pMasqueradingVector[31]))
    {
        dirtyFlag_[31] = true;
        if(!pJson[pMasqueradingVector[31]].isNull())
        {
            tinAvailableCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[31]].asString());
        }
    }
    if(!pMasqueradingVector[32].empty() && pJson.isMember(pMasqueradingVector[32]))
    {
        dirtyFlag_[32] = true;
        if(!pJson[pMasqueradingVector[32]].isNull())
        {
            jurisdictionOfBankCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[32]].asString());
        }
    }
    if(!pMasqueradingVector[33].empty() && pJson.isMember(pMasqueradingVector[33]))
    {
        dirtyFlag_[33] = true;
        if(!pJson[pMasqueradingVector[33]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[33]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                aeoiFirstYearOfReporting_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[34].empty() && pJson.isMember(pMasqueradingVector[34]))
    {
        dirtyFlag_[34] = true;
        if(!pJson[pMasqueradingVector[34]].isNull())
        {
            aeoiRepWiderApproachCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[34]].asString());
        }
    }
    if(!pMasqueradingVector[35].empty() && pJson.isMember(pMasqueradingVector[35]))
    {
        dirtyFlag_[35] = true;
        if(!pJson[pMasqueradingVector[35]].isNull())
        {
            naftaCountryCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[35]].asString());
        }
    }
    if(!pMasqueradingVector[36].empty() && pJson.isMember(pMasqueradingVector[36]))
    {
        dirtyFlag_[36] = true;
        if(!pJson[pMasqueradingVector[36]].isNull())
        {
            eeaCountryCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[36]].asString());
        }
    }
    if(!pMasqueradingVector[37].empty() && pJson.isMember(pMasqueradingVector[37]))
    {
        dirtyFlag_[37] = true;
        if(!pJson[pMasqueradingVector[37]].isNull())
        {
            usCdiCountryCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[37]].asString());
        }
    }
    if(!pMasqueradingVector[38].empty() && pJson.isMember(pMasqueradingVector[38]))
    {
        dirtyFlag_[38] = true;
        if(!pJson[pMasqueradingVector[38]].isNull())
        {
            aeoiParticipatingCountryCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[38]].asString());
        }
    }
    if(!pMasqueradingVector[39].empty() && pJson.isMember(pMasqueradingVector[39]))
    {
        dirtyFlag_[39] = true;
        if(!pJson[pMasqueradingVector[39]].isNull())
        {
            landA3Cd_=std::make_shared<std::string>(pJson[pMasqueradingVector[39]].asString());
        }
    }
    if(!pMasqueradingVector[40].empty() && pJson.isMember(pMasqueradingVector[40]))
    {
        dirtyFlag_[40] = true;
        if(!pJson[pMasqueradingVector[40]].isNull())
        {
            cdiWithSwitzerlandCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[40]].asString());
        }
    }
}

Land::Land(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("LAND_CD"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["LAND_CD"].isNull())
        {
            landCd_=std::make_shared<std::string>(pJson["LAND_CD"].asString());
        }
    }
    if(pJson.isMember("AUFETIKETTE_CD"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["AUFETIKETTE_CD"].isNull())
        {
            aufetiketteCd_=std::make_shared<std::string>(pJson["AUFETIKETTE_CD"].asString());
        }
    }
    if(pJson.isMember("LAND"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["LAND"].isNull())
        {
            land_=std::make_shared<std::string>(pJson["LAND"].asString());
        }
    }
    if(pJson.isMember("KURZCODE"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["KURZCODE"].isNull())
        {
            kurzcode_=std::make_shared<std::string>(pJson["KURZCODE"].asString());
        }
    }
    if(pJson.isMember("PLZVORAUS_CD"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["PLZVORAUS_CD"].isNull())
        {
            plzvorausCd_=std::make_shared<std::string>(pJson["PLZVORAUS_CD"].asString());
        }
    }
    if(pJson.isMember("VORWAHL"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["VORWAHL"].isNull())
        {
            vorwahl_=std::make_shared<std::string>(pJson["VORWAHL"].asString());
        }
    }
    if(pJson.isMember("WAEHRUNGS_CD"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["WAEHRUNGS_CD"].isNull())
        {
            waehrungsCd_=std::make_shared<std::string>(pJson["WAEHRUNGS_CD"].asString());
        }
    }
    if(pJson.isMember("INLAND_CD"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["INLAND_CD"].isNull())
        {
            inlandCd_=std::make_shared<std::string>(pJson["INLAND_CD"].asString());
        }
    }
    if(pJson.isMember("VERSANDPRIORITAET_CD"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["VERSANDPRIORITAET_CD"].isNull())
        {
            versandprioritaetCd_=std::make_shared<std::string>(pJson["VERSANDPRIORITAET_CD"].asString());
        }
    }
    if(pJson.isMember("RISIKOGRUPPE"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["RISIKOGRUPPE"].isNull())
        {
            risikogruppe_=std::make_shared<std::string>(pJson["RISIKOGRUPPE"].asString());
        }
    }
    if(pJson.isMember("RISKINDEX"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["RISKINDEX"].isNull())
        {
            riskindex_=std::make_shared<double>(pJson["RISKINDEX"].asDouble());
        }
    }
    if(pJson.isMember("EU_LAND_CD"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["EU_LAND_CD"].isNull())
        {
            euLandCd_=std::make_shared<std::string>(pJson["EU_LAND_CD"].asString());
        }
    }
    if(pJson.isMember("CRTDATUM"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["CRTDATUM"].isNull())
        {
            auto timeStr = pJson["CRTDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                crtdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("CRTUSER"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["CRTUSER"].isNull())
        {
            crtuser_=std::make_shared<std::string>(pJson["CRTUSER"].asString());
        }
    }
    if(pJson.isMember("MUTDATUM"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["MUTDATUM"].isNull())
        {
            auto timeStr = pJson["MUTDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                mutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("MUTUSER"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["MUTUSER"].isNull())
        {
            mutuser_=std::make_shared<std::string>(pJson["MUTUSER"].asString());
        }
    }
    if(pJson.isMember("LOESCH_CD"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["LOESCH_CD"].isNull())
        {
            loeschCd_=std::make_shared<std::string>(pJson["LOESCH_CD"].asString());
        }
    }
    if(pJson.isMember("LOESCHDATUM"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["LOESCHDATUM"].isNull())
        {
            auto timeStr = pJson["LOESCHDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                loeschdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("LOESCHUSER"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["LOESCHUSER"].isNull())
        {
            loeschuser_=std::make_shared<std::string>(pJson["LOESCHUSER"].asString());
        }
    }
    if(pJson.isMember("FF_TAXCODE"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["FF_TAXCODE"].isNull())
        {
            ffTaxcode_=std::make_shared<std::string>(pJson["FF_TAXCODE"].asString());
        }
    }
    if(pJson.isMember("FF_LANDCODE"))
    {
        dirtyFlag_[20]=true;
        if(!pJson["FF_LANDCODE"].isNull())
        {
            ffLandcode_=std::make_shared<std::string>(pJson["FF_LANDCODE"].asString());
        }
    }
    if(pJson.isMember("ABGST_RELEVANT_CD"))
    {
        dirtyFlag_[21]=true;
        if(!pJson["ABGST_RELEVANT_CD"].isNull())
        {
            abgstRelevantCd_=std::make_shared<std::string>(pJson["ABGST_RELEVANT_CD"].asString());
        }
    }
    if(pJson.isMember("US_FATCA_LAND_CD"))
    {
        dirtyFlag_[22]=true;
        if(!pJson["US_FATCA_LAND_CD"].isNull())
        {
            usFatcaLandCd_=std::make_shared<std::string>(pJson["US_FATCA_LAND_CD"].asString());
        }
    }
    if(pJson.isMember("IGA_STATUS"))
    {
        dirtyFlag_[23]=true;
        if(!pJson["IGA_STATUS"].isNull())
        {
            igaStatus_=std::make_shared<double>(pJson["IGA_STATUS"].asDouble());
        }
    }
    if(pJson.isMember("US_TERRITORY_CD"))
    {
        dirtyFlag_[24]=true;
        if(!pJson["US_TERRITORY_CD"].isNull())
        {
            usTerritoryCd_=std::make_shared<std::string>(pJson["US_TERRITORY_CD"].asString());
        }
    }
    if(pJson.isMember("DESTINATION_CD"))
    {
        dirtyFlag_[25]=true;
        if(!pJson["DESTINATION_CD"].isNull())
        {
            destinationCd_=std::make_shared<double>(pJson["DESTINATION_CD"].asDouble());
        }
    }
    if(pJson.isMember("AUFTEILUNG"))
    {
        dirtyFlag_[26]=true;
        if(!pJson["AUFTEILUNG"].isNull())
        {
            aufteilung_=std::make_shared<std::string>(pJson["AUFTEILUNG"].asString());
        }
    }
    if(pJson.isMember("STATFISCC_INLAND_CD"))
    {
        dirtyFlag_[27]=true;
        if(!pJson["STATFISCC_INLAND_CD"].isNull())
        {
            statfisccInlandCd_=std::make_shared<std::string>(pJson["STATFISCC_INLAND_CD"].asString());
        }
    }
    if(pJson.isMember("AEOI_REPORTABLE_CD"))
    {
        dirtyFlag_[28]=true;
        if(!pJson["AEOI_REPORTABLE_CD"].isNull())
        {
            aeoiReportableCd_=std::make_shared<std::string>(pJson["AEOI_REPORTABLE_CD"].asString());
        }
    }
    if(pJson.isMember("AEOI_REP_AGREEMENT_DATE"))
    {
        dirtyFlag_[29]=true;
        if(!pJson["AEOI_REP_AGREEMENT_DATE"].isNull())
        {
            auto timeStr = pJson["AEOI_REP_AGREEMENT_DATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                aeoiRepAgreementDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("AEOI_START_REPORTING_YEAR"))
    {
        dirtyFlag_[30]=true;
        if(!pJson["AEOI_START_REPORTING_YEAR"].isNull())
        {
            auto timeStr = pJson["AEOI_START_REPORTING_YEAR"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                aeoiStartReportingYear_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("TIN_AVAILABLE_CD"))
    {
        dirtyFlag_[31]=true;
        if(!pJson["TIN_AVAILABLE_CD"].isNull())
        {
            tinAvailableCd_=std::make_shared<std::string>(pJson["TIN_AVAILABLE_CD"].asString());
        }
    }
    if(pJson.isMember("JURISDICTION_OF_BANK_CD"))
    {
        dirtyFlag_[32]=true;
        if(!pJson["JURISDICTION_OF_BANK_CD"].isNull())
        {
            jurisdictionOfBankCd_=std::make_shared<std::string>(pJson["JURISDICTION_OF_BANK_CD"].asString());
        }
    }
    if(pJson.isMember("AEOI_FIRST_YEAR_OF_REPORTING"))
    {
        dirtyFlag_[33]=true;
        if(!pJson["AEOI_FIRST_YEAR_OF_REPORTING"].isNull())
        {
            auto timeStr = pJson["AEOI_FIRST_YEAR_OF_REPORTING"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                aeoiFirstYearOfReporting_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("AEOI_REP_WIDER_APPROACH_CD"))
    {
        dirtyFlag_[34]=true;
        if(!pJson["AEOI_REP_WIDER_APPROACH_CD"].isNull())
        {
            aeoiRepWiderApproachCd_=std::make_shared<std::string>(pJson["AEOI_REP_WIDER_APPROACH_CD"].asString());
        }
    }
    if(pJson.isMember("NAFTA_COUNTRY_CD"))
    {
        dirtyFlag_[35]=true;
        if(!pJson["NAFTA_COUNTRY_CD"].isNull())
        {
            naftaCountryCd_=std::make_shared<std::string>(pJson["NAFTA_COUNTRY_CD"].asString());
        }
    }
    if(pJson.isMember("EEA_COUNTRY_CD"))
    {
        dirtyFlag_[36]=true;
        if(!pJson["EEA_COUNTRY_CD"].isNull())
        {
            eeaCountryCd_=std::make_shared<std::string>(pJson["EEA_COUNTRY_CD"].asString());
        }
    }
    if(pJson.isMember("US_CDI_COUNTRY_CD"))
    {
        dirtyFlag_[37]=true;
        if(!pJson["US_CDI_COUNTRY_CD"].isNull())
        {
            usCdiCountryCd_=std::make_shared<std::string>(pJson["US_CDI_COUNTRY_CD"].asString());
        }
    }
    if(pJson.isMember("AEOI_PARTICIPATING_COUNTRY_CD"))
    {
        dirtyFlag_[38]=true;
        if(!pJson["AEOI_PARTICIPATING_COUNTRY_CD"].isNull())
        {
            aeoiParticipatingCountryCd_=std::make_shared<std::string>(pJson["AEOI_PARTICIPATING_COUNTRY_CD"].asString());
        }
    }
    if(pJson.isMember("LAND_A3_CD"))
    {
        dirtyFlag_[39]=true;
        if(!pJson["LAND_A3_CD"].isNull())
        {
            landA3Cd_=std::make_shared<std::string>(pJson["LAND_A3_CD"].asString());
        }
    }
    if(pJson.isMember("CDI_WITH_SWITZERLAND_CD"))
    {
        dirtyFlag_[40]=true;
        if(!pJson["CDI_WITH_SWITZERLAND_CD"].isNull())
        {
            cdiWithSwitzerlandCd_=std::make_shared<std::string>(pJson["CDI_WITH_SWITZERLAND_CD"].asString());
        }
    }
}

void Land::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 41)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            landCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            aufetiketteCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            land_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            kurzcode_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            plzvorausCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            vorwahl_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            waehrungsCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            inlandCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            versandprioritaetCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            risikogruppe_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            riskindex_=std::make_shared<double>(pJson[pMasqueradingVector[10]].asDouble());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            euLandCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[12]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                crtdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            crtuser_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[14]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                mutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            mutuser_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            loeschCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[17]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                loeschdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            loeschuser_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            ffTaxcode_=std::make_shared<std::string>(pJson[pMasqueradingVector[19]].asString());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            ffLandcode_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            abgstRelevantCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[21]].asString());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            usFatcaLandCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[22]].asString());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            igaStatus_=std::make_shared<double>(pJson[pMasqueradingVector[23]].asDouble());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            usTerritoryCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[24]].asString());
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            destinationCd_=std::make_shared<double>(pJson[pMasqueradingVector[25]].asDouble());
        }
    }
    if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
    {
        dirtyFlag_[26] = true;
        if(!pJson[pMasqueradingVector[26]].isNull())
        {
            aufteilung_=std::make_shared<std::string>(pJson[pMasqueradingVector[26]].asString());
        }
    }
    if(!pMasqueradingVector[27].empty() && pJson.isMember(pMasqueradingVector[27]))
    {
        dirtyFlag_[27] = true;
        if(!pJson[pMasqueradingVector[27]].isNull())
        {
            statfisccInlandCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[27]].asString());
        }
    }
    if(!pMasqueradingVector[28].empty() && pJson.isMember(pMasqueradingVector[28]))
    {
        dirtyFlag_[28] = true;
        if(!pJson[pMasqueradingVector[28]].isNull())
        {
            aeoiReportableCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[28]].asString());
        }
    }
    if(!pMasqueradingVector[29].empty() && pJson.isMember(pMasqueradingVector[29]))
    {
        dirtyFlag_[29] = true;
        if(!pJson[pMasqueradingVector[29]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[29]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                aeoiRepAgreementDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[30].empty() && pJson.isMember(pMasqueradingVector[30]))
    {
        dirtyFlag_[30] = true;
        if(!pJson[pMasqueradingVector[30]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[30]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                aeoiStartReportingYear_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[31].empty() && pJson.isMember(pMasqueradingVector[31]))
    {
        dirtyFlag_[31] = true;
        if(!pJson[pMasqueradingVector[31]].isNull())
        {
            tinAvailableCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[31]].asString());
        }
    }
    if(!pMasqueradingVector[32].empty() && pJson.isMember(pMasqueradingVector[32]))
    {
        dirtyFlag_[32] = true;
        if(!pJson[pMasqueradingVector[32]].isNull())
        {
            jurisdictionOfBankCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[32]].asString());
        }
    }
    if(!pMasqueradingVector[33].empty() && pJson.isMember(pMasqueradingVector[33]))
    {
        dirtyFlag_[33] = true;
        if(!pJson[pMasqueradingVector[33]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[33]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                aeoiFirstYearOfReporting_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[34].empty() && pJson.isMember(pMasqueradingVector[34]))
    {
        dirtyFlag_[34] = true;
        if(!pJson[pMasqueradingVector[34]].isNull())
        {
            aeoiRepWiderApproachCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[34]].asString());
        }
    }
    if(!pMasqueradingVector[35].empty() && pJson.isMember(pMasqueradingVector[35]))
    {
        dirtyFlag_[35] = true;
        if(!pJson[pMasqueradingVector[35]].isNull())
        {
            naftaCountryCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[35]].asString());
        }
    }
    if(!pMasqueradingVector[36].empty() && pJson.isMember(pMasqueradingVector[36]))
    {
        dirtyFlag_[36] = true;
        if(!pJson[pMasqueradingVector[36]].isNull())
        {
            eeaCountryCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[36]].asString());
        }
    }
    if(!pMasqueradingVector[37].empty() && pJson.isMember(pMasqueradingVector[37]))
    {
        dirtyFlag_[37] = true;
        if(!pJson[pMasqueradingVector[37]].isNull())
        {
            usCdiCountryCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[37]].asString());
        }
    }
    if(!pMasqueradingVector[38].empty() && pJson.isMember(pMasqueradingVector[38]))
    {
        dirtyFlag_[38] = true;
        if(!pJson[pMasqueradingVector[38]].isNull())
        {
            aeoiParticipatingCountryCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[38]].asString());
        }
    }
    if(!pMasqueradingVector[39].empty() && pJson.isMember(pMasqueradingVector[39]))
    {
        dirtyFlag_[39] = true;
        if(!pJson[pMasqueradingVector[39]].isNull())
        {
            landA3Cd_=std::make_shared<std::string>(pJson[pMasqueradingVector[39]].asString());
        }
    }
    if(!pMasqueradingVector[40].empty() && pJson.isMember(pMasqueradingVector[40]))
    {
        dirtyFlag_[40] = true;
        if(!pJson[pMasqueradingVector[40]].isNull())
        {
            cdiWithSwitzerlandCd_=std::make_shared<std::string>(pJson[pMasqueradingVector[40]].asString());
        }
    }
}

void Land::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("LAND_CD"))
    {
        if(!pJson["LAND_CD"].isNull())
        {
            landCd_=std::make_shared<std::string>(pJson["LAND_CD"].asString());
        }
    }
    if(pJson.isMember("AUFETIKETTE_CD"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["AUFETIKETTE_CD"].isNull())
        {
            aufetiketteCd_=std::make_shared<std::string>(pJson["AUFETIKETTE_CD"].asString());
        }
    }
    if(pJson.isMember("LAND"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["LAND"].isNull())
        {
            land_=std::make_shared<std::string>(pJson["LAND"].asString());
        }
    }
    if(pJson.isMember("KURZCODE"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["KURZCODE"].isNull())
        {
            kurzcode_=std::make_shared<std::string>(pJson["KURZCODE"].asString());
        }
    }
    if(pJson.isMember("PLZVORAUS_CD"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["PLZVORAUS_CD"].isNull())
        {
            plzvorausCd_=std::make_shared<std::string>(pJson["PLZVORAUS_CD"].asString());
        }
    }
    if(pJson.isMember("VORWAHL"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["VORWAHL"].isNull())
        {
            vorwahl_=std::make_shared<std::string>(pJson["VORWAHL"].asString());
        }
    }
    if(pJson.isMember("WAEHRUNGS_CD"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["WAEHRUNGS_CD"].isNull())
        {
            waehrungsCd_=std::make_shared<std::string>(pJson["WAEHRUNGS_CD"].asString());
        }
    }
    if(pJson.isMember("INLAND_CD"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["INLAND_CD"].isNull())
        {
            inlandCd_=std::make_shared<std::string>(pJson["INLAND_CD"].asString());
        }
    }
    if(pJson.isMember("VERSANDPRIORITAET_CD"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["VERSANDPRIORITAET_CD"].isNull())
        {
            versandprioritaetCd_=std::make_shared<std::string>(pJson["VERSANDPRIORITAET_CD"].asString());
        }
    }
    if(pJson.isMember("RISIKOGRUPPE"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["RISIKOGRUPPE"].isNull())
        {
            risikogruppe_=std::make_shared<std::string>(pJson["RISIKOGRUPPE"].asString());
        }
    }
    if(pJson.isMember("RISKINDEX"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["RISKINDEX"].isNull())
        {
            riskindex_=std::make_shared<double>(pJson["RISKINDEX"].asDouble());
        }
    }
    if(pJson.isMember("EU_LAND_CD"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["EU_LAND_CD"].isNull())
        {
            euLandCd_=std::make_shared<std::string>(pJson["EU_LAND_CD"].asString());
        }
    }
    if(pJson.isMember("CRTDATUM"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["CRTDATUM"].isNull())
        {
            auto timeStr = pJson["CRTDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                crtdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("CRTUSER"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["CRTUSER"].isNull())
        {
            crtuser_=std::make_shared<std::string>(pJson["CRTUSER"].asString());
        }
    }
    if(pJson.isMember("MUTDATUM"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["MUTDATUM"].isNull())
        {
            auto timeStr = pJson["MUTDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                mutdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("MUTUSER"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["MUTUSER"].isNull())
        {
            mutuser_=std::make_shared<std::string>(pJson["MUTUSER"].asString());
        }
    }
    if(pJson.isMember("LOESCH_CD"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["LOESCH_CD"].isNull())
        {
            loeschCd_=std::make_shared<std::string>(pJson["LOESCH_CD"].asString());
        }
    }
    if(pJson.isMember("LOESCHDATUM"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["LOESCHDATUM"].isNull())
        {
            auto timeStr = pJson["LOESCHDATUM"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                loeschdatum_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("LOESCHUSER"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["LOESCHUSER"].isNull())
        {
            loeschuser_=std::make_shared<std::string>(pJson["LOESCHUSER"].asString());
        }
    }
    if(pJson.isMember("FF_TAXCODE"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["FF_TAXCODE"].isNull())
        {
            ffTaxcode_=std::make_shared<std::string>(pJson["FF_TAXCODE"].asString());
        }
    }
    if(pJson.isMember("FF_LANDCODE"))
    {
        dirtyFlag_[20] = true;
        if(!pJson["FF_LANDCODE"].isNull())
        {
            ffLandcode_=std::make_shared<std::string>(pJson["FF_LANDCODE"].asString());
        }
    }
    if(pJson.isMember("ABGST_RELEVANT_CD"))
    {
        dirtyFlag_[21] = true;
        if(!pJson["ABGST_RELEVANT_CD"].isNull())
        {
            abgstRelevantCd_=std::make_shared<std::string>(pJson["ABGST_RELEVANT_CD"].asString());
        }
    }
    if(pJson.isMember("US_FATCA_LAND_CD"))
    {
        dirtyFlag_[22] = true;
        if(!pJson["US_FATCA_LAND_CD"].isNull())
        {
            usFatcaLandCd_=std::make_shared<std::string>(pJson["US_FATCA_LAND_CD"].asString());
        }
    }
    if(pJson.isMember("IGA_STATUS"))
    {
        dirtyFlag_[23] = true;
        if(!pJson["IGA_STATUS"].isNull())
        {
            igaStatus_=std::make_shared<double>(pJson["IGA_STATUS"].asDouble());
        }
    }
    if(pJson.isMember("US_TERRITORY_CD"))
    {
        dirtyFlag_[24] = true;
        if(!pJson["US_TERRITORY_CD"].isNull())
        {
            usTerritoryCd_=std::make_shared<std::string>(pJson["US_TERRITORY_CD"].asString());
        }
    }
    if(pJson.isMember("DESTINATION_CD"))
    {
        dirtyFlag_[25] = true;
        if(!pJson["DESTINATION_CD"].isNull())
        {
            destinationCd_=std::make_shared<double>(pJson["DESTINATION_CD"].asDouble());
        }
    }
    if(pJson.isMember("AUFTEILUNG"))
    {
        dirtyFlag_[26] = true;
        if(!pJson["AUFTEILUNG"].isNull())
        {
            aufteilung_=std::make_shared<std::string>(pJson["AUFTEILUNG"].asString());
        }
    }
    if(pJson.isMember("STATFISCC_INLAND_CD"))
    {
        dirtyFlag_[27] = true;
        if(!pJson["STATFISCC_INLAND_CD"].isNull())
        {
            statfisccInlandCd_=std::make_shared<std::string>(pJson["STATFISCC_INLAND_CD"].asString());
        }
    }
    if(pJson.isMember("AEOI_REPORTABLE_CD"))
    {
        dirtyFlag_[28] = true;
        if(!pJson["AEOI_REPORTABLE_CD"].isNull())
        {
            aeoiReportableCd_=std::make_shared<std::string>(pJson["AEOI_REPORTABLE_CD"].asString());
        }
    }
    if(pJson.isMember("AEOI_REP_AGREEMENT_DATE"))
    {
        dirtyFlag_[29] = true;
        if(!pJson["AEOI_REP_AGREEMENT_DATE"].isNull())
        {
            auto timeStr = pJson["AEOI_REP_AGREEMENT_DATE"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                aeoiRepAgreementDate_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("AEOI_START_REPORTING_YEAR"))
    {
        dirtyFlag_[30] = true;
        if(!pJson["AEOI_START_REPORTING_YEAR"].isNull())
        {
            auto timeStr = pJson["AEOI_START_REPORTING_YEAR"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                aeoiStartReportingYear_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("TIN_AVAILABLE_CD"))
    {
        dirtyFlag_[31] = true;
        if(!pJson["TIN_AVAILABLE_CD"].isNull())
        {
            tinAvailableCd_=std::make_shared<std::string>(pJson["TIN_AVAILABLE_CD"].asString());
        }
    }
    if(pJson.isMember("JURISDICTION_OF_BANK_CD"))
    {
        dirtyFlag_[32] = true;
        if(!pJson["JURISDICTION_OF_BANK_CD"].isNull())
        {
            jurisdictionOfBankCd_=std::make_shared<std::string>(pJson["JURISDICTION_OF_BANK_CD"].asString());
        }
    }
    if(pJson.isMember("AEOI_FIRST_YEAR_OF_REPORTING"))
    {
        dirtyFlag_[33] = true;
        if(!pJson["AEOI_FIRST_YEAR_OF_REPORTING"].isNull())
        {
            auto timeStr = pJson["AEOI_FIRST_YEAR_OF_REPORTING"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                aeoiFirstYearOfReporting_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("AEOI_REP_WIDER_APPROACH_CD"))
    {
        dirtyFlag_[34] = true;
        if(!pJson["AEOI_REP_WIDER_APPROACH_CD"].isNull())
        {
            aeoiRepWiderApproachCd_=std::make_shared<std::string>(pJson["AEOI_REP_WIDER_APPROACH_CD"].asString());
        }
    }
    if(pJson.isMember("NAFTA_COUNTRY_CD"))
    {
        dirtyFlag_[35] = true;
        if(!pJson["NAFTA_COUNTRY_CD"].isNull())
        {
            naftaCountryCd_=std::make_shared<std::string>(pJson["NAFTA_COUNTRY_CD"].asString());
        }
    }
    if(pJson.isMember("EEA_COUNTRY_CD"))
    {
        dirtyFlag_[36] = true;
        if(!pJson["EEA_COUNTRY_CD"].isNull())
        {
            eeaCountryCd_=std::make_shared<std::string>(pJson["EEA_COUNTRY_CD"].asString());
        }
    }
    if(pJson.isMember("US_CDI_COUNTRY_CD"))
    {
        dirtyFlag_[37] = true;
        if(!pJson["US_CDI_COUNTRY_CD"].isNull())
        {
            usCdiCountryCd_=std::make_shared<std::string>(pJson["US_CDI_COUNTRY_CD"].asString());
        }
    }
    if(pJson.isMember("AEOI_PARTICIPATING_COUNTRY_CD"))
    {
        dirtyFlag_[38] = true;
        if(!pJson["AEOI_PARTICIPATING_COUNTRY_CD"].isNull())
        {
            aeoiParticipatingCountryCd_=std::make_shared<std::string>(pJson["AEOI_PARTICIPATING_COUNTRY_CD"].asString());
        }
    }
    if(pJson.isMember("LAND_A3_CD"))
    {
        dirtyFlag_[39] = true;
        if(!pJson["LAND_A3_CD"].isNull())
        {
            landA3Cd_=std::make_shared<std::string>(pJson["LAND_A3_CD"].asString());
        }
    }
    if(pJson.isMember("CDI_WITH_SWITZERLAND_CD"))
    {
        dirtyFlag_[40] = true;
        if(!pJson["CDI_WITH_SWITZERLAND_CD"].isNull())
        {
            cdiWithSwitzerlandCd_=std::make_shared<std::string>(pJson["CDI_WITH_SWITZERLAND_CD"].asString());
        }
    }
}

const std::string &Land::getValueOfLandCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(landCd_)
        return *landCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getLandCd() const noexcept
{
    return landCd_;
}
void Land::setLandCd(const std::string &pLandCd) noexcept
{
    landCd_ = std::make_shared<std::string>(pLandCd);
    dirtyFlag_[0] = true;
}
void Land::setLandCd(std::string &&pLandCd) noexcept
{
    landCd_ = std::make_shared<std::string>(std::move(pLandCd));
    dirtyFlag_[0] = true;
}
const typename Land::PrimaryKeyType & Land::getPrimaryKey() const
{
    assert(landCd_);
    return *landCd_;
}

const std::string &Land::getValueOfAufetiketteCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(aufetiketteCd_)
        return *aufetiketteCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getAufetiketteCd() const noexcept
{
    return aufetiketteCd_;
}
void Land::setAufetiketteCd(const std::string &pAufetiketteCd) noexcept
{
    aufetiketteCd_ = std::make_shared<std::string>(pAufetiketteCd);
    dirtyFlag_[1] = true;
}
void Land::setAufetiketteCd(std::string &&pAufetiketteCd) noexcept
{
    aufetiketteCd_ = std::make_shared<std::string>(std::move(pAufetiketteCd));
    dirtyFlag_[1] = true;
}
void Land::setAufetiketteCdToNull() noexcept
{
    aufetiketteCd_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Land::getValueOfLand() const noexcept
{
    const static std::string defaultValue = std::string();
    if(land_)
        return *land_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getLand() const noexcept
{
    return land_;
}
void Land::setLand(const std::string &pLand) noexcept
{
    land_ = std::make_shared<std::string>(pLand);
    dirtyFlag_[2] = true;
}
void Land::setLand(std::string &&pLand) noexcept
{
    land_ = std::make_shared<std::string>(std::move(pLand));
    dirtyFlag_[2] = true;
}
void Land::setLandToNull() noexcept
{
    land_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Land::getValueOfKurzcode() const noexcept
{
    const static std::string defaultValue = std::string();
    if(kurzcode_)
        return *kurzcode_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getKurzcode() const noexcept
{
    return kurzcode_;
}
void Land::setKurzcode(const std::string &pKurzcode) noexcept
{
    kurzcode_ = std::make_shared<std::string>(pKurzcode);
    dirtyFlag_[3] = true;
}
void Land::setKurzcode(std::string &&pKurzcode) noexcept
{
    kurzcode_ = std::make_shared<std::string>(std::move(pKurzcode));
    dirtyFlag_[3] = true;
}
void Land::setKurzcodeToNull() noexcept
{
    kurzcode_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Land::getValueOfPlzvorausCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(plzvorausCd_)
        return *plzvorausCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getPlzvorausCd() const noexcept
{
    return plzvorausCd_;
}
void Land::setPlzvorausCd(const std::string &pPlzvorausCd) noexcept
{
    plzvorausCd_ = std::make_shared<std::string>(pPlzvorausCd);
    dirtyFlag_[4] = true;
}
void Land::setPlzvorausCd(std::string &&pPlzvorausCd) noexcept
{
    plzvorausCd_ = std::make_shared<std::string>(std::move(pPlzvorausCd));
    dirtyFlag_[4] = true;
}
void Land::setPlzvorausCdToNull() noexcept
{
    plzvorausCd_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Land::getValueOfVorwahl() const noexcept
{
    const static std::string defaultValue = std::string();
    if(vorwahl_)
        return *vorwahl_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getVorwahl() const noexcept
{
    return vorwahl_;
}
void Land::setVorwahl(const std::string &pVorwahl) noexcept
{
    vorwahl_ = std::make_shared<std::string>(pVorwahl);
    dirtyFlag_[5] = true;
}
void Land::setVorwahl(std::string &&pVorwahl) noexcept
{
    vorwahl_ = std::make_shared<std::string>(std::move(pVorwahl));
    dirtyFlag_[5] = true;
}
void Land::setVorwahlToNull() noexcept
{
    vorwahl_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Land::getValueOfWaehrungsCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(waehrungsCd_)
        return *waehrungsCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getWaehrungsCd() const noexcept
{
    return waehrungsCd_;
}
void Land::setWaehrungsCd(const std::string &pWaehrungsCd) noexcept
{
    waehrungsCd_ = std::make_shared<std::string>(pWaehrungsCd);
    dirtyFlag_[6] = true;
}
void Land::setWaehrungsCd(std::string &&pWaehrungsCd) noexcept
{
    waehrungsCd_ = std::make_shared<std::string>(std::move(pWaehrungsCd));
    dirtyFlag_[6] = true;
}
void Land::setWaehrungsCdToNull() noexcept
{
    waehrungsCd_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Land::getValueOfInlandCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(inlandCd_)
        return *inlandCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getInlandCd() const noexcept
{
    return inlandCd_;
}
void Land::setInlandCd(const std::string &pInlandCd) noexcept
{
    inlandCd_ = std::make_shared<std::string>(pInlandCd);
    dirtyFlag_[7] = true;
}
void Land::setInlandCd(std::string &&pInlandCd) noexcept
{
    inlandCd_ = std::make_shared<std::string>(std::move(pInlandCd));
    dirtyFlag_[7] = true;
}
void Land::setInlandCdToNull() noexcept
{
    inlandCd_.reset();
    dirtyFlag_[7] = true;
}

const std::string &Land::getValueOfVersandprioritaetCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(versandprioritaetCd_)
        return *versandprioritaetCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getVersandprioritaetCd() const noexcept
{
    return versandprioritaetCd_;
}
void Land::setVersandprioritaetCd(const std::string &pVersandprioritaetCd) noexcept
{
    versandprioritaetCd_ = std::make_shared<std::string>(pVersandprioritaetCd);
    dirtyFlag_[8] = true;
}
void Land::setVersandprioritaetCd(std::string &&pVersandprioritaetCd) noexcept
{
    versandprioritaetCd_ = std::make_shared<std::string>(std::move(pVersandprioritaetCd));
    dirtyFlag_[8] = true;
}
void Land::setVersandprioritaetCdToNull() noexcept
{
    versandprioritaetCd_.reset();
    dirtyFlag_[8] = true;
}

const std::string &Land::getValueOfRisikogruppe() const noexcept
{
    const static std::string defaultValue = std::string();
    if(risikogruppe_)
        return *risikogruppe_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getRisikogruppe() const noexcept
{
    return risikogruppe_;
}
void Land::setRisikogruppe(const std::string &pRisikogruppe) noexcept
{
    risikogruppe_ = std::make_shared<std::string>(pRisikogruppe);
    dirtyFlag_[9] = true;
}
void Land::setRisikogruppe(std::string &&pRisikogruppe) noexcept
{
    risikogruppe_ = std::make_shared<std::string>(std::move(pRisikogruppe));
    dirtyFlag_[9] = true;
}
void Land::setRisikogruppeToNull() noexcept
{
    risikogruppe_.reset();
    dirtyFlag_[9] = true;
}

const double &Land::getValueOfRiskindex() const noexcept
{
    const static double defaultValue = double();
    if(riskindex_)
        return *riskindex_;
    return defaultValue;
}
const std::shared_ptr<double> &Land::getRiskindex() const noexcept
{
    return riskindex_;
}
void Land::setRiskindex(const double &pRiskindex) noexcept
{
    riskindex_ = std::make_shared<double>(pRiskindex);
    dirtyFlag_[10] = true;
}
void Land::setRiskindexToNull() noexcept
{
    riskindex_.reset();
    dirtyFlag_[10] = true;
}

const std::string &Land::getValueOfEuLandCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(euLandCd_)
        return *euLandCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getEuLandCd() const noexcept
{
    return euLandCd_;
}
void Land::setEuLandCd(const std::string &pEuLandCd) noexcept
{
    euLandCd_ = std::make_shared<std::string>(pEuLandCd);
    dirtyFlag_[11] = true;
}
void Land::setEuLandCd(std::string &&pEuLandCd) noexcept
{
    euLandCd_ = std::make_shared<std::string>(std::move(pEuLandCd));
    dirtyFlag_[11] = true;
}
void Land::setEuLandCdToNull() noexcept
{
    euLandCd_.reset();
    dirtyFlag_[11] = true;
}

const ::trantor::Date &Land::getValueOfCrtdatum() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(crtdatum_)
        return *crtdatum_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Land::getCrtdatum() const noexcept
{
    return crtdatum_;
}
void Land::setCrtdatum(const ::trantor::Date &pCrtdatum) noexcept
{
    crtdatum_ = std::make_shared<::trantor::Date>(pCrtdatum);
    dirtyFlag_[12] = true;
}
void Land::setCrtdatumToNull() noexcept
{
    crtdatum_.reset();
    dirtyFlag_[12] = true;
}

const std::string &Land::getValueOfCrtuser() const noexcept
{
    const static std::string defaultValue = std::string();
    if(crtuser_)
        return *crtuser_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getCrtuser() const noexcept
{
    return crtuser_;
}
void Land::setCrtuser(const std::string &pCrtuser) noexcept
{
    crtuser_ = std::make_shared<std::string>(pCrtuser);
    dirtyFlag_[13] = true;
}
void Land::setCrtuser(std::string &&pCrtuser) noexcept
{
    crtuser_ = std::make_shared<std::string>(std::move(pCrtuser));
    dirtyFlag_[13] = true;
}
void Land::setCrtuserToNull() noexcept
{
    crtuser_.reset();
    dirtyFlag_[13] = true;
}

const ::trantor::Date &Land::getValueOfMutdatum() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(mutdatum_)
        return *mutdatum_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Land::getMutdatum() const noexcept
{
    return mutdatum_;
}
void Land::setMutdatum(const ::trantor::Date &pMutdatum) noexcept
{
    mutdatum_ = std::make_shared<::trantor::Date>(pMutdatum);
    dirtyFlag_[14] = true;
}
void Land::setMutdatumToNull() noexcept
{
    mutdatum_.reset();
    dirtyFlag_[14] = true;
}

const std::string &Land::getValueOfMutuser() const noexcept
{
    const static std::string defaultValue = std::string();
    if(mutuser_)
        return *mutuser_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getMutuser() const noexcept
{
    return mutuser_;
}
void Land::setMutuser(const std::string &pMutuser) noexcept
{
    mutuser_ = std::make_shared<std::string>(pMutuser);
    dirtyFlag_[15] = true;
}
void Land::setMutuser(std::string &&pMutuser) noexcept
{
    mutuser_ = std::make_shared<std::string>(std::move(pMutuser));
    dirtyFlag_[15] = true;
}
void Land::setMutuserToNull() noexcept
{
    mutuser_.reset();
    dirtyFlag_[15] = true;
}

const std::string &Land::getValueOfLoeschCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(loeschCd_)
        return *loeschCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getLoeschCd() const noexcept
{
    return loeschCd_;
}
void Land::setLoeschCd(const std::string &pLoeschCd) noexcept
{
    loeschCd_ = std::make_shared<std::string>(pLoeschCd);
    dirtyFlag_[16] = true;
}
void Land::setLoeschCd(std::string &&pLoeschCd) noexcept
{
    loeschCd_ = std::make_shared<std::string>(std::move(pLoeschCd));
    dirtyFlag_[16] = true;
}
void Land::setLoeschCdToNull() noexcept
{
    loeschCd_.reset();
    dirtyFlag_[16] = true;
}

const ::trantor::Date &Land::getValueOfLoeschdatum() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(loeschdatum_)
        return *loeschdatum_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Land::getLoeschdatum() const noexcept
{
    return loeschdatum_;
}
void Land::setLoeschdatum(const ::trantor::Date &pLoeschdatum) noexcept
{
    loeschdatum_ = std::make_shared<::trantor::Date>(pLoeschdatum);
    dirtyFlag_[17] = true;
}
void Land::setLoeschdatumToNull() noexcept
{
    loeschdatum_.reset();
    dirtyFlag_[17] = true;
}

const std::string &Land::getValueOfLoeschuser() const noexcept
{
    const static std::string defaultValue = std::string();
    if(loeschuser_)
        return *loeschuser_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getLoeschuser() const noexcept
{
    return loeschuser_;
}
void Land::setLoeschuser(const std::string &pLoeschuser) noexcept
{
    loeschuser_ = std::make_shared<std::string>(pLoeschuser);
    dirtyFlag_[18] = true;
}
void Land::setLoeschuser(std::string &&pLoeschuser) noexcept
{
    loeschuser_ = std::make_shared<std::string>(std::move(pLoeschuser));
    dirtyFlag_[18] = true;
}
void Land::setLoeschuserToNull() noexcept
{
    loeschuser_.reset();
    dirtyFlag_[18] = true;
}

const std::string &Land::getValueOfFfTaxcode() const noexcept
{
    const static std::string defaultValue = std::string();
    if(ffTaxcode_)
        return *ffTaxcode_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getFfTaxcode() const noexcept
{
    return ffTaxcode_;
}
void Land::setFfTaxcode(const std::string &pFfTaxcode) noexcept
{
    ffTaxcode_ = std::make_shared<std::string>(pFfTaxcode);
    dirtyFlag_[19] = true;
}
void Land::setFfTaxcode(std::string &&pFfTaxcode) noexcept
{
    ffTaxcode_ = std::make_shared<std::string>(std::move(pFfTaxcode));
    dirtyFlag_[19] = true;
}
void Land::setFfTaxcodeToNull() noexcept
{
    ffTaxcode_.reset();
    dirtyFlag_[19] = true;
}

const std::string &Land::getValueOfFfLandcode() const noexcept
{
    const static std::string defaultValue = std::string();
    if(ffLandcode_)
        return *ffLandcode_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getFfLandcode() const noexcept
{
    return ffLandcode_;
}
void Land::setFfLandcode(const std::string &pFfLandcode) noexcept
{
    ffLandcode_ = std::make_shared<std::string>(pFfLandcode);
    dirtyFlag_[20] = true;
}
void Land::setFfLandcode(std::string &&pFfLandcode) noexcept
{
    ffLandcode_ = std::make_shared<std::string>(std::move(pFfLandcode));
    dirtyFlag_[20] = true;
}
void Land::setFfLandcodeToNull() noexcept
{
    ffLandcode_.reset();
    dirtyFlag_[20] = true;
}

const std::string &Land::getValueOfAbgstRelevantCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(abgstRelevantCd_)
        return *abgstRelevantCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getAbgstRelevantCd() const noexcept
{
    return abgstRelevantCd_;
}
void Land::setAbgstRelevantCd(const std::string &pAbgstRelevantCd) noexcept
{
    abgstRelevantCd_ = std::make_shared<std::string>(pAbgstRelevantCd);
    dirtyFlag_[21] = true;
}
void Land::setAbgstRelevantCd(std::string &&pAbgstRelevantCd) noexcept
{
    abgstRelevantCd_ = std::make_shared<std::string>(std::move(pAbgstRelevantCd));
    dirtyFlag_[21] = true;
}
void Land::setAbgstRelevantCdToNull() noexcept
{
    abgstRelevantCd_.reset();
    dirtyFlag_[21] = true;
}

const std::string &Land::getValueOfUsFatcaLandCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(usFatcaLandCd_)
        return *usFatcaLandCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getUsFatcaLandCd() const noexcept
{
    return usFatcaLandCd_;
}
void Land::setUsFatcaLandCd(const std::string &pUsFatcaLandCd) noexcept
{
    usFatcaLandCd_ = std::make_shared<std::string>(pUsFatcaLandCd);
    dirtyFlag_[22] = true;
}
void Land::setUsFatcaLandCd(std::string &&pUsFatcaLandCd) noexcept
{
    usFatcaLandCd_ = std::make_shared<std::string>(std::move(pUsFatcaLandCd));
    dirtyFlag_[22] = true;
}
void Land::setUsFatcaLandCdToNull() noexcept
{
    usFatcaLandCd_.reset();
    dirtyFlag_[22] = true;
}

const double &Land::getValueOfIgaStatus() const noexcept
{
    const static double defaultValue = double();
    if(igaStatus_)
        return *igaStatus_;
    return defaultValue;
}
const std::shared_ptr<double> &Land::getIgaStatus() const noexcept
{
    return igaStatus_;
}
void Land::setIgaStatus(const double &pIgaStatus) noexcept
{
    igaStatus_ = std::make_shared<double>(pIgaStatus);
    dirtyFlag_[23] = true;
}
void Land::setIgaStatusToNull() noexcept
{
    igaStatus_.reset();
    dirtyFlag_[23] = true;
}

const std::string &Land::getValueOfUsTerritoryCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(usTerritoryCd_)
        return *usTerritoryCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getUsTerritoryCd() const noexcept
{
    return usTerritoryCd_;
}
void Land::setUsTerritoryCd(const std::string &pUsTerritoryCd) noexcept
{
    usTerritoryCd_ = std::make_shared<std::string>(pUsTerritoryCd);
    dirtyFlag_[24] = true;
}
void Land::setUsTerritoryCd(std::string &&pUsTerritoryCd) noexcept
{
    usTerritoryCd_ = std::make_shared<std::string>(std::move(pUsTerritoryCd));
    dirtyFlag_[24] = true;
}
void Land::setUsTerritoryCdToNull() noexcept
{
    usTerritoryCd_.reset();
    dirtyFlag_[24] = true;
}

const double &Land::getValueOfDestinationCd() const noexcept
{
    const static double defaultValue = double();
    if(destinationCd_)
        return *destinationCd_;
    return defaultValue;
}
const std::shared_ptr<double> &Land::getDestinationCd() const noexcept
{
    return destinationCd_;
}
void Land::setDestinationCd(const double &pDestinationCd) noexcept
{
    destinationCd_ = std::make_shared<double>(pDestinationCd);
    dirtyFlag_[25] = true;
}
void Land::setDestinationCdToNull() noexcept
{
    destinationCd_.reset();
    dirtyFlag_[25] = true;
}

const std::string &Land::getValueOfAufteilung() const noexcept
{
    const static std::string defaultValue = std::string();
    if(aufteilung_)
        return *aufteilung_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getAufteilung() const noexcept
{
    return aufteilung_;
}
void Land::setAufteilung(const std::string &pAufteilung) noexcept
{
    aufteilung_ = std::make_shared<std::string>(pAufteilung);
    dirtyFlag_[26] = true;
}
void Land::setAufteilung(std::string &&pAufteilung) noexcept
{
    aufteilung_ = std::make_shared<std::string>(std::move(pAufteilung));
    dirtyFlag_[26] = true;
}
void Land::setAufteilungToNull() noexcept
{
    aufteilung_.reset();
    dirtyFlag_[26] = true;
}

const std::string &Land::getValueOfStatfisccInlandCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(statfisccInlandCd_)
        return *statfisccInlandCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getStatfisccInlandCd() const noexcept
{
    return statfisccInlandCd_;
}
void Land::setStatfisccInlandCd(const std::string &pStatfisccInlandCd) noexcept
{
    statfisccInlandCd_ = std::make_shared<std::string>(pStatfisccInlandCd);
    dirtyFlag_[27] = true;
}
void Land::setStatfisccInlandCd(std::string &&pStatfisccInlandCd) noexcept
{
    statfisccInlandCd_ = std::make_shared<std::string>(std::move(pStatfisccInlandCd));
    dirtyFlag_[27] = true;
}
void Land::setStatfisccInlandCdToNull() noexcept
{
    statfisccInlandCd_.reset();
    dirtyFlag_[27] = true;
}

const std::string &Land::getValueOfAeoiReportableCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(aeoiReportableCd_)
        return *aeoiReportableCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getAeoiReportableCd() const noexcept
{
    return aeoiReportableCd_;
}
void Land::setAeoiReportableCd(const std::string &pAeoiReportableCd) noexcept
{
    aeoiReportableCd_ = std::make_shared<std::string>(pAeoiReportableCd);
    dirtyFlag_[28] = true;
}
void Land::setAeoiReportableCd(std::string &&pAeoiReportableCd) noexcept
{
    aeoiReportableCd_ = std::make_shared<std::string>(std::move(pAeoiReportableCd));
    dirtyFlag_[28] = true;
}
void Land::setAeoiReportableCdToNull() noexcept
{
    aeoiReportableCd_.reset();
    dirtyFlag_[28] = true;
}

const ::trantor::Date &Land::getValueOfAeoiRepAgreementDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(aeoiRepAgreementDate_)
        return *aeoiRepAgreementDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Land::getAeoiRepAgreementDate() const noexcept
{
    return aeoiRepAgreementDate_;
}
void Land::setAeoiRepAgreementDate(const ::trantor::Date &pAeoiRepAgreementDate) noexcept
{
    aeoiRepAgreementDate_ = std::make_shared<::trantor::Date>(pAeoiRepAgreementDate);
    dirtyFlag_[29] = true;
}
void Land::setAeoiRepAgreementDateToNull() noexcept
{
    aeoiRepAgreementDate_.reset();
    dirtyFlag_[29] = true;
}

const ::trantor::Date &Land::getValueOfAeoiStartReportingYear() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(aeoiStartReportingYear_)
        return *aeoiStartReportingYear_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Land::getAeoiStartReportingYear() const noexcept
{
    return aeoiStartReportingYear_;
}
void Land::setAeoiStartReportingYear(const ::trantor::Date &pAeoiStartReportingYear) noexcept
{
    aeoiStartReportingYear_ = std::make_shared<::trantor::Date>(pAeoiStartReportingYear);
    dirtyFlag_[30] = true;
}
void Land::setAeoiStartReportingYearToNull() noexcept
{
    aeoiStartReportingYear_.reset();
    dirtyFlag_[30] = true;
}

const std::string &Land::getValueOfTinAvailableCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(tinAvailableCd_)
        return *tinAvailableCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getTinAvailableCd() const noexcept
{
    return tinAvailableCd_;
}
void Land::setTinAvailableCd(const std::string &pTinAvailableCd) noexcept
{
    tinAvailableCd_ = std::make_shared<std::string>(pTinAvailableCd);
    dirtyFlag_[31] = true;
}
void Land::setTinAvailableCd(std::string &&pTinAvailableCd) noexcept
{
    tinAvailableCd_ = std::make_shared<std::string>(std::move(pTinAvailableCd));
    dirtyFlag_[31] = true;
}
void Land::setTinAvailableCdToNull() noexcept
{
    tinAvailableCd_.reset();
    dirtyFlag_[31] = true;
}

const std::string &Land::getValueOfJurisdictionOfBankCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(jurisdictionOfBankCd_)
        return *jurisdictionOfBankCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getJurisdictionOfBankCd() const noexcept
{
    return jurisdictionOfBankCd_;
}
void Land::setJurisdictionOfBankCd(const std::string &pJurisdictionOfBankCd) noexcept
{
    jurisdictionOfBankCd_ = std::make_shared<std::string>(pJurisdictionOfBankCd);
    dirtyFlag_[32] = true;
}
void Land::setJurisdictionOfBankCd(std::string &&pJurisdictionOfBankCd) noexcept
{
    jurisdictionOfBankCd_ = std::make_shared<std::string>(std::move(pJurisdictionOfBankCd));
    dirtyFlag_[32] = true;
}
void Land::setJurisdictionOfBankCdToNull() noexcept
{
    jurisdictionOfBankCd_.reset();
    dirtyFlag_[32] = true;
}

const ::trantor::Date &Land::getValueOfAeoiFirstYearOfReporting() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(aeoiFirstYearOfReporting_)
        return *aeoiFirstYearOfReporting_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Land::getAeoiFirstYearOfReporting() const noexcept
{
    return aeoiFirstYearOfReporting_;
}
void Land::setAeoiFirstYearOfReporting(const ::trantor::Date &pAeoiFirstYearOfReporting) noexcept
{
    aeoiFirstYearOfReporting_ = std::make_shared<::trantor::Date>(pAeoiFirstYearOfReporting);
    dirtyFlag_[33] = true;
}
void Land::setAeoiFirstYearOfReportingToNull() noexcept
{
    aeoiFirstYearOfReporting_.reset();
    dirtyFlag_[33] = true;
}

const std::string &Land::getValueOfAeoiRepWiderApproachCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(aeoiRepWiderApproachCd_)
        return *aeoiRepWiderApproachCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getAeoiRepWiderApproachCd() const noexcept
{
    return aeoiRepWiderApproachCd_;
}
void Land::setAeoiRepWiderApproachCd(const std::string &pAeoiRepWiderApproachCd) noexcept
{
    aeoiRepWiderApproachCd_ = std::make_shared<std::string>(pAeoiRepWiderApproachCd);
    dirtyFlag_[34] = true;
}
void Land::setAeoiRepWiderApproachCd(std::string &&pAeoiRepWiderApproachCd) noexcept
{
    aeoiRepWiderApproachCd_ = std::make_shared<std::string>(std::move(pAeoiRepWiderApproachCd));
    dirtyFlag_[34] = true;
}
void Land::setAeoiRepWiderApproachCdToNull() noexcept
{
    aeoiRepWiderApproachCd_.reset();
    dirtyFlag_[34] = true;
}

const std::string &Land::getValueOfNaftaCountryCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(naftaCountryCd_)
        return *naftaCountryCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getNaftaCountryCd() const noexcept
{
    return naftaCountryCd_;
}
void Land::setNaftaCountryCd(const std::string &pNaftaCountryCd) noexcept
{
    naftaCountryCd_ = std::make_shared<std::string>(pNaftaCountryCd);
    dirtyFlag_[35] = true;
}
void Land::setNaftaCountryCd(std::string &&pNaftaCountryCd) noexcept
{
    naftaCountryCd_ = std::make_shared<std::string>(std::move(pNaftaCountryCd));
    dirtyFlag_[35] = true;
}
void Land::setNaftaCountryCdToNull() noexcept
{
    naftaCountryCd_.reset();
    dirtyFlag_[35] = true;
}

const std::string &Land::getValueOfEeaCountryCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(eeaCountryCd_)
        return *eeaCountryCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getEeaCountryCd() const noexcept
{
    return eeaCountryCd_;
}
void Land::setEeaCountryCd(const std::string &pEeaCountryCd) noexcept
{
    eeaCountryCd_ = std::make_shared<std::string>(pEeaCountryCd);
    dirtyFlag_[36] = true;
}
void Land::setEeaCountryCd(std::string &&pEeaCountryCd) noexcept
{
    eeaCountryCd_ = std::make_shared<std::string>(std::move(pEeaCountryCd));
    dirtyFlag_[36] = true;
}
void Land::setEeaCountryCdToNull() noexcept
{
    eeaCountryCd_.reset();
    dirtyFlag_[36] = true;
}

const std::string &Land::getValueOfUsCdiCountryCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(usCdiCountryCd_)
        return *usCdiCountryCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getUsCdiCountryCd() const noexcept
{
    return usCdiCountryCd_;
}
void Land::setUsCdiCountryCd(const std::string &pUsCdiCountryCd) noexcept
{
    usCdiCountryCd_ = std::make_shared<std::string>(pUsCdiCountryCd);
    dirtyFlag_[37] = true;
}
void Land::setUsCdiCountryCd(std::string &&pUsCdiCountryCd) noexcept
{
    usCdiCountryCd_ = std::make_shared<std::string>(std::move(pUsCdiCountryCd));
    dirtyFlag_[37] = true;
}
void Land::setUsCdiCountryCdToNull() noexcept
{
    usCdiCountryCd_.reset();
    dirtyFlag_[37] = true;
}

const std::string &Land::getValueOfAeoiParticipatingCountryCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(aeoiParticipatingCountryCd_)
        return *aeoiParticipatingCountryCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getAeoiParticipatingCountryCd() const noexcept
{
    return aeoiParticipatingCountryCd_;
}
void Land::setAeoiParticipatingCountryCd(const std::string &pAeoiParticipatingCountryCd) noexcept
{
    aeoiParticipatingCountryCd_ = std::make_shared<std::string>(pAeoiParticipatingCountryCd);
    dirtyFlag_[38] = true;
}
void Land::setAeoiParticipatingCountryCd(std::string &&pAeoiParticipatingCountryCd) noexcept
{
    aeoiParticipatingCountryCd_ = std::make_shared<std::string>(std::move(pAeoiParticipatingCountryCd));
    dirtyFlag_[38] = true;
}
void Land::setAeoiParticipatingCountryCdToNull() noexcept
{
    aeoiParticipatingCountryCd_.reset();
    dirtyFlag_[38] = true;
}

const std::string &Land::getValueOfLandA3Cd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(landA3Cd_)
        return *landA3Cd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getLandA3Cd() const noexcept
{
    return landA3Cd_;
}
void Land::setLandA3Cd(const std::string &pLandA3Cd) noexcept
{
    landA3Cd_ = std::make_shared<std::string>(pLandA3Cd);
    dirtyFlag_[39] = true;
}
void Land::setLandA3Cd(std::string &&pLandA3Cd) noexcept
{
    landA3Cd_ = std::make_shared<std::string>(std::move(pLandA3Cd));
    dirtyFlag_[39] = true;
}
void Land::setLandA3CdToNull() noexcept
{
    landA3Cd_.reset();
    dirtyFlag_[39] = true;
}

const std::string &Land::getValueOfCdiWithSwitzerlandCd() const noexcept
{
    const static std::string defaultValue = std::string();
    if(cdiWithSwitzerlandCd_)
        return *cdiWithSwitzerlandCd_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Land::getCdiWithSwitzerlandCd() const noexcept
{
    return cdiWithSwitzerlandCd_;
}
void Land::setCdiWithSwitzerlandCd(const std::string &pCdiWithSwitzerlandCd) noexcept
{
    cdiWithSwitzerlandCd_ = std::make_shared<std::string>(pCdiWithSwitzerlandCd);
    dirtyFlag_[40] = true;
}
void Land::setCdiWithSwitzerlandCd(std::string &&pCdiWithSwitzerlandCd) noexcept
{
    cdiWithSwitzerlandCd_ = std::make_shared<std::string>(std::move(pCdiWithSwitzerlandCd));
    dirtyFlag_[40] = true;
}
void Land::setCdiWithSwitzerlandCdToNull() noexcept
{
    cdiWithSwitzerlandCd_.reset();
    dirtyFlag_[40] = true;
}

void Land::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Land::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "LAND_CD",
        "AUFETIKETTE_CD",
        "LAND",
        "KURZCODE",
        "PLZVORAUS_CD",
        "VORWAHL",
        "WAEHRUNGS_CD",
        "INLAND_CD",
        "VERSANDPRIORITAET_CD",
        "RISIKOGRUPPE",
        "RISKINDEX",
        "EU_LAND_CD",
        "CRTDATUM",
        "CRTUSER",
        "MUTDATUM",
        "MUTUSER",
        "LOESCH_CD",
        "LOESCHDATUM",
        "LOESCHUSER",
        "FF_TAXCODE",
        "FF_LANDCODE",
        "ABGST_RELEVANT_CD",
        "US_FATCA_LAND_CD",
        "IGA_STATUS",
        "US_TERRITORY_CD",
        "DESTINATION_CD",
        "AUFTEILUNG",
        "STATFISCC_INLAND_CD",
        "AEOI_REPORTABLE_CD",
        "AEOI_REP_AGREEMENT_DATE",
        "AEOI_START_REPORTING_YEAR",
        "TIN_AVAILABLE_CD",
        "JURISDICTION_OF_BANK_CD",
        "AEOI_FIRST_YEAR_OF_REPORTING",
        "AEOI_REP_WIDER_APPROACH_CD",
        "NAFTA_COUNTRY_CD",
        "EEA_COUNTRY_CD",
        "US_CDI_COUNTRY_CD",
        "AEOI_PARTICIPATING_COUNTRY_CD",
        "LAND_A3_CD",
        "CDI_WITH_SWITZERLAND_CD"
    };
    return inCols;
}

void Land::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getLandCd())
        {
            binder << getValueOfLandCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getAufetiketteCd())
        {
            binder << getValueOfAufetiketteCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLand())
        {
            binder << getValueOfLand();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getKurzcode())
        {
            binder << getValueOfKurzcode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPlzvorausCd())
        {
            binder << getValueOfPlzvorausCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getVorwahl())
        {
            binder << getValueOfVorwahl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getWaehrungsCd())
        {
            binder << getValueOfWaehrungsCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getInlandCd())
        {
            binder << getValueOfInlandCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getVersandprioritaetCd())
        {
            binder << getValueOfVersandprioritaetCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getRisikogruppe())
        {
            binder << getValueOfRisikogruppe();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getRiskindex())
        {
            binder << getValueOfRiskindex();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getEuLandCd())
        {
            binder << getValueOfEuLandCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getCrtdatum())
        {
            binder << getValueOfCrtdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getCrtuser())
        {
            binder << getValueOfCrtuser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getMutdatum())
        {
            binder << getValueOfMutdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getMutuser())
        {
            binder << getValueOfMutuser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getLoeschCd())
        {
            binder << getValueOfLoeschCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getLoeschdatum())
        {
            binder << getValueOfLoeschdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getLoeschuser())
        {
            binder << getValueOfLoeschuser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getFfTaxcode())
        {
            binder << getValueOfFfTaxcode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getFfLandcode())
        {
            binder << getValueOfFfLandcode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getAbgstRelevantCd())
        {
            binder << getValueOfAbgstRelevantCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getUsFatcaLandCd())
        {
            binder << getValueOfUsFatcaLandCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getIgaStatus())
        {
            binder << getValueOfIgaStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getUsTerritoryCd())
        {
            binder << getValueOfUsTerritoryCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getDestinationCd())
        {
            binder << getValueOfDestinationCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[26])
    {
        if(getAufteilung())
        {
            binder << getValueOfAufteilung();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[27])
    {
        if(getStatfisccInlandCd())
        {
            binder << getValueOfStatfisccInlandCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[28])
    {
        if(getAeoiReportableCd())
        {
            binder << getValueOfAeoiReportableCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[29])
    {
        if(getAeoiRepAgreementDate())
        {
            binder << getValueOfAeoiRepAgreementDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[30])
    {
        if(getAeoiStartReportingYear())
        {
            binder << getValueOfAeoiStartReportingYear();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[31])
    {
        if(getTinAvailableCd())
        {
            binder << getValueOfTinAvailableCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[32])
    {
        if(getJurisdictionOfBankCd())
        {
            binder << getValueOfJurisdictionOfBankCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[33])
    {
        if(getAeoiFirstYearOfReporting())
        {
            binder << getValueOfAeoiFirstYearOfReporting();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[34])
    {
        if(getAeoiRepWiderApproachCd())
        {
            binder << getValueOfAeoiRepWiderApproachCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[35])
    {
        if(getNaftaCountryCd())
        {
            binder << getValueOfNaftaCountryCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[36])
    {
        if(getEeaCountryCd())
        {
            binder << getValueOfEeaCountryCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[37])
    {
        if(getUsCdiCountryCd())
        {
            binder << getValueOfUsCdiCountryCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[38])
    {
        if(getAeoiParticipatingCountryCd())
        {
            binder << getValueOfAeoiParticipatingCountryCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[39])
    {
        if(getLandA3Cd())
        {
            binder << getValueOfLandA3Cd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[40])
    {
        if(getCdiWithSwitzerlandCd())
        {
            binder << getValueOfCdiWithSwitzerlandCd();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Land::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    if(dirtyFlag_[20])
    {
        ret.push_back(getColumnName(20));
    }
    if(dirtyFlag_[21])
    {
        ret.push_back(getColumnName(21));
    }
    if(dirtyFlag_[22])
    {
        ret.push_back(getColumnName(22));
    }
    if(dirtyFlag_[23])
    {
        ret.push_back(getColumnName(23));
    }
    if(dirtyFlag_[24])
    {
        ret.push_back(getColumnName(24));
    }
    if(dirtyFlag_[25])
    {
        ret.push_back(getColumnName(25));
    }
    if(dirtyFlag_[26])
    {
        ret.push_back(getColumnName(26));
    }
    if(dirtyFlag_[27])
    {
        ret.push_back(getColumnName(27));
    }
    if(dirtyFlag_[28])
    {
        ret.push_back(getColumnName(28));
    }
    if(dirtyFlag_[29])
    {
        ret.push_back(getColumnName(29));
    }
    if(dirtyFlag_[30])
    {
        ret.push_back(getColumnName(30));
    }
    if(dirtyFlag_[31])
    {
        ret.push_back(getColumnName(31));
    }
    if(dirtyFlag_[32])
    {
        ret.push_back(getColumnName(32));
    }
    if(dirtyFlag_[33])
    {
        ret.push_back(getColumnName(33));
    }
    if(dirtyFlag_[34])
    {
        ret.push_back(getColumnName(34));
    }
    if(dirtyFlag_[35])
    {
        ret.push_back(getColumnName(35));
    }
    if(dirtyFlag_[36])
    {
        ret.push_back(getColumnName(36));
    }
    if(dirtyFlag_[37])
    {
        ret.push_back(getColumnName(37));
    }
    if(dirtyFlag_[38])
    {
        ret.push_back(getColumnName(38));
    }
    if(dirtyFlag_[39])
    {
        ret.push_back(getColumnName(39));
    }
    if(dirtyFlag_[40])
    {
        ret.push_back(getColumnName(40));
    }
    return ret;
}

void Land::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getLandCd())
        {
            binder << getValueOfLandCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getAufetiketteCd())
        {
            binder << getValueOfAufetiketteCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLand())
        {
            binder << getValueOfLand();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getKurzcode())
        {
            binder << getValueOfKurzcode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPlzvorausCd())
        {
            binder << getValueOfPlzvorausCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getVorwahl())
        {
            binder << getValueOfVorwahl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getWaehrungsCd())
        {
            binder << getValueOfWaehrungsCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getInlandCd())
        {
            binder << getValueOfInlandCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getVersandprioritaetCd())
        {
            binder << getValueOfVersandprioritaetCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getRisikogruppe())
        {
            binder << getValueOfRisikogruppe();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getRiskindex())
        {
            binder << getValueOfRiskindex();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getEuLandCd())
        {
            binder << getValueOfEuLandCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getCrtdatum())
        {
            binder << getValueOfCrtdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getCrtuser())
        {
            binder << getValueOfCrtuser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getMutdatum())
        {
            binder << getValueOfMutdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getMutuser())
        {
            binder << getValueOfMutuser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getLoeschCd())
        {
            binder << getValueOfLoeschCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getLoeschdatum())
        {
            binder << getValueOfLoeschdatum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getLoeschuser())
        {
            binder << getValueOfLoeschuser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getFfTaxcode())
        {
            binder << getValueOfFfTaxcode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getFfLandcode())
        {
            binder << getValueOfFfLandcode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getAbgstRelevantCd())
        {
            binder << getValueOfAbgstRelevantCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getUsFatcaLandCd())
        {
            binder << getValueOfUsFatcaLandCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getIgaStatus())
        {
            binder << getValueOfIgaStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getUsTerritoryCd())
        {
            binder << getValueOfUsTerritoryCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getDestinationCd())
        {
            binder << getValueOfDestinationCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[26])
    {
        if(getAufteilung())
        {
            binder << getValueOfAufteilung();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[27])
    {
        if(getStatfisccInlandCd())
        {
            binder << getValueOfStatfisccInlandCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[28])
    {
        if(getAeoiReportableCd())
        {
            binder << getValueOfAeoiReportableCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[29])
    {
        if(getAeoiRepAgreementDate())
        {
            binder << getValueOfAeoiRepAgreementDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[30])
    {
        if(getAeoiStartReportingYear())
        {
            binder << getValueOfAeoiStartReportingYear();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[31])
    {
        if(getTinAvailableCd())
        {
            binder << getValueOfTinAvailableCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[32])
    {
        if(getJurisdictionOfBankCd())
        {
            binder << getValueOfJurisdictionOfBankCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[33])
    {
        if(getAeoiFirstYearOfReporting())
        {
            binder << getValueOfAeoiFirstYearOfReporting();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[34])
    {
        if(getAeoiRepWiderApproachCd())
        {
            binder << getValueOfAeoiRepWiderApproachCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[35])
    {
        if(getNaftaCountryCd())
        {
            binder << getValueOfNaftaCountryCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[36])
    {
        if(getEeaCountryCd())
        {
            binder << getValueOfEeaCountryCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[37])
    {
        if(getUsCdiCountryCd())
        {
            binder << getValueOfUsCdiCountryCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[38])
    {
        if(getAeoiParticipatingCountryCd())
        {
            binder << getValueOfAeoiParticipatingCountryCd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[39])
    {
        if(getLandA3Cd())
        {
            binder << getValueOfLandA3Cd();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[40])
    {
        if(getCdiWithSwitzerlandCd())
        {
            binder << getValueOfCdiWithSwitzerlandCd();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Land::toJson() const
{
    Json::Value ret;
    if(getLandCd())
    {
        ret["LAND_CD"]=getValueOfLandCd();
    }
    else
    {
        ret["LAND_CD"]=Json::Value();
    }
    if(getAufetiketteCd())
    {
        ret["AUFETIKETTE_CD"]=getValueOfAufetiketteCd();
    }
    else
    {
        ret["AUFETIKETTE_CD"]=Json::Value();
    }
    if(getLand())
    {
        ret["LAND"]=getValueOfLand();
    }
    else
    {
        ret["LAND"]=Json::Value();
    }
    if(getKurzcode())
    {
        ret["KURZCODE"]=getValueOfKurzcode();
    }
    else
    {
        ret["KURZCODE"]=Json::Value();
    }
    if(getPlzvorausCd())
    {
        ret["PLZVORAUS_CD"]=getValueOfPlzvorausCd();
    }
    else
    {
        ret["PLZVORAUS_CD"]=Json::Value();
    }
    if(getVorwahl())
    {
        ret["VORWAHL"]=getValueOfVorwahl();
    }
    else
    {
        ret["VORWAHL"]=Json::Value();
    }
    if(getWaehrungsCd())
    {
        ret["WAEHRUNGS_CD"]=getValueOfWaehrungsCd();
    }
    else
    {
        ret["WAEHRUNGS_CD"]=Json::Value();
    }
    if(getInlandCd())
    {
        ret["INLAND_CD"]=getValueOfInlandCd();
    }
    else
    {
        ret["INLAND_CD"]=Json::Value();
    }
    if(getVersandprioritaetCd())
    {
        ret["VERSANDPRIORITAET_CD"]=getValueOfVersandprioritaetCd();
    }
    else
    {
        ret["VERSANDPRIORITAET_CD"]=Json::Value();
    }
    if(getRisikogruppe())
    {
        ret["RISIKOGRUPPE"]=getValueOfRisikogruppe();
    }
    else
    {
        ret["RISIKOGRUPPE"]=Json::Value();
    }
    if(getRiskindex())
    {
        ret["RISKINDEX"]=getValueOfRiskindex();
    }
    else
    {
        ret["RISKINDEX"]=Json::Value();
    }
    if(getEuLandCd())
    {
        ret["EU_LAND_CD"]=getValueOfEuLandCd();
    }
    else
    {
        ret["EU_LAND_CD"]=Json::Value();
    }
    if(getCrtdatum())
    {
        ret["CRTDATUM"]=getCrtdatum()->toDbStringLocal();
    }
    else
    {
        ret["CRTDATUM"]=Json::Value();
    }
    if(getCrtuser())
    {
        ret["CRTUSER"]=getValueOfCrtuser();
    }
    else
    {
        ret["CRTUSER"]=Json::Value();
    }
    if(getMutdatum())
    {
        ret["MUTDATUM"]=getMutdatum()->toDbStringLocal();
    }
    else
    {
        ret["MUTDATUM"]=Json::Value();
    }
    if(getMutuser())
    {
        ret["MUTUSER"]=getValueOfMutuser();
    }
    else
    {
        ret["MUTUSER"]=Json::Value();
    }
    if(getLoeschCd())
    {
        ret["LOESCH_CD"]=getValueOfLoeschCd();
    }
    else
    {
        ret["LOESCH_CD"]=Json::Value();
    }
    if(getLoeschdatum())
    {
        ret["LOESCHDATUM"]=getLoeschdatum()->toDbStringLocal();
    }
    else
    {
        ret["LOESCHDATUM"]=Json::Value();
    }
    if(getLoeschuser())
    {
        ret["LOESCHUSER"]=getValueOfLoeschuser();
    }
    else
    {
        ret["LOESCHUSER"]=Json::Value();
    }
    if(getFfTaxcode())
    {
        ret["FF_TAXCODE"]=getValueOfFfTaxcode();
    }
    else
    {
        ret["FF_TAXCODE"]=Json::Value();
    }
    if(getFfLandcode())
    {
        ret["FF_LANDCODE"]=getValueOfFfLandcode();
    }
    else
    {
        ret["FF_LANDCODE"]=Json::Value();
    }
    if(getAbgstRelevantCd())
    {
        ret["ABGST_RELEVANT_CD"]=getValueOfAbgstRelevantCd();
    }
    else
    {
        ret["ABGST_RELEVANT_CD"]=Json::Value();
    }
    if(getUsFatcaLandCd())
    {
        ret["US_FATCA_LAND_CD"]=getValueOfUsFatcaLandCd();
    }
    else
    {
        ret["US_FATCA_LAND_CD"]=Json::Value();
    }
    if(getIgaStatus())
    {
        ret["IGA_STATUS"]=getValueOfIgaStatus();
    }
    else
    {
        ret["IGA_STATUS"]=Json::Value();
    }
    if(getUsTerritoryCd())
    {
        ret["US_TERRITORY_CD"]=getValueOfUsTerritoryCd();
    }
    else
    {
        ret["US_TERRITORY_CD"]=Json::Value();
    }
    if(getDestinationCd())
    {
        ret["DESTINATION_CD"]=getValueOfDestinationCd();
    }
    else
    {
        ret["DESTINATION_CD"]=Json::Value();
    }
    if(getAufteilung())
    {
        ret["AUFTEILUNG"]=getValueOfAufteilung();
    }
    else
    {
        ret["AUFTEILUNG"]=Json::Value();
    }
    if(getStatfisccInlandCd())
    {
        ret["STATFISCC_INLAND_CD"]=getValueOfStatfisccInlandCd();
    }
    else
    {
        ret["STATFISCC_INLAND_CD"]=Json::Value();
    }
    if(getAeoiReportableCd())
    {
        ret["AEOI_REPORTABLE_CD"]=getValueOfAeoiReportableCd();
    }
    else
    {
        ret["AEOI_REPORTABLE_CD"]=Json::Value();
    }
    if(getAeoiRepAgreementDate())
    {
        ret["AEOI_REP_AGREEMENT_DATE"]=getAeoiRepAgreementDate()->toDbStringLocal();
    }
    else
    {
        ret["AEOI_REP_AGREEMENT_DATE"]=Json::Value();
    }
    if(getAeoiStartReportingYear())
    {
        ret["AEOI_START_REPORTING_YEAR"]=getAeoiStartReportingYear()->toDbStringLocal();
    }
    else
    {
        ret["AEOI_START_REPORTING_YEAR"]=Json::Value();
    }
    if(getTinAvailableCd())
    {
        ret["TIN_AVAILABLE_CD"]=getValueOfTinAvailableCd();
    }
    else
    {
        ret["TIN_AVAILABLE_CD"]=Json::Value();
    }
    if(getJurisdictionOfBankCd())
    {
        ret["JURISDICTION_OF_BANK_CD"]=getValueOfJurisdictionOfBankCd();
    }
    else
    {
        ret["JURISDICTION_OF_BANK_CD"]=Json::Value();
    }
    if(getAeoiFirstYearOfReporting())
    {
        ret["AEOI_FIRST_YEAR_OF_REPORTING"]=getAeoiFirstYearOfReporting()->toDbStringLocal();
    }
    else
    {
        ret["AEOI_FIRST_YEAR_OF_REPORTING"]=Json::Value();
    }
    if(getAeoiRepWiderApproachCd())
    {
        ret["AEOI_REP_WIDER_APPROACH_CD"]=getValueOfAeoiRepWiderApproachCd();
    }
    else
    {
        ret["AEOI_REP_WIDER_APPROACH_CD"]=Json::Value();
    }
    if(getNaftaCountryCd())
    {
        ret["NAFTA_COUNTRY_CD"]=getValueOfNaftaCountryCd();
    }
    else
    {
        ret["NAFTA_COUNTRY_CD"]=Json::Value();
    }
    if(getEeaCountryCd())
    {
        ret["EEA_COUNTRY_CD"]=getValueOfEeaCountryCd();
    }
    else
    {
        ret["EEA_COUNTRY_CD"]=Json::Value();
    }
    if(getUsCdiCountryCd())
    {
        ret["US_CDI_COUNTRY_CD"]=getValueOfUsCdiCountryCd();
    }
    else
    {
        ret["US_CDI_COUNTRY_CD"]=Json::Value();
    }
    if(getAeoiParticipatingCountryCd())
    {
        ret["AEOI_PARTICIPATING_COUNTRY_CD"]=getValueOfAeoiParticipatingCountryCd();
    }
    else
    {
        ret["AEOI_PARTICIPATING_COUNTRY_CD"]=Json::Value();
    }
    if(getLandA3Cd())
    {
        ret["LAND_A3_CD"]=getValueOfLandA3Cd();
    }
    else
    {
        ret["LAND_A3_CD"]=Json::Value();
    }
    if(getCdiWithSwitzerlandCd())
    {
        ret["CDI_WITH_SWITZERLAND_CD"]=getValueOfCdiWithSwitzerlandCd();
    }
    else
    {
        ret["CDI_WITH_SWITZERLAND_CD"]=Json::Value();
    }
    return ret;
}

Json::Value Land::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 41)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getLandCd())
            {
                ret[pMasqueradingVector[0]]=getValueOfLandCd();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getAufetiketteCd())
            {
                ret[pMasqueradingVector[1]]=getValueOfAufetiketteCd();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getLand())
            {
                ret[pMasqueradingVector[2]]=getValueOfLand();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getKurzcode())
            {
                ret[pMasqueradingVector[3]]=getValueOfKurzcode();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getPlzvorausCd())
            {
                ret[pMasqueradingVector[4]]=getValueOfPlzvorausCd();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getVorwahl())
            {
                ret[pMasqueradingVector[5]]=getValueOfVorwahl();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getWaehrungsCd())
            {
                ret[pMasqueradingVector[6]]=getValueOfWaehrungsCd();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getInlandCd())
            {
                ret[pMasqueradingVector[7]]=getValueOfInlandCd();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getVersandprioritaetCd())
            {
                ret[pMasqueradingVector[8]]=getValueOfVersandprioritaetCd();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getRisikogruppe())
            {
                ret[pMasqueradingVector[9]]=getValueOfRisikogruppe();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getRiskindex())
            {
                ret[pMasqueradingVector[10]]=getValueOfRiskindex();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getEuLandCd())
            {
                ret[pMasqueradingVector[11]]=getValueOfEuLandCd();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getCrtdatum())
            {
                ret[pMasqueradingVector[12]]=getCrtdatum()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getCrtuser())
            {
                ret[pMasqueradingVector[13]]=getValueOfCrtuser();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getMutdatum())
            {
                ret[pMasqueradingVector[14]]=getMutdatum()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getMutuser())
            {
                ret[pMasqueradingVector[15]]=getValueOfMutuser();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getLoeschCd())
            {
                ret[pMasqueradingVector[16]]=getValueOfLoeschCd();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getLoeschdatum())
            {
                ret[pMasqueradingVector[17]]=getLoeschdatum()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getLoeschuser())
            {
                ret[pMasqueradingVector[18]]=getValueOfLoeschuser();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getFfTaxcode())
            {
                ret[pMasqueradingVector[19]]=getValueOfFfTaxcode();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getFfLandcode())
            {
                ret[pMasqueradingVector[20]]=getValueOfFfLandcode();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[21].empty())
        {
            if(getAbgstRelevantCd())
            {
                ret[pMasqueradingVector[21]]=getValueOfAbgstRelevantCd();
            }
            else
            {
                ret[pMasqueradingVector[21]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[22].empty())
        {
            if(getUsFatcaLandCd())
            {
                ret[pMasqueradingVector[22]]=getValueOfUsFatcaLandCd();
            }
            else
            {
                ret[pMasqueradingVector[22]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[23].empty())
        {
            if(getIgaStatus())
            {
                ret[pMasqueradingVector[23]]=getValueOfIgaStatus();
            }
            else
            {
                ret[pMasqueradingVector[23]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[24].empty())
        {
            if(getUsTerritoryCd())
            {
                ret[pMasqueradingVector[24]]=getValueOfUsTerritoryCd();
            }
            else
            {
                ret[pMasqueradingVector[24]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[25].empty())
        {
            if(getDestinationCd())
            {
                ret[pMasqueradingVector[25]]=getValueOfDestinationCd();
            }
            else
            {
                ret[pMasqueradingVector[25]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[26].empty())
        {
            if(getAufteilung())
            {
                ret[pMasqueradingVector[26]]=getValueOfAufteilung();
            }
            else
            {
                ret[pMasqueradingVector[26]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[27].empty())
        {
            if(getStatfisccInlandCd())
            {
                ret[pMasqueradingVector[27]]=getValueOfStatfisccInlandCd();
            }
            else
            {
                ret[pMasqueradingVector[27]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[28].empty())
        {
            if(getAeoiReportableCd())
            {
                ret[pMasqueradingVector[28]]=getValueOfAeoiReportableCd();
            }
            else
            {
                ret[pMasqueradingVector[28]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[29].empty())
        {
            if(getAeoiRepAgreementDate())
            {
                ret[pMasqueradingVector[29]]=getAeoiRepAgreementDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[29]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[30].empty())
        {
            if(getAeoiStartReportingYear())
            {
                ret[pMasqueradingVector[30]]=getAeoiStartReportingYear()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[30]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[31].empty())
        {
            if(getTinAvailableCd())
            {
                ret[pMasqueradingVector[31]]=getValueOfTinAvailableCd();
            }
            else
            {
                ret[pMasqueradingVector[31]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[32].empty())
        {
            if(getJurisdictionOfBankCd())
            {
                ret[pMasqueradingVector[32]]=getValueOfJurisdictionOfBankCd();
            }
            else
            {
                ret[pMasqueradingVector[32]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[33].empty())
        {
            if(getAeoiFirstYearOfReporting())
            {
                ret[pMasqueradingVector[33]]=getAeoiFirstYearOfReporting()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[33]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[34].empty())
        {
            if(getAeoiRepWiderApproachCd())
            {
                ret[pMasqueradingVector[34]]=getValueOfAeoiRepWiderApproachCd();
            }
            else
            {
                ret[pMasqueradingVector[34]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[35].empty())
        {
            if(getNaftaCountryCd())
            {
                ret[pMasqueradingVector[35]]=getValueOfNaftaCountryCd();
            }
            else
            {
                ret[pMasqueradingVector[35]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[36].empty())
        {
            if(getEeaCountryCd())
            {
                ret[pMasqueradingVector[36]]=getValueOfEeaCountryCd();
            }
            else
            {
                ret[pMasqueradingVector[36]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[37].empty())
        {
            if(getUsCdiCountryCd())
            {
                ret[pMasqueradingVector[37]]=getValueOfUsCdiCountryCd();
            }
            else
            {
                ret[pMasqueradingVector[37]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[38].empty())
        {
            if(getAeoiParticipatingCountryCd())
            {
                ret[pMasqueradingVector[38]]=getValueOfAeoiParticipatingCountryCd();
            }
            else
            {
                ret[pMasqueradingVector[38]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[39].empty())
        {
            if(getLandA3Cd())
            {
                ret[pMasqueradingVector[39]]=getValueOfLandA3Cd();
            }
            else
            {
                ret[pMasqueradingVector[39]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[40].empty())
        {
            if(getCdiWithSwitzerlandCd())
            {
                ret[pMasqueradingVector[40]]=getValueOfCdiWithSwitzerlandCd();
            }
            else
            {
                ret[pMasqueradingVector[40]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getLandCd())
    {
        ret["LAND_CD"]=getValueOfLandCd();
    }
    else
    {
        ret["LAND_CD"]=Json::Value();
    }
    if(getAufetiketteCd())
    {
        ret["AUFETIKETTE_CD"]=getValueOfAufetiketteCd();
    }
    else
    {
        ret["AUFETIKETTE_CD"]=Json::Value();
    }
    if(getLand())
    {
        ret["LAND"]=getValueOfLand();
    }
    else
    {
        ret["LAND"]=Json::Value();
    }
    if(getKurzcode())
    {
        ret["KURZCODE"]=getValueOfKurzcode();
    }
    else
    {
        ret["KURZCODE"]=Json::Value();
    }
    if(getPlzvorausCd())
    {
        ret["PLZVORAUS_CD"]=getValueOfPlzvorausCd();
    }
    else
    {
        ret["PLZVORAUS_CD"]=Json::Value();
    }
    if(getVorwahl())
    {
        ret["VORWAHL"]=getValueOfVorwahl();
    }
    else
    {
        ret["VORWAHL"]=Json::Value();
    }
    if(getWaehrungsCd())
    {
        ret["WAEHRUNGS_CD"]=getValueOfWaehrungsCd();
    }
    else
    {
        ret["WAEHRUNGS_CD"]=Json::Value();
    }
    if(getInlandCd())
    {
        ret["INLAND_CD"]=getValueOfInlandCd();
    }
    else
    {
        ret["INLAND_CD"]=Json::Value();
    }
    if(getVersandprioritaetCd())
    {
        ret["VERSANDPRIORITAET_CD"]=getValueOfVersandprioritaetCd();
    }
    else
    {
        ret["VERSANDPRIORITAET_CD"]=Json::Value();
    }
    if(getRisikogruppe())
    {
        ret["RISIKOGRUPPE"]=getValueOfRisikogruppe();
    }
    else
    {
        ret["RISIKOGRUPPE"]=Json::Value();
    }
    if(getRiskindex())
    {
        ret["RISKINDEX"]=getValueOfRiskindex();
    }
    else
    {
        ret["RISKINDEX"]=Json::Value();
    }
    if(getEuLandCd())
    {
        ret["EU_LAND_CD"]=getValueOfEuLandCd();
    }
    else
    {
        ret["EU_LAND_CD"]=Json::Value();
    }
    if(getCrtdatum())
    {
        ret["CRTDATUM"]=getCrtdatum()->toDbStringLocal();
    }
    else
    {
        ret["CRTDATUM"]=Json::Value();
    }
    if(getCrtuser())
    {
        ret["CRTUSER"]=getValueOfCrtuser();
    }
    else
    {
        ret["CRTUSER"]=Json::Value();
    }
    if(getMutdatum())
    {
        ret["MUTDATUM"]=getMutdatum()->toDbStringLocal();
    }
    else
    {
        ret["MUTDATUM"]=Json::Value();
    }
    if(getMutuser())
    {
        ret["MUTUSER"]=getValueOfMutuser();
    }
    else
    {
        ret["MUTUSER"]=Json::Value();
    }
    if(getLoeschCd())
    {
        ret["LOESCH_CD"]=getValueOfLoeschCd();
    }
    else
    {
        ret["LOESCH_CD"]=Json::Value();
    }
    if(getLoeschdatum())
    {
        ret["LOESCHDATUM"]=getLoeschdatum()->toDbStringLocal();
    }
    else
    {
        ret["LOESCHDATUM"]=Json::Value();
    }
    if(getLoeschuser())
    {
        ret["LOESCHUSER"]=getValueOfLoeschuser();
    }
    else
    {
        ret["LOESCHUSER"]=Json::Value();
    }
    if(getFfTaxcode())
    {
        ret["FF_TAXCODE"]=getValueOfFfTaxcode();
    }
    else
    {
        ret["FF_TAXCODE"]=Json::Value();
    }
    if(getFfLandcode())
    {
        ret["FF_LANDCODE"]=getValueOfFfLandcode();
    }
    else
    {
        ret["FF_LANDCODE"]=Json::Value();
    }
    if(getAbgstRelevantCd())
    {
        ret["ABGST_RELEVANT_CD"]=getValueOfAbgstRelevantCd();
    }
    else
    {
        ret["ABGST_RELEVANT_CD"]=Json::Value();
    }
    if(getUsFatcaLandCd())
    {
        ret["US_FATCA_LAND_CD"]=getValueOfUsFatcaLandCd();
    }
    else
    {
        ret["US_FATCA_LAND_CD"]=Json::Value();
    }
    if(getIgaStatus())
    {
        ret["IGA_STATUS"]=getValueOfIgaStatus();
    }
    else
    {
        ret["IGA_STATUS"]=Json::Value();
    }
    if(getUsTerritoryCd())
    {
        ret["US_TERRITORY_CD"]=getValueOfUsTerritoryCd();
    }
    else
    {
        ret["US_TERRITORY_CD"]=Json::Value();
    }
    if(getDestinationCd())
    {
        ret["DESTINATION_CD"]=getValueOfDestinationCd();
    }
    else
    {
        ret["DESTINATION_CD"]=Json::Value();
    }
    if(getAufteilung())
    {
        ret["AUFTEILUNG"]=getValueOfAufteilung();
    }
    else
    {
        ret["AUFTEILUNG"]=Json::Value();
    }
    if(getStatfisccInlandCd())
    {
        ret["STATFISCC_INLAND_CD"]=getValueOfStatfisccInlandCd();
    }
    else
    {
        ret["STATFISCC_INLAND_CD"]=Json::Value();
    }
    if(getAeoiReportableCd())
    {
        ret["AEOI_REPORTABLE_CD"]=getValueOfAeoiReportableCd();
    }
    else
    {
        ret["AEOI_REPORTABLE_CD"]=Json::Value();
    }
    if(getAeoiRepAgreementDate())
    {
        ret["AEOI_REP_AGREEMENT_DATE"]=getAeoiRepAgreementDate()->toDbStringLocal();
    }
    else
    {
        ret["AEOI_REP_AGREEMENT_DATE"]=Json::Value();
    }
    if(getAeoiStartReportingYear())
    {
        ret["AEOI_START_REPORTING_YEAR"]=getAeoiStartReportingYear()->toDbStringLocal();
    }
    else
    {
        ret["AEOI_START_REPORTING_YEAR"]=Json::Value();
    }
    if(getTinAvailableCd())
    {
        ret["TIN_AVAILABLE_CD"]=getValueOfTinAvailableCd();
    }
    else
    {
        ret["TIN_AVAILABLE_CD"]=Json::Value();
    }
    if(getJurisdictionOfBankCd())
    {
        ret["JURISDICTION_OF_BANK_CD"]=getValueOfJurisdictionOfBankCd();
    }
    else
    {
        ret["JURISDICTION_OF_BANK_CD"]=Json::Value();
    }
    if(getAeoiFirstYearOfReporting())
    {
        ret["AEOI_FIRST_YEAR_OF_REPORTING"]=getAeoiFirstYearOfReporting()->toDbStringLocal();
    }
    else
    {
        ret["AEOI_FIRST_YEAR_OF_REPORTING"]=Json::Value();
    }
    if(getAeoiRepWiderApproachCd())
    {
        ret["AEOI_REP_WIDER_APPROACH_CD"]=getValueOfAeoiRepWiderApproachCd();
    }
    else
    {
        ret["AEOI_REP_WIDER_APPROACH_CD"]=Json::Value();
    }
    if(getNaftaCountryCd())
    {
        ret["NAFTA_COUNTRY_CD"]=getValueOfNaftaCountryCd();
    }
    else
    {
        ret["NAFTA_COUNTRY_CD"]=Json::Value();
    }
    if(getEeaCountryCd())
    {
        ret["EEA_COUNTRY_CD"]=getValueOfEeaCountryCd();
    }
    else
    {
        ret["EEA_COUNTRY_CD"]=Json::Value();
    }
    if(getUsCdiCountryCd())
    {
        ret["US_CDI_COUNTRY_CD"]=getValueOfUsCdiCountryCd();
    }
    else
    {
        ret["US_CDI_COUNTRY_CD"]=Json::Value();
    }
    if(getAeoiParticipatingCountryCd())
    {
        ret["AEOI_PARTICIPATING_COUNTRY_CD"]=getValueOfAeoiParticipatingCountryCd();
    }
    else
    {
        ret["AEOI_PARTICIPATING_COUNTRY_CD"]=Json::Value();
    }
    if(getLandA3Cd())
    {
        ret["LAND_A3_CD"]=getValueOfLandA3Cd();
    }
    else
    {
        ret["LAND_A3_CD"]=Json::Value();
    }
    if(getCdiWithSwitzerlandCd())
    {
        ret["CDI_WITH_SWITZERLAND_CD"]=getValueOfCdiWithSwitzerlandCd();
    }
    else
    {
        ret["CDI_WITH_SWITZERLAND_CD"]=Json::Value();
    }
    return ret;
}

bool Land::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("LAND_CD"))
    {
        if(!validJsonOfField(0, "LAND_CD", pJson["LAND_CD"], err, true))
            return false;
    }
    else
    {
        err="The LAND_CD column cannot be null";
        return false;
    }
    if(pJson.isMember("AUFETIKETTE_CD"))
    {
        if(!validJsonOfField(1, "AUFETIKETTE_CD", pJson["AUFETIKETTE_CD"], err, true))
            return false;
    }
    if(pJson.isMember("LAND"))
    {
        if(!validJsonOfField(2, "LAND", pJson["LAND"], err, true))
            return false;
    }
    if(pJson.isMember("KURZCODE"))
    {
        if(!validJsonOfField(3, "KURZCODE", pJson["KURZCODE"], err, true))
            return false;
    }
    if(pJson.isMember("PLZVORAUS_CD"))
    {
        if(!validJsonOfField(4, "PLZVORAUS_CD", pJson["PLZVORAUS_CD"], err, true))
            return false;
    }
    if(pJson.isMember("VORWAHL"))
    {
        if(!validJsonOfField(5, "VORWAHL", pJson["VORWAHL"], err, true))
            return false;
    }
    if(pJson.isMember("WAEHRUNGS_CD"))
    {
        if(!validJsonOfField(6, "WAEHRUNGS_CD", pJson["WAEHRUNGS_CD"], err, true))
            return false;
    }
    if(pJson.isMember("INLAND_CD"))
    {
        if(!validJsonOfField(7, "INLAND_CD", pJson["INLAND_CD"], err, true))
            return false;
    }
    if(pJson.isMember("VERSANDPRIORITAET_CD"))
    {
        if(!validJsonOfField(8, "VERSANDPRIORITAET_CD", pJson["VERSANDPRIORITAET_CD"], err, true))
            return false;
    }
    if(pJson.isMember("RISIKOGRUPPE"))
    {
        if(!validJsonOfField(9, "RISIKOGRUPPE", pJson["RISIKOGRUPPE"], err, true))
            return false;
    }
    if(pJson.isMember("RISKINDEX"))
    {
        if(!validJsonOfField(10, "RISKINDEX", pJson["RISKINDEX"], err, true))
            return false;
    }
    if(pJson.isMember("EU_LAND_CD"))
    {
        if(!validJsonOfField(11, "EU_LAND_CD", pJson["EU_LAND_CD"], err, true))
            return false;
    }
    if(pJson.isMember("CRTDATUM"))
    {
        if(!validJsonOfField(12, "CRTDATUM", pJson["CRTDATUM"], err, true))
            return false;
    }
    if(pJson.isMember("CRTUSER"))
    {
        if(!validJsonOfField(13, "CRTUSER", pJson["CRTUSER"], err, true))
            return false;
    }
    if(pJson.isMember("MUTDATUM"))
    {
        if(!validJsonOfField(14, "MUTDATUM", pJson["MUTDATUM"], err, true))
            return false;
    }
    if(pJson.isMember("MUTUSER"))
    {
        if(!validJsonOfField(15, "MUTUSER", pJson["MUTUSER"], err, true))
            return false;
    }
    if(pJson.isMember("LOESCH_CD"))
    {
        if(!validJsonOfField(16, "LOESCH_CD", pJson["LOESCH_CD"], err, true))
            return false;
    }
    if(pJson.isMember("LOESCHDATUM"))
    {
        if(!validJsonOfField(17, "LOESCHDATUM", pJson["LOESCHDATUM"], err, true))
            return false;
    }
    if(pJson.isMember("LOESCHUSER"))
    {
        if(!validJsonOfField(18, "LOESCHUSER", pJson["LOESCHUSER"], err, true))
            return false;
    }
    if(pJson.isMember("FF_TAXCODE"))
    {
        if(!validJsonOfField(19, "FF_TAXCODE", pJson["FF_TAXCODE"], err, true))
            return false;
    }
    if(pJson.isMember("FF_LANDCODE"))
    {
        if(!validJsonOfField(20, "FF_LANDCODE", pJson["FF_LANDCODE"], err, true))
            return false;
    }
    if(pJson.isMember("ABGST_RELEVANT_CD"))
    {
        if(!validJsonOfField(21, "ABGST_RELEVANT_CD", pJson["ABGST_RELEVANT_CD"], err, true))
            return false;
    }
    if(pJson.isMember("US_FATCA_LAND_CD"))
    {
        if(!validJsonOfField(22, "US_FATCA_LAND_CD", pJson["US_FATCA_LAND_CD"], err, true))
            return false;
    }
    if(pJson.isMember("IGA_STATUS"))
    {
        if(!validJsonOfField(23, "IGA_STATUS", pJson["IGA_STATUS"], err, true))
            return false;
    }
    if(pJson.isMember("US_TERRITORY_CD"))
    {
        if(!validJsonOfField(24, "US_TERRITORY_CD", pJson["US_TERRITORY_CD"], err, true))
            return false;
    }
    if(pJson.isMember("DESTINATION_CD"))
    {
        if(!validJsonOfField(25, "DESTINATION_CD", pJson["DESTINATION_CD"], err, true))
            return false;
    }
    if(pJson.isMember("AUFTEILUNG"))
    {
        if(!validJsonOfField(26, "AUFTEILUNG", pJson["AUFTEILUNG"], err, true))
            return false;
    }
    if(pJson.isMember("STATFISCC_INLAND_CD"))
    {
        if(!validJsonOfField(27, "STATFISCC_INLAND_CD", pJson["STATFISCC_INLAND_CD"], err, true))
            return false;
    }
    if(pJson.isMember("AEOI_REPORTABLE_CD"))
    {
        if(!validJsonOfField(28, "AEOI_REPORTABLE_CD", pJson["AEOI_REPORTABLE_CD"], err, true))
            return false;
    }
    if(pJson.isMember("AEOI_REP_AGREEMENT_DATE"))
    {
        if(!validJsonOfField(29, "AEOI_REP_AGREEMENT_DATE", pJson["AEOI_REP_AGREEMENT_DATE"], err, true))
            return false;
    }
    if(pJson.isMember("AEOI_START_REPORTING_YEAR"))
    {
        if(!validJsonOfField(30, "AEOI_START_REPORTING_YEAR", pJson["AEOI_START_REPORTING_YEAR"], err, true))
            return false;
    }
    if(pJson.isMember("TIN_AVAILABLE_CD"))
    {
        if(!validJsonOfField(31, "TIN_AVAILABLE_CD", pJson["TIN_AVAILABLE_CD"], err, true))
            return false;
    }
    if(pJson.isMember("JURISDICTION_OF_BANK_CD"))
    {
        if(!validJsonOfField(32, "JURISDICTION_OF_BANK_CD", pJson["JURISDICTION_OF_BANK_CD"], err, true))
            return false;
    }
    if(pJson.isMember("AEOI_FIRST_YEAR_OF_REPORTING"))
    {
        if(!validJsonOfField(33, "AEOI_FIRST_YEAR_OF_REPORTING", pJson["AEOI_FIRST_YEAR_OF_REPORTING"], err, true))
            return false;
    }
    if(pJson.isMember("AEOI_REP_WIDER_APPROACH_CD"))
    {
        if(!validJsonOfField(34, "AEOI_REP_WIDER_APPROACH_CD", pJson["AEOI_REP_WIDER_APPROACH_CD"], err, true))
            return false;
    }
    if(pJson.isMember("NAFTA_COUNTRY_CD"))
    {
        if(!validJsonOfField(35, "NAFTA_COUNTRY_CD", pJson["NAFTA_COUNTRY_CD"], err, true))
            return false;
    }
    if(pJson.isMember("EEA_COUNTRY_CD"))
    {
        if(!validJsonOfField(36, "EEA_COUNTRY_CD", pJson["EEA_COUNTRY_CD"], err, true))
            return false;
    }
    if(pJson.isMember("US_CDI_COUNTRY_CD"))
    {
        if(!validJsonOfField(37, "US_CDI_COUNTRY_CD", pJson["US_CDI_COUNTRY_CD"], err, true))
            return false;
    }
    if(pJson.isMember("AEOI_PARTICIPATING_COUNTRY_CD"))
    {
        if(!validJsonOfField(38, "AEOI_PARTICIPATING_COUNTRY_CD", pJson["AEOI_PARTICIPATING_COUNTRY_CD"], err, true))
            return false;
    }
    if(pJson.isMember("LAND_A3_CD"))
    {
        if(!validJsonOfField(39, "LAND_A3_CD", pJson["LAND_A3_CD"], err, true))
            return false;
    }
    if(pJson.isMember("CDI_WITH_SWITZERLAND_CD"))
    {
        if(!validJsonOfField(40, "CDI_WITH_SWITZERLAND_CD", pJson["CDI_WITH_SWITZERLAND_CD"], err, true))
            return false;
    }
    return true;
}
bool Land::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 41)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[15].empty())
      {
          if(pJson.isMember(pMasqueradingVector[15]))
          {
              if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[16].empty())
      {
          if(pJson.isMember(pMasqueradingVector[16]))
          {
              if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[17].empty())
      {
          if(pJson.isMember(pMasqueradingVector[17]))
          {
              if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[18].empty())
      {
          if(pJson.isMember(pMasqueradingVector[18]))
          {
              if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[19].empty())
      {
          if(pJson.isMember(pMasqueradingVector[19]))
          {
              if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[20].empty())
      {
          if(pJson.isMember(pMasqueradingVector[20]))
          {
              if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[21].empty())
      {
          if(pJson.isMember(pMasqueradingVector[21]))
          {
              if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[22].empty())
      {
          if(pJson.isMember(pMasqueradingVector[22]))
          {
              if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[23].empty())
      {
          if(pJson.isMember(pMasqueradingVector[23]))
          {
              if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[24].empty())
      {
          if(pJson.isMember(pMasqueradingVector[24]))
          {
              if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[25].empty())
      {
          if(pJson.isMember(pMasqueradingVector[25]))
          {
              if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[26].empty())
      {
          if(pJson.isMember(pMasqueradingVector[26]))
          {
              if(!validJsonOfField(26, pMasqueradingVector[26], pJson[pMasqueradingVector[26]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[27].empty())
      {
          if(pJson.isMember(pMasqueradingVector[27]))
          {
              if(!validJsonOfField(27, pMasqueradingVector[27], pJson[pMasqueradingVector[27]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[28].empty())
      {
          if(pJson.isMember(pMasqueradingVector[28]))
          {
              if(!validJsonOfField(28, pMasqueradingVector[28], pJson[pMasqueradingVector[28]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[29].empty())
      {
          if(pJson.isMember(pMasqueradingVector[29]))
          {
              if(!validJsonOfField(29, pMasqueradingVector[29], pJson[pMasqueradingVector[29]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[30].empty())
      {
          if(pJson.isMember(pMasqueradingVector[30]))
          {
              if(!validJsonOfField(30, pMasqueradingVector[30], pJson[pMasqueradingVector[30]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[31].empty())
      {
          if(pJson.isMember(pMasqueradingVector[31]))
          {
              if(!validJsonOfField(31, pMasqueradingVector[31], pJson[pMasqueradingVector[31]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[32].empty())
      {
          if(pJson.isMember(pMasqueradingVector[32]))
          {
              if(!validJsonOfField(32, pMasqueradingVector[32], pJson[pMasqueradingVector[32]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[33].empty())
      {
          if(pJson.isMember(pMasqueradingVector[33]))
          {
              if(!validJsonOfField(33, pMasqueradingVector[33], pJson[pMasqueradingVector[33]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[34].empty())
      {
          if(pJson.isMember(pMasqueradingVector[34]))
          {
              if(!validJsonOfField(34, pMasqueradingVector[34], pJson[pMasqueradingVector[34]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[35].empty())
      {
          if(pJson.isMember(pMasqueradingVector[35]))
          {
              if(!validJsonOfField(35, pMasqueradingVector[35], pJson[pMasqueradingVector[35]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[36].empty())
      {
          if(pJson.isMember(pMasqueradingVector[36]))
          {
              if(!validJsonOfField(36, pMasqueradingVector[36], pJson[pMasqueradingVector[36]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[37].empty())
      {
          if(pJson.isMember(pMasqueradingVector[37]))
          {
              if(!validJsonOfField(37, pMasqueradingVector[37], pJson[pMasqueradingVector[37]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[38].empty())
      {
          if(pJson.isMember(pMasqueradingVector[38]))
          {
              if(!validJsonOfField(38, pMasqueradingVector[38], pJson[pMasqueradingVector[38]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[39].empty())
      {
          if(pJson.isMember(pMasqueradingVector[39]))
          {
              if(!validJsonOfField(39, pMasqueradingVector[39], pJson[pMasqueradingVector[39]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[40].empty())
      {
          if(pJson.isMember(pMasqueradingVector[40]))
          {
              if(!validJsonOfField(40, pMasqueradingVector[40], pJson[pMasqueradingVector[40]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Land::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("LAND_CD"))
    {
        if(!validJsonOfField(0, "LAND_CD", pJson["LAND_CD"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("AUFETIKETTE_CD"))
    {
        if(!validJsonOfField(1, "AUFETIKETTE_CD", pJson["AUFETIKETTE_CD"], err, false))
            return false;
    }
    if(pJson.isMember("LAND"))
    {
        if(!validJsonOfField(2, "LAND", pJson["LAND"], err, false))
            return false;
    }
    if(pJson.isMember("KURZCODE"))
    {
        if(!validJsonOfField(3, "KURZCODE", pJson["KURZCODE"], err, false))
            return false;
    }
    if(pJson.isMember("PLZVORAUS_CD"))
    {
        if(!validJsonOfField(4, "PLZVORAUS_CD", pJson["PLZVORAUS_CD"], err, false))
            return false;
    }
    if(pJson.isMember("VORWAHL"))
    {
        if(!validJsonOfField(5, "VORWAHL", pJson["VORWAHL"], err, false))
            return false;
    }
    if(pJson.isMember("WAEHRUNGS_CD"))
    {
        if(!validJsonOfField(6, "WAEHRUNGS_CD", pJson["WAEHRUNGS_CD"], err, false))
            return false;
    }
    if(pJson.isMember("INLAND_CD"))
    {
        if(!validJsonOfField(7, "INLAND_CD", pJson["INLAND_CD"], err, false))
            return false;
    }
    if(pJson.isMember("VERSANDPRIORITAET_CD"))
    {
        if(!validJsonOfField(8, "VERSANDPRIORITAET_CD", pJson["VERSANDPRIORITAET_CD"], err, false))
            return false;
    }
    if(pJson.isMember("RISIKOGRUPPE"))
    {
        if(!validJsonOfField(9, "RISIKOGRUPPE", pJson["RISIKOGRUPPE"], err, false))
            return false;
    }
    if(pJson.isMember("RISKINDEX"))
    {
        if(!validJsonOfField(10, "RISKINDEX", pJson["RISKINDEX"], err, false))
            return false;
    }
    if(pJson.isMember("EU_LAND_CD"))
    {
        if(!validJsonOfField(11, "EU_LAND_CD", pJson["EU_LAND_CD"], err, false))
            return false;
    }
    if(pJson.isMember("CRTDATUM"))
    {
        if(!validJsonOfField(12, "CRTDATUM", pJson["CRTDATUM"], err, false))
            return false;
    }
    if(pJson.isMember("CRTUSER"))
    {
        if(!validJsonOfField(13, "CRTUSER", pJson["CRTUSER"], err, false))
            return false;
    }
    if(pJson.isMember("MUTDATUM"))
    {
        if(!validJsonOfField(14, "MUTDATUM", pJson["MUTDATUM"], err, false))
            return false;
    }
    if(pJson.isMember("MUTUSER"))
    {
        if(!validJsonOfField(15, "MUTUSER", pJson["MUTUSER"], err, false))
            return false;
    }
    if(pJson.isMember("LOESCH_CD"))
    {
        if(!validJsonOfField(16, "LOESCH_CD", pJson["LOESCH_CD"], err, false))
            return false;
    }
    if(pJson.isMember("LOESCHDATUM"))
    {
        if(!validJsonOfField(17, "LOESCHDATUM", pJson["LOESCHDATUM"], err, false))
            return false;
    }
    if(pJson.isMember("LOESCHUSER"))
    {
        if(!validJsonOfField(18, "LOESCHUSER", pJson["LOESCHUSER"], err, false))
            return false;
    }
    if(pJson.isMember("FF_TAXCODE"))
    {
        if(!validJsonOfField(19, "FF_TAXCODE", pJson["FF_TAXCODE"], err, false))
            return false;
    }
    if(pJson.isMember("FF_LANDCODE"))
    {
        if(!validJsonOfField(20, "FF_LANDCODE", pJson["FF_LANDCODE"], err, false))
            return false;
    }
    if(pJson.isMember("ABGST_RELEVANT_CD"))
    {
        if(!validJsonOfField(21, "ABGST_RELEVANT_CD", pJson["ABGST_RELEVANT_CD"], err, false))
            return false;
    }
    if(pJson.isMember("US_FATCA_LAND_CD"))
    {
        if(!validJsonOfField(22, "US_FATCA_LAND_CD", pJson["US_FATCA_LAND_CD"], err, false))
            return false;
    }
    if(pJson.isMember("IGA_STATUS"))
    {
        if(!validJsonOfField(23, "IGA_STATUS", pJson["IGA_STATUS"], err, false))
            return false;
    }
    if(pJson.isMember("US_TERRITORY_CD"))
    {
        if(!validJsonOfField(24, "US_TERRITORY_CD", pJson["US_TERRITORY_CD"], err, false))
            return false;
    }
    if(pJson.isMember("DESTINATION_CD"))
    {
        if(!validJsonOfField(25, "DESTINATION_CD", pJson["DESTINATION_CD"], err, false))
            return false;
    }
    if(pJson.isMember("AUFTEILUNG"))
    {
        if(!validJsonOfField(26, "AUFTEILUNG", pJson["AUFTEILUNG"], err, false))
            return false;
    }
    if(pJson.isMember("STATFISCC_INLAND_CD"))
    {
        if(!validJsonOfField(27, "STATFISCC_INLAND_CD", pJson["STATFISCC_INLAND_CD"], err, false))
            return false;
    }
    if(pJson.isMember("AEOI_REPORTABLE_CD"))
    {
        if(!validJsonOfField(28, "AEOI_REPORTABLE_CD", pJson["AEOI_REPORTABLE_CD"], err, false))
            return false;
    }
    if(pJson.isMember("AEOI_REP_AGREEMENT_DATE"))
    {
        if(!validJsonOfField(29, "AEOI_REP_AGREEMENT_DATE", pJson["AEOI_REP_AGREEMENT_DATE"], err, false))
            return false;
    }
    if(pJson.isMember("AEOI_START_REPORTING_YEAR"))
    {
        if(!validJsonOfField(30, "AEOI_START_REPORTING_YEAR", pJson["AEOI_START_REPORTING_YEAR"], err, false))
            return false;
    }
    if(pJson.isMember("TIN_AVAILABLE_CD"))
    {
        if(!validJsonOfField(31, "TIN_AVAILABLE_CD", pJson["TIN_AVAILABLE_CD"], err, false))
            return false;
    }
    if(pJson.isMember("JURISDICTION_OF_BANK_CD"))
    {
        if(!validJsonOfField(32, "JURISDICTION_OF_BANK_CD", pJson["JURISDICTION_OF_BANK_CD"], err, false))
            return false;
    }
    if(pJson.isMember("AEOI_FIRST_YEAR_OF_REPORTING"))
    {
        if(!validJsonOfField(33, "AEOI_FIRST_YEAR_OF_REPORTING", pJson["AEOI_FIRST_YEAR_OF_REPORTING"], err, false))
            return false;
    }
    if(pJson.isMember("AEOI_REP_WIDER_APPROACH_CD"))
    {
        if(!validJsonOfField(34, "AEOI_REP_WIDER_APPROACH_CD", pJson["AEOI_REP_WIDER_APPROACH_CD"], err, false))
            return false;
    }
    if(pJson.isMember("NAFTA_COUNTRY_CD"))
    {
        if(!validJsonOfField(35, "NAFTA_COUNTRY_CD", pJson["NAFTA_COUNTRY_CD"], err, false))
            return false;
    }
    if(pJson.isMember("EEA_COUNTRY_CD"))
    {
        if(!validJsonOfField(36, "EEA_COUNTRY_CD", pJson["EEA_COUNTRY_CD"], err, false))
            return false;
    }
    if(pJson.isMember("US_CDI_COUNTRY_CD"))
    {
        if(!validJsonOfField(37, "US_CDI_COUNTRY_CD", pJson["US_CDI_COUNTRY_CD"], err, false))
            return false;
    }
    if(pJson.isMember("AEOI_PARTICIPATING_COUNTRY_CD"))
    {
        if(!validJsonOfField(38, "AEOI_PARTICIPATING_COUNTRY_CD", pJson["AEOI_PARTICIPATING_COUNTRY_CD"], err, false))
            return false;
    }
    if(pJson.isMember("LAND_A3_CD"))
    {
        if(!validJsonOfField(39, "LAND_A3_CD", pJson["LAND_A3_CD"], err, false))
            return false;
    }
    if(pJson.isMember("CDI_WITH_SWITZERLAND_CD"))
    {
        if(!validJsonOfField(40, "CDI_WITH_SWITZERLAND_CD", pJson["CDI_WITH_SWITZERLAND_CD"], err, false))
            return false;
    }
    return true;
}
bool Land::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 41)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
      if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
      {
          if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
              return false;
      }
      if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
      {
          if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
              return false;
      }
      if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
      {
          if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
              return false;
      }
      if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
      {
          if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
              return false;
      }
      if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
      {
          if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
              return false;
      }
      if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
      {
          if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
              return false;
      }
      if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
      {
          if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, false))
              return false;
      }
      if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
      {
          if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, false))
              return false;
      }
      if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
      {
          if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, false))
              return false;
      }
      if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
      {
          if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, false))
              return false;
      }
      if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
      {
          if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, false))
              return false;
      }
      if(!pMasqueradingVector[26].empty() && pJson.isMember(pMasqueradingVector[26]))
      {
          if(!validJsonOfField(26, pMasqueradingVector[26], pJson[pMasqueradingVector[26]], err, false))
              return false;
      }
      if(!pMasqueradingVector[27].empty() && pJson.isMember(pMasqueradingVector[27]))
      {
          if(!validJsonOfField(27, pMasqueradingVector[27], pJson[pMasqueradingVector[27]], err, false))
              return false;
      }
      if(!pMasqueradingVector[28].empty() && pJson.isMember(pMasqueradingVector[28]))
      {
          if(!validJsonOfField(28, pMasqueradingVector[28], pJson[pMasqueradingVector[28]], err, false))
              return false;
      }
      if(!pMasqueradingVector[29].empty() && pJson.isMember(pMasqueradingVector[29]))
      {
          if(!validJsonOfField(29, pMasqueradingVector[29], pJson[pMasqueradingVector[29]], err, false))
              return false;
      }
      if(!pMasqueradingVector[30].empty() && pJson.isMember(pMasqueradingVector[30]))
      {
          if(!validJsonOfField(30, pMasqueradingVector[30], pJson[pMasqueradingVector[30]], err, false))
              return false;
      }
      if(!pMasqueradingVector[31].empty() && pJson.isMember(pMasqueradingVector[31]))
      {
          if(!validJsonOfField(31, pMasqueradingVector[31], pJson[pMasqueradingVector[31]], err, false))
              return false;
      }
      if(!pMasqueradingVector[32].empty() && pJson.isMember(pMasqueradingVector[32]))
      {
          if(!validJsonOfField(32, pMasqueradingVector[32], pJson[pMasqueradingVector[32]], err, false))
              return false;
      }
      if(!pMasqueradingVector[33].empty() && pJson.isMember(pMasqueradingVector[33]))
      {
          if(!validJsonOfField(33, pMasqueradingVector[33], pJson[pMasqueradingVector[33]], err, false))
              return false;
      }
      if(!pMasqueradingVector[34].empty() && pJson.isMember(pMasqueradingVector[34]))
      {
          if(!validJsonOfField(34, pMasqueradingVector[34], pJson[pMasqueradingVector[34]], err, false))
              return false;
      }
      if(!pMasqueradingVector[35].empty() && pJson.isMember(pMasqueradingVector[35]))
      {
          if(!validJsonOfField(35, pMasqueradingVector[35], pJson[pMasqueradingVector[35]], err, false))
              return false;
      }
      if(!pMasqueradingVector[36].empty() && pJson.isMember(pMasqueradingVector[36]))
      {
          if(!validJsonOfField(36, pMasqueradingVector[36], pJson[pMasqueradingVector[36]], err, false))
              return false;
      }
      if(!pMasqueradingVector[37].empty() && pJson.isMember(pMasqueradingVector[37]))
      {
          if(!validJsonOfField(37, pMasqueradingVector[37], pJson[pMasqueradingVector[37]], err, false))
              return false;
      }
      if(!pMasqueradingVector[38].empty() && pJson.isMember(pMasqueradingVector[38]))
      {
          if(!validJsonOfField(38, pMasqueradingVector[38], pJson[pMasqueradingVector[38]], err, false))
              return false;
      }
      if(!pMasqueradingVector[39].empty() && pJson.isMember(pMasqueradingVector[39]))
      {
          if(!validJsonOfField(39, pMasqueradingVector[39], pJson[pMasqueradingVector[39]], err, false))
              return false;
      }
      if(!pMasqueradingVector[40].empty() && pJson.isMember(pMasqueradingVector[40]))
      {
          if(!validJsonOfField(40, pMasqueradingVector[40], pJson[pMasqueradingVector[40]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Land::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 60)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 60)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 5)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 5)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 10)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 10)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 16:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 17:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 18:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 19:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }

            break;
        case 20:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }

            break;
        case 21:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 22:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 23:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 24:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 25:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 26:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 30)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 30)";
                return false;
            }

            break;
        case 27:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 28:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 29:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 30:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 31:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 32:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 33:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 34:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 35:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 36:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 37:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 38:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        case 39:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 3)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 3)";
                return false;
            }

            break;
        case 40:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 1)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 1)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
