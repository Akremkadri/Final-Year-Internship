/**
 *
 *  Land.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace cim_web
{

class Land
{
  public:
    struct Cols
    {
        static const std::string _LAND_CD;
        static const std::string _AUFETIKETTE_CD;
        static const std::string _LAND;
        static const std::string _KURZCODE;
        static const std::string _PLZVORAUS_CD;
        static const std::string _VORWAHL;
        static const std::string _WAEHRUNGS_CD;
        static const std::string _INLAND_CD;
        static const std::string _VERSANDPRIORITAET_CD;
        static const std::string _RISIKOGRUPPE;
        static const std::string _RISKINDEX;
        static const std::string _EU_LAND_CD;
        static const std::string _CRTDATUM;
        static const std::string _CRTUSER;
        static const std::string _MUTDATUM;
        static const std::string _MUTUSER;
        static const std::string _LOESCH_CD;
        static const std::string _LOESCHDATUM;
        static const std::string _LOESCHUSER;
        static const std::string _FF_TAXCODE;
        static const std::string _FF_LANDCODE;
        static const std::string _ABGST_RELEVANT_CD;
        static const std::string _US_FATCA_LAND_CD;
        static const std::string _IGA_STATUS;
        static const std::string _US_TERRITORY_CD;
        static const std::string _DESTINATION_CD;
        static const std::string _AUFTEILUNG;
        static const std::string _STATFISCC_INLAND_CD;
        static const std::string _AEOI_REPORTABLE_CD;
        static const std::string _AEOI_REP_AGREEMENT_DATE;
        static const std::string _AEOI_START_REPORTING_YEAR;
        static const std::string _TIN_AVAILABLE_CD;
        static const std::string _JURISDICTION_OF_BANK_CD;
        static const std::string _AEOI_FIRST_YEAR_OF_REPORTING;
        static const std::string _AEOI_REP_WIDER_APPROACH_CD;
        static const std::string _NAFTA_COUNTRY_CD;
        static const std::string _EEA_COUNTRY_CD;
        static const std::string _US_CDI_COUNTRY_CD;
        static const std::string _AEOI_PARTICIPATING_COUNTRY_CD;
        static const std::string _LAND_A3_CD;
        static const std::string _CDI_WITH_SWITZERLAND_CD;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = std::string;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Land(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Land(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Land(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Land() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column LAND_CD  */
    ///Get the value of the column LAND_CD, returns the default value if the column is null
    const std::string &getValueOfLandCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLandCd() const noexcept;
    ///Set the value of the column LAND_CD
    void setLandCd(const std::string &pLandCd) noexcept;
    void setLandCd(std::string &&pLandCd) noexcept;

    /**  For column AUFETIKETTE_CD  */
    ///Get the value of the column AUFETIKETTE_CD, returns the default value if the column is null
    const std::string &getValueOfAufetiketteCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAufetiketteCd() const noexcept;
    ///Set the value of the column AUFETIKETTE_CD
    void setAufetiketteCd(const std::string &pAufetiketteCd) noexcept;
    void setAufetiketteCd(std::string &&pAufetiketteCd) noexcept;
    void setAufetiketteCdToNull() noexcept;

    /**  For column LAND  */
    ///Get the value of the column LAND, returns the default value if the column is null
    const std::string &getValueOfLand() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLand() const noexcept;
    ///Set the value of the column LAND
    void setLand(const std::string &pLand) noexcept;
    void setLand(std::string &&pLand) noexcept;
    void setLandToNull() noexcept;

    /**  For column KURZCODE  */
    ///Get the value of the column KURZCODE, returns the default value if the column is null
    const std::string &getValueOfKurzcode() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getKurzcode() const noexcept;
    ///Set the value of the column KURZCODE
    void setKurzcode(const std::string &pKurzcode) noexcept;
    void setKurzcode(std::string &&pKurzcode) noexcept;
    void setKurzcodeToNull() noexcept;

    /**  For column PLZVORAUS_CD  */
    ///Get the value of the column PLZVORAUS_CD, returns the default value if the column is null
    const std::string &getValueOfPlzvorausCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPlzvorausCd() const noexcept;
    ///Set the value of the column PLZVORAUS_CD
    void setPlzvorausCd(const std::string &pPlzvorausCd) noexcept;
    void setPlzvorausCd(std::string &&pPlzvorausCd) noexcept;
    void setPlzvorausCdToNull() noexcept;

    /**  For column VORWAHL  */
    ///Get the value of the column VORWAHL, returns the default value if the column is null
    const std::string &getValueOfVorwahl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getVorwahl() const noexcept;
    ///Set the value of the column VORWAHL
    void setVorwahl(const std::string &pVorwahl) noexcept;
    void setVorwahl(std::string &&pVorwahl) noexcept;
    void setVorwahlToNull() noexcept;

    /**  For column WAEHRUNGS_CD  */
    ///Get the value of the column WAEHRUNGS_CD, returns the default value if the column is null
    const std::string &getValueOfWaehrungsCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getWaehrungsCd() const noexcept;
    ///Set the value of the column WAEHRUNGS_CD
    void setWaehrungsCd(const std::string &pWaehrungsCd) noexcept;
    void setWaehrungsCd(std::string &&pWaehrungsCd) noexcept;
    void setWaehrungsCdToNull() noexcept;

    /**  For column INLAND_CD  */
    ///Get the value of the column INLAND_CD, returns the default value if the column is null
    const std::string &getValueOfInlandCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getInlandCd() const noexcept;
    ///Set the value of the column INLAND_CD
    void setInlandCd(const std::string &pInlandCd) noexcept;
    void setInlandCd(std::string &&pInlandCd) noexcept;
    void setInlandCdToNull() noexcept;

    /**  For column VERSANDPRIORITAET_CD  */
    ///Get the value of the column VERSANDPRIORITAET_CD, returns the default value if the column is null
    const std::string &getValueOfVersandprioritaetCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getVersandprioritaetCd() const noexcept;
    ///Set the value of the column VERSANDPRIORITAET_CD
    void setVersandprioritaetCd(const std::string &pVersandprioritaetCd) noexcept;
    void setVersandprioritaetCd(std::string &&pVersandprioritaetCd) noexcept;
    void setVersandprioritaetCdToNull() noexcept;

    /**  For column RISIKOGRUPPE  */
    ///Get the value of the column RISIKOGRUPPE, returns the default value if the column is null
    const std::string &getValueOfRisikogruppe() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRisikogruppe() const noexcept;
    ///Set the value of the column RISIKOGRUPPE
    void setRisikogruppe(const std::string &pRisikogruppe) noexcept;
    void setRisikogruppe(std::string &&pRisikogruppe) noexcept;
    void setRisikogruppeToNull() noexcept;

    /**  For column RISKINDEX  */
    ///Get the value of the column RISKINDEX, returns the default value if the column is null
    const double &getValueOfRiskindex() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getRiskindex() const noexcept;
    ///Set the value of the column RISKINDEX
    void setRiskindex(const double &pRiskindex) noexcept;
    void setRiskindexToNull() noexcept;

    /**  For column EU_LAND_CD  */
    ///Get the value of the column EU_LAND_CD, returns the default value if the column is null
    const std::string &getValueOfEuLandCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEuLandCd() const noexcept;
    ///Set the value of the column EU_LAND_CD
    void setEuLandCd(const std::string &pEuLandCd) noexcept;
    void setEuLandCd(std::string &&pEuLandCd) noexcept;
    void setEuLandCdToNull() noexcept;

    /**  For column CRTDATUM  */
    ///Get the value of the column CRTDATUM, returns the default value if the column is null
    const ::trantor::Date &getValueOfCrtdatum() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCrtdatum() const noexcept;
    ///Set the value of the column CRTDATUM
    void setCrtdatum(const ::trantor::Date &pCrtdatum) noexcept;
    void setCrtdatumToNull() noexcept;

    /**  For column CRTUSER  */
    ///Get the value of the column CRTUSER, returns the default value if the column is null
    const std::string &getValueOfCrtuser() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCrtuser() const noexcept;
    ///Set the value of the column CRTUSER
    void setCrtuser(const std::string &pCrtuser) noexcept;
    void setCrtuser(std::string &&pCrtuser) noexcept;
    void setCrtuserToNull() noexcept;

    /**  For column MUTDATUM  */
    ///Get the value of the column MUTDATUM, returns the default value if the column is null
    const ::trantor::Date &getValueOfMutdatum() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getMutdatum() const noexcept;
    ///Set the value of the column MUTDATUM
    void setMutdatum(const ::trantor::Date &pMutdatum) noexcept;
    void setMutdatumToNull() noexcept;

    /**  For column MUTUSER  */
    ///Get the value of the column MUTUSER, returns the default value if the column is null
    const std::string &getValueOfMutuser() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getMutuser() const noexcept;
    ///Set the value of the column MUTUSER
    void setMutuser(const std::string &pMutuser) noexcept;
    void setMutuser(std::string &&pMutuser) noexcept;
    void setMutuserToNull() noexcept;

    /**  For column LOESCH_CD  */
    ///Get the value of the column LOESCH_CD, returns the default value if the column is null
    const std::string &getValueOfLoeschCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLoeschCd() const noexcept;
    ///Set the value of the column LOESCH_CD
    void setLoeschCd(const std::string &pLoeschCd) noexcept;
    void setLoeschCd(std::string &&pLoeschCd) noexcept;
    void setLoeschCdToNull() noexcept;

    /**  For column LOESCHDATUM  */
    ///Get the value of the column LOESCHDATUM, returns the default value if the column is null
    const ::trantor::Date &getValueOfLoeschdatum() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getLoeschdatum() const noexcept;
    ///Set the value of the column LOESCHDATUM
    void setLoeschdatum(const ::trantor::Date &pLoeschdatum) noexcept;
    void setLoeschdatumToNull() noexcept;

    /**  For column LOESCHUSER  */
    ///Get the value of the column LOESCHUSER, returns the default value if the column is null
    const std::string &getValueOfLoeschuser() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLoeschuser() const noexcept;
    ///Set the value of the column LOESCHUSER
    void setLoeschuser(const std::string &pLoeschuser) noexcept;
    void setLoeschuser(std::string &&pLoeschuser) noexcept;
    void setLoeschuserToNull() noexcept;

    /**  For column FF_TAXCODE  */
    ///Get the value of the column FF_TAXCODE, returns the default value if the column is null
    const std::string &getValueOfFfTaxcode() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFfTaxcode() const noexcept;
    ///Set the value of the column FF_TAXCODE
    void setFfTaxcode(const std::string &pFfTaxcode) noexcept;
    void setFfTaxcode(std::string &&pFfTaxcode) noexcept;
    void setFfTaxcodeToNull() noexcept;

    /**  For column FF_LANDCODE  */
    ///Get the value of the column FF_LANDCODE, returns the default value if the column is null
    const std::string &getValueOfFfLandcode() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFfLandcode() const noexcept;
    ///Set the value of the column FF_LANDCODE
    void setFfLandcode(const std::string &pFfLandcode) noexcept;
    void setFfLandcode(std::string &&pFfLandcode) noexcept;
    void setFfLandcodeToNull() noexcept;

    /**  For column ABGST_RELEVANT_CD  */
    ///Get the value of the column ABGST_RELEVANT_CD, returns the default value if the column is null
    const std::string &getValueOfAbgstRelevantCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAbgstRelevantCd() const noexcept;
    ///Set the value of the column ABGST_RELEVANT_CD
    void setAbgstRelevantCd(const std::string &pAbgstRelevantCd) noexcept;
    void setAbgstRelevantCd(std::string &&pAbgstRelevantCd) noexcept;
    void setAbgstRelevantCdToNull() noexcept;

    /**  For column US_FATCA_LAND_CD  */
    ///Get the value of the column US_FATCA_LAND_CD, returns the default value if the column is null
    const std::string &getValueOfUsFatcaLandCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUsFatcaLandCd() const noexcept;
    ///Set the value of the column US_FATCA_LAND_CD
    void setUsFatcaLandCd(const std::string &pUsFatcaLandCd) noexcept;
    void setUsFatcaLandCd(std::string &&pUsFatcaLandCd) noexcept;
    void setUsFatcaLandCdToNull() noexcept;

    /**  For column IGA_STATUS  */
    ///Get the value of the column IGA_STATUS, returns the default value if the column is null
    const double &getValueOfIgaStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getIgaStatus() const noexcept;
    ///Set the value of the column IGA_STATUS
    void setIgaStatus(const double &pIgaStatus) noexcept;
    void setIgaStatusToNull() noexcept;

    /**  For column US_TERRITORY_CD  */
    ///Get the value of the column US_TERRITORY_CD, returns the default value if the column is null
    const std::string &getValueOfUsTerritoryCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUsTerritoryCd() const noexcept;
    ///Set the value of the column US_TERRITORY_CD
    void setUsTerritoryCd(const std::string &pUsTerritoryCd) noexcept;
    void setUsTerritoryCd(std::string &&pUsTerritoryCd) noexcept;
    void setUsTerritoryCdToNull() noexcept;

    /**  For column DESTINATION_CD  */
    ///Get the value of the column DESTINATION_CD, returns the default value if the column is null
    const double &getValueOfDestinationCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getDestinationCd() const noexcept;
    ///Set the value of the column DESTINATION_CD
    void setDestinationCd(const double &pDestinationCd) noexcept;
    void setDestinationCdToNull() noexcept;

    /**  For column AUFTEILUNG  */
    ///Get the value of the column AUFTEILUNG, returns the default value if the column is null
    const std::string &getValueOfAufteilung() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAufteilung() const noexcept;
    ///Set the value of the column AUFTEILUNG
    void setAufteilung(const std::string &pAufteilung) noexcept;
    void setAufteilung(std::string &&pAufteilung) noexcept;
    void setAufteilungToNull() noexcept;

    /**  For column STATFISCC_INLAND_CD  */
    ///Get the value of the column STATFISCC_INLAND_CD, returns the default value if the column is null
    const std::string &getValueOfStatfisccInlandCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getStatfisccInlandCd() const noexcept;
    ///Set the value of the column STATFISCC_INLAND_CD
    void setStatfisccInlandCd(const std::string &pStatfisccInlandCd) noexcept;
    void setStatfisccInlandCd(std::string &&pStatfisccInlandCd) noexcept;
    void setStatfisccInlandCdToNull() noexcept;

    /**  For column AEOI_REPORTABLE_CD  */
    ///Get the value of the column AEOI_REPORTABLE_CD, returns the default value if the column is null
    const std::string &getValueOfAeoiReportableCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAeoiReportableCd() const noexcept;
    ///Set the value of the column AEOI_REPORTABLE_CD
    void setAeoiReportableCd(const std::string &pAeoiReportableCd) noexcept;
    void setAeoiReportableCd(std::string &&pAeoiReportableCd) noexcept;
    void setAeoiReportableCdToNull() noexcept;

    /**  For column AEOI_REP_AGREEMENT_DATE  */
    ///Get the value of the column AEOI_REP_AGREEMENT_DATE, returns the default value if the column is null
    const ::trantor::Date &getValueOfAeoiRepAgreementDate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getAeoiRepAgreementDate() const noexcept;
    ///Set the value of the column AEOI_REP_AGREEMENT_DATE
    void setAeoiRepAgreementDate(const ::trantor::Date &pAeoiRepAgreementDate) noexcept;
    void setAeoiRepAgreementDateToNull() noexcept;

    /**  For column AEOI_START_REPORTING_YEAR  */
    ///Get the value of the column AEOI_START_REPORTING_YEAR, returns the default value if the column is null
    const ::trantor::Date &getValueOfAeoiStartReportingYear() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getAeoiStartReportingYear() const noexcept;
    ///Set the value of the column AEOI_START_REPORTING_YEAR
    void setAeoiStartReportingYear(const ::trantor::Date &pAeoiStartReportingYear) noexcept;
    void setAeoiStartReportingYearToNull() noexcept;

    /**  For column TIN_AVAILABLE_CD  */
    ///Get the value of the column TIN_AVAILABLE_CD, returns the default value if the column is null
    const std::string &getValueOfTinAvailableCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTinAvailableCd() const noexcept;
    ///Set the value of the column TIN_AVAILABLE_CD
    void setTinAvailableCd(const std::string &pTinAvailableCd) noexcept;
    void setTinAvailableCd(std::string &&pTinAvailableCd) noexcept;
    void setTinAvailableCdToNull() noexcept;

    /**  For column JURISDICTION_OF_BANK_CD  */
    ///Get the value of the column JURISDICTION_OF_BANK_CD, returns the default value if the column is null
    const std::string &getValueOfJurisdictionOfBankCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getJurisdictionOfBankCd() const noexcept;
    ///Set the value of the column JURISDICTION_OF_BANK_CD
    void setJurisdictionOfBankCd(const std::string &pJurisdictionOfBankCd) noexcept;
    void setJurisdictionOfBankCd(std::string &&pJurisdictionOfBankCd) noexcept;
    void setJurisdictionOfBankCdToNull() noexcept;

    /**  For column AEOI_FIRST_YEAR_OF_REPORTING  */
    ///Get the value of the column AEOI_FIRST_YEAR_OF_REPORTING, returns the default value if the column is null
    const ::trantor::Date &getValueOfAeoiFirstYearOfReporting() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getAeoiFirstYearOfReporting() const noexcept;
    ///Set the value of the column AEOI_FIRST_YEAR_OF_REPORTING
    void setAeoiFirstYearOfReporting(const ::trantor::Date &pAeoiFirstYearOfReporting) noexcept;
    void setAeoiFirstYearOfReportingToNull() noexcept;

    /**  For column AEOI_REP_WIDER_APPROACH_CD  */
    ///Get the value of the column AEOI_REP_WIDER_APPROACH_CD, returns the default value if the column is null
    const std::string &getValueOfAeoiRepWiderApproachCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAeoiRepWiderApproachCd() const noexcept;
    ///Set the value of the column AEOI_REP_WIDER_APPROACH_CD
    void setAeoiRepWiderApproachCd(const std::string &pAeoiRepWiderApproachCd) noexcept;
    void setAeoiRepWiderApproachCd(std::string &&pAeoiRepWiderApproachCd) noexcept;
    void setAeoiRepWiderApproachCdToNull() noexcept;

    /**  For column NAFTA_COUNTRY_CD  */
    ///Get the value of the column NAFTA_COUNTRY_CD, returns the default value if the column is null
    const std::string &getValueOfNaftaCountryCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getNaftaCountryCd() const noexcept;
    ///Set the value of the column NAFTA_COUNTRY_CD
    void setNaftaCountryCd(const std::string &pNaftaCountryCd) noexcept;
    void setNaftaCountryCd(std::string &&pNaftaCountryCd) noexcept;
    void setNaftaCountryCdToNull() noexcept;

    /**  For column EEA_COUNTRY_CD  */
    ///Get the value of the column EEA_COUNTRY_CD, returns the default value if the column is null
    const std::string &getValueOfEeaCountryCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEeaCountryCd() const noexcept;
    ///Set the value of the column EEA_COUNTRY_CD
    void setEeaCountryCd(const std::string &pEeaCountryCd) noexcept;
    void setEeaCountryCd(std::string &&pEeaCountryCd) noexcept;
    void setEeaCountryCdToNull() noexcept;

    /**  For column US_CDI_COUNTRY_CD  */
    ///Get the value of the column US_CDI_COUNTRY_CD, returns the default value if the column is null
    const std::string &getValueOfUsCdiCountryCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUsCdiCountryCd() const noexcept;
    ///Set the value of the column US_CDI_COUNTRY_CD
    void setUsCdiCountryCd(const std::string &pUsCdiCountryCd) noexcept;
    void setUsCdiCountryCd(std::string &&pUsCdiCountryCd) noexcept;
    void setUsCdiCountryCdToNull() noexcept;

    /**  For column AEOI_PARTICIPATING_COUNTRY_CD  */
    ///Get the value of the column AEOI_PARTICIPATING_COUNTRY_CD, returns the default value if the column is null
    const std::string &getValueOfAeoiParticipatingCountryCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAeoiParticipatingCountryCd() const noexcept;
    ///Set the value of the column AEOI_PARTICIPATING_COUNTRY_CD
    void setAeoiParticipatingCountryCd(const std::string &pAeoiParticipatingCountryCd) noexcept;
    void setAeoiParticipatingCountryCd(std::string &&pAeoiParticipatingCountryCd) noexcept;
    void setAeoiParticipatingCountryCdToNull() noexcept;

    /**  For column LAND_A3_CD  */
    ///Get the value of the column LAND_A3_CD, returns the default value if the column is null
    const std::string &getValueOfLandA3Cd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLandA3Cd() const noexcept;
    ///Set the value of the column LAND_A3_CD
    void setLandA3Cd(const std::string &pLandA3Cd) noexcept;
    void setLandA3Cd(std::string &&pLandA3Cd) noexcept;
    void setLandA3CdToNull() noexcept;

    /**  For column CDI_WITH_SWITZERLAND_CD  */
    ///Get the value of the column CDI_WITH_SWITZERLAND_CD, returns the default value if the column is null
    const std::string &getValueOfCdiWithSwitzerlandCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCdiWithSwitzerlandCd() const noexcept;
    ///Set the value of the column CDI_WITH_SWITZERLAND_CD
    void setCdiWithSwitzerlandCd(const std::string &pCdiWithSwitzerlandCd) noexcept;
    void setCdiWithSwitzerlandCd(std::string &&pCdiWithSwitzerlandCd) noexcept;
    void setCdiWithSwitzerlandCdToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 41;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Land>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Land>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<std::string> landCd_;
    std::shared_ptr<std::string> aufetiketteCd_;
    std::shared_ptr<std::string> land_;
    std::shared_ptr<std::string> kurzcode_;
    std::shared_ptr<std::string> plzvorausCd_;
    std::shared_ptr<std::string> vorwahl_;
    std::shared_ptr<std::string> waehrungsCd_;
    std::shared_ptr<std::string> inlandCd_;
    std::shared_ptr<std::string> versandprioritaetCd_;
    std::shared_ptr<std::string> risikogruppe_;
    std::shared_ptr<double> riskindex_;
    std::shared_ptr<std::string> euLandCd_;
    std::shared_ptr<::trantor::Date> crtdatum_;
    std::shared_ptr<std::string> crtuser_;
    std::shared_ptr<::trantor::Date> mutdatum_;
    std::shared_ptr<std::string> mutuser_;
    std::shared_ptr<std::string> loeschCd_;
    std::shared_ptr<::trantor::Date> loeschdatum_;
    std::shared_ptr<std::string> loeschuser_;
    std::shared_ptr<std::string> ffTaxcode_;
    std::shared_ptr<std::string> ffLandcode_;
    std::shared_ptr<std::string> abgstRelevantCd_;
    std::shared_ptr<std::string> usFatcaLandCd_;
    std::shared_ptr<double> igaStatus_;
    std::shared_ptr<std::string> usTerritoryCd_;
    std::shared_ptr<double> destinationCd_;
    std::shared_ptr<std::string> aufteilung_;
    std::shared_ptr<std::string> statfisccInlandCd_;
    std::shared_ptr<std::string> aeoiReportableCd_;
    std::shared_ptr<::trantor::Date> aeoiRepAgreementDate_;
    std::shared_ptr<::trantor::Date> aeoiStartReportingYear_;
    std::shared_ptr<std::string> tinAvailableCd_;
    std::shared_ptr<std::string> jurisdictionOfBankCd_;
    std::shared_ptr<::trantor::Date> aeoiFirstYearOfReporting_;
    std::shared_ptr<std::string> aeoiRepWiderApproachCd_;
    std::shared_ptr<std::string> naftaCountryCd_;
    std::shared_ptr<std::string> eeaCountryCd_;
    std::shared_ptr<std::string> usCdiCountryCd_;
    std::shared_ptr<std::string> aeoiParticipatingCountryCd_;
    std::shared_ptr<std::string> landA3Cd_;
    std::shared_ptr<std::string> cdiWithSwitzerlandCd_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[41]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where LAND_CD = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where LAND_CD = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[0])
        {
            sql += "LAND_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[1])
        {
            sql += "AUFETIKETTE_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "LAND,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "KURZCODE,";
            ++parametersCount;
        }
        sql += "PLZVORAUS_CD,";
        ++parametersCount;
        if(!dirtyFlag_[4])
        {
            needSelection=true;
        }
        if(dirtyFlag_[5])
        {
            sql += "VORWAHL,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "WAEHRUNGS_CD,";
            ++parametersCount;
        }
        sql += "INLAND_CD,";
        ++parametersCount;
        if(!dirtyFlag_[7])
        {
            needSelection=true;
        }
        sql += "VERSANDPRIORITAET_CD,";
        ++parametersCount;
        if(!dirtyFlag_[8])
        {
            needSelection=true;
        }
        if(dirtyFlag_[9])
        {
            sql += "RISIKOGRUPPE,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "RISKINDEX,";
            ++parametersCount;
        }
        sql += "EU_LAND_CD,";
        ++parametersCount;
        if(!dirtyFlag_[11])
        {
            needSelection=true;
        }
        sql += "CRTDATUM,";
        ++parametersCount;
        if(!dirtyFlag_[12])
        {
            needSelection=true;
        }
        if(dirtyFlag_[13])
        {
            sql += "CRTUSER,";
            ++parametersCount;
        }
        if(dirtyFlag_[14])
        {
            sql += "MUTDATUM,";
            ++parametersCount;
        }
        if(dirtyFlag_[15])
        {
            sql += "MUTUSER,";
            ++parametersCount;
        }
        sql += "LOESCH_CD,";
        ++parametersCount;
        if(!dirtyFlag_[16])
        {
            needSelection=true;
        }
        if(dirtyFlag_[17])
        {
            sql += "LOESCHDATUM,";
            ++parametersCount;
        }
        if(dirtyFlag_[18])
        {
            sql += "LOESCHUSER,";
            ++parametersCount;
        }
        if(dirtyFlag_[19])
        {
            sql += "FF_TAXCODE,";
            ++parametersCount;
        }
        if(dirtyFlag_[20])
        {
            sql += "FF_LANDCODE,";
            ++parametersCount;
        }
        sql += "ABGST_RELEVANT_CD,";
        ++parametersCount;
        if(!dirtyFlag_[21])
        {
            needSelection=true;
        }
        sql += "US_FATCA_LAND_CD,";
        ++parametersCount;
        if(!dirtyFlag_[22])
        {
            needSelection=true;
        }
        if(dirtyFlag_[23])
        {
            sql += "IGA_STATUS,";
            ++parametersCount;
        }
        sql += "US_TERRITORY_CD,";
        ++parametersCount;
        if(!dirtyFlag_[24])
        {
            needSelection=true;
        }
        if(dirtyFlag_[25])
        {
            sql += "DESTINATION_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[26])
        {
            sql += "AUFTEILUNG,";
            ++parametersCount;
        }
        sql += "STATFISCC_INLAND_CD,";
        ++parametersCount;
        if(!dirtyFlag_[27])
        {
            needSelection=true;
        }
        sql += "AEOI_REPORTABLE_CD,";
        ++parametersCount;
        if(!dirtyFlag_[28])
        {
            needSelection=true;
        }
        if(dirtyFlag_[29])
        {
            sql += "AEOI_REP_AGREEMENT_DATE,";
            ++parametersCount;
        }
        if(dirtyFlag_[30])
        {
            sql += "AEOI_START_REPORTING_YEAR,";
            ++parametersCount;
        }
        sql += "TIN_AVAILABLE_CD,";
        ++parametersCount;
        if(!dirtyFlag_[31])
        {
            needSelection=true;
        }
        sql += "JURISDICTION_OF_BANK_CD,";
        ++parametersCount;
        if(!dirtyFlag_[32])
        {
            needSelection=true;
        }
        if(dirtyFlag_[33])
        {
            sql += "AEOI_FIRST_YEAR_OF_REPORTING,";
            ++parametersCount;
        }
        sql += "AEOI_REP_WIDER_APPROACH_CD,";
        ++parametersCount;
        if(!dirtyFlag_[34])
        {
            needSelection=true;
        }
        sql += "NAFTA_COUNTRY_CD,";
        ++parametersCount;
        if(!dirtyFlag_[35])
        {
            needSelection=true;
        }
        sql += "EEA_COUNTRY_CD,";
        ++parametersCount;
        if(!dirtyFlag_[36])
        {
            needSelection=true;
        }
        sql += "US_CDI_COUNTRY_CD,";
        ++parametersCount;
        if(!dirtyFlag_[37])
        {
            needSelection=true;
        }
        sql += "AEOI_PARTICIPATING_COUNTRY_CD,";
        ++parametersCount;
        if(!dirtyFlag_[38])
        {
            needSelection=true;
        }
        if(dirtyFlag_[39])
        {
            sql += "LAND_A3_CD,";
            ++parametersCount;
        }
        sql += "CDI_WITH_SWITZERLAND_CD,";
        ++parametersCount;
        if(!dirtyFlag_[40])
        {
            needSelection=true;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        if(dirtyFlag_[0])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[15])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[16])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[17])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[18])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[19])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[20])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[21])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[22])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[23])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[24])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[25])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[26])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[27])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[28])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[29])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[30])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[31])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[32])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[33])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[34])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[35])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[36])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[37])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[38])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[39])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[40])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace cim_web
} // namespace drogon_model
