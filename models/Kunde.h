/**
 *
 *  Kunde.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace cim_web
{

class Kunde
{
  public:
    struct Cols
    {
        static const std::string _KUNDENID;
        static const std::string _BEZEICHNUNG;
        static const std::string _KUNDESEIT;
        static const std::string _VERTRAGSPARTEI_CD;
        static const std::string _LOESCH_CD;
        static const std::string _LOESCHDATUM;
        static const std::string _CRTDATUM;
        static const std::string _CRTUSER;
        static const std::string _MUTDATUM;
        static const std::string _MUTUSER;
        static const std::string _PSEUDOACCOUNT_CD;
        static const std::string _KUNDEBESUCH;
        static const std::string _BEZEICHNUNGVERTRAG;
        static const std::string _PSEUDONYM;
        static const std::string _RECHTSDOMIZIL_CD;
        static const std::string _KORRESPONDENZSPRACH_CD;
        static const std::string _MIT_PROFIL_CD;
        static const std::string _GEMEINSCHAFTSKONTO_CD;
        static const std::string _PIN;
        static const std::string _VERWENDUNGSZWECK;
        static const std::string _IDENTIFIKATIONSART_CD;
        static const std::string _VERMOEGENSURSPRUNG_CD;
        static const std::string _VERMOEGENSURSPRUNG;
        static const std::string _GELDVONKONTO;
        static const std::string _BISHERIGEBETREUUNG;
        static const std::string _BISHERIGEBETREUUNGSEIT;
        static const std::string _MANUALOPEN_CD;
        static const std::string _EIN_VERMOEGEN_CD;
        static const std::string _REGIONZAHLUNG_CD;
        static const std::string _EIN_VERMOEGENART_CD;
        static const std::string _SPEZ_WUENSCHE_CD;
        static const std::string _MANAGER_CD;
        static const std::string _RISKINDEX;
        static const std::string _RISKINDEX_GUELTISEIT;
        static const std::string _RISKINDEX_LETZTEBERECHNUNG;
        static const std::string _KONTOEROEFFNUNGSART_CD;
        static const std::string _RISKINDEXBERECHNEN_CD;
        static const std::string _KUNDENNATUR_CD;
        static const std::string _RISIKOKATEGORIE_CD;
        static const std::string _PEP_CD;
        static const std::string _SPEZIALKATEGORIE_CD;
        static const std::string _NATURE_CD;
        static const std::string _NAME;
        static const std::string _LEDIGERNAME;
        static const std::string _VORNAME;
        static const std::string _CDPARTC;
        static const std::string _NATIONALITAET_CD;
        static const std::string _RISIKOLAND_CD;
        static const std::string _PERSOENLICHBEKANNT_CD;
        static const std::string _RISIKOTAETIGKEIT_CD;
        static const std::string _STEUERDOMIZIL_CD;
        static const std::string _EU_TAXSTATUS_CD;
        static const std::string _TIN;
        static const std::string _APSYS_CDROLPERSI;
        static const std::string _VERTRAGSPRACH_CD;
        static const std::string _VERMOEGENSKATEGORIE_IHAG_CD;
        static const std::string _APSYS_INTISHS;
        static const std::string _APSYS_INTILGS;
        static const std::string _GESAMTVERMOEGEN_CD;
        static const std::string _COMPLIANCE_OK_CD;
        static const std::string _COMPLIANCE_OK_BEMERKUNG;
        static const std::string _COMPLIANCE_OK_DATUM;
        static const std::string _COMPLIANCE_OK_USERID;
        static const std::string _EIN_VERMOEGEN;
        static const std::string _SEGMENTIERUNG_CD;
        static const std::string _AKTID;
        static const std::string _VALIDID;
        static const std::string _VALID_CD;
        static const std::string _VALIDUSER;
        static const std::string _ENC_SALT;
        static const std::string _BEZEICHNUNG_ENC;
        static const std::string _APSYS_CDMOTIFPARTS;
        static const std::string _APSYS_CDINDUS0S;
        static const std::string _APSYS_FLAGPREAVISEXEC;
        static const std::string _APSYS_CDAVIOBISPECC;
        static const std::string _APSYS_FLAGHISPERC;
        static const std::string _APSYS_REPAMANUC;
        static const std::string _APSYS_PERDEVCALC;
        static const std::string _APSYS_FLAGUKTAXC;
        static const std::string _APSYS_CDNOGAS;
        static const std::string _APSYS_STATFISCC;
        static const std::string _APSYS_FLAGFWTI;
        static const std::string _APSYS_FLAGFWTUKNRSDI;
        static const std::string _APSYS_FLAGFWTTAXSPEGEI;
        static const std::string _APSYS_CDFWTOPTREGULFISCANCC;
        static const std::string _APSYS_CDFWTSTATREGULFISCANCC;
        static const std::string _APSYS_CDFWTOPTREGULFISCFUTC;
        static const std::string _STEUERLAND_ABGST_CD;
        static const std::string _APSYS_CDNATURES;
        static const std::string _APSYS_SHNAS;
        static const std::string _APSYS_CDPYHQDOMIS;
        static const std::string _APSYS_CDPERMI;
        static const std::string _APSYS_IDRCIS;
        static const std::string _APSYS_FLAGISTTC;
        static const std::string _APSYS_DEVEVALS;
        static const std::string _APSYS_IDSTRUCS;
        static const std::string _APSYS_SUIVIAGTS;
        static const std::string _APSYS_CDINDUSCSSFS;
        static const std::string _APSYS_CDINDUSBLUXS;
        static const std::string _APSYS_CDINDUSSBUBA;
        static const std::string _APSYS_CDINDUSSBNS;
        static const std::string _APSYS_GRMTEVALS;
        static const std::string _APSYS_IDPOCS;
        static const std::string _APSYS_INFO;
        static const std::string _APSYS_IDENTS;
        static const std::string _APSYS_STATUS_OPEC;
        static const std::string _APSYS_ERRI;
        static const std::string _NATIONALITAET2_CD;
        static const std::string _NATIONALITAET3_CD;
        static const std::string _VERMOEGENSURSPRUNG2_CD;
        static const std::string _VERMOEGENSURSPRUNG2;
        static const std::string _APPROVAL_STEP1_CD;
        static const std::string _APPROVAL_STEP1_USER;
        static const std::string _APPROVAL_STEP1_DATE;
        static const std::string _APPROVAL_STEP2_CD;
        static const std::string _APPROVAL_STEP2_USER;
        static const std::string _APPROVAL_STEP2_DATE;
        static const std::string _APPROVAL_STEP3_CD;
        static const std::string _APPROVAL_STEP3_USER;
        static const std::string _APPROVAL_STEP3_DATE;
        static const std::string _APPROVAL_STEP4_CD;
        static const std::string _APPROVAL_STEP4_USER;
        static const std::string _APPROVAL_STEP4_DATE;
        static const std::string _APPROVAL_STEP5_CD;
        static const std::string _APPROVAL_STEP5_USER;
        static const std::string _APPROVAL_STEP5_DATE;
        static const std::string _APPROVAL_STEP1_BEM;
        static const std::string _APPROVAL_STEP2_BEM;
        static const std::string _APPROVAL_STEP3_BEM;
        static const std::string _APPROVAL_STEP4_BEM;
        static const std::string _APPROVAL_STEP5_BEM;
        static const std::string _APPROVAL_STEP1_ASSES_CD;
        static const std::string _APPROVAL_STEP2_ASSES_CD;
        static const std::string _APPROVAL_STEP3_ASSES_CD;
        static const std::string _APPROVAL_STEP4_ASSES_CD;
        static const std::string _APPROVAL_STEP5_ASSES_CD;
        static const std::string _APPROVAL_STATUS_CD;
        static const std::string _CLIENT_STATUS_CD;
        static const std::string _DISCHARGE_ORDERS_CD;
        static const std::string _PRINT_SUMMARY_HOLDMAIL_ONLY_CD;
        static const std::string _EBANKING_CONTRACT_CD;
        static const std::string _EBANKING_CONTRACT_LANGUAGE_CD;
        static const std::string _APSYS_DTECHDIARYL;
        static const std::string _APSYS_MOTDIARYS;
        static const std::string _APSYS_IDTYPCLIIRSS;
        static const std::string _APSYS_IDRCIQIS;
        static const std::string _APSYS_IDRCIFATCAS;
        static const std::string _MAILING_TARIF_TYPE_CD;
        static const std::string _REGISTERED_CD;
        static const std::string _REGISTERED_MAIL_CD;
        static const std::string _APSYS_NBPERSCPARTIEL;
        static const std::string _ASSET_VALUE_TIER_CD;
        static const std::string _RELATIONSHIP_TYPE_AML_CD;
        static const std::string _CB_ASSET_VALUE_TIER_CD;
        static const std::string _APPROVAL_SCORE;
        static const std::string _APPROVAL_SCORE_STEPS;
        static const std::string _APSYS_DTDEBPARTL;
        static const std::string _APSYS_DTFINPARTL;
        static const std::string _APSYS_CDMOTIFCLOS;
        static const std::string _APSYS_CDNATURECPARTIEEMIRC;
        static const std::string _APSYS_FLAGOTHEREMIRC;
        static const std::string _APSYS_CDINDUSEMIRS;
        static const std::string _OPENED_IN_APSYS_DATE;
        static const std::string _APSYS_CDNATURECPARTIEFMIAC;
        static const std::string _EBANKING_CLOSED_CD;
        static const std::string _EBANKING_CLOSINGDATE;
        static const std::string _KYC_REVIEW_PROCESS_START_DATE;
        static const std::string _REMARKS;
        static const std::string _TRANSACTION_BL_COUNTRY_CD;
        static const std::string _CLIENTGROUP_CD;
        static const std::string _RISKINDEX_CALC;
        static const std::string _LAST_CALC_CRI_MUTDATUM;
        static const std::string _RISIKOKATEGORIE_CALC_CD;
        static const std::string _RISKINDEX_GROUP;
        static const std::string _EST_AMOUNT_REM_WITH_MUTDATUM;
        static const std::string _GESAMTVERMOEGEN_MUTDATUM;
        static const std::string _TRANSACT_BL_COUNTRY_MUTDATUM;
        static const std::string _ACCOUNTPURPOSE_MUTDATUM;
        static const std::string _APSYS_FLAGDELDATAPERSI;
        static const std::string _APSYS_DTWAITDELDATAPERSL;
        static const std::string _NAME_ENC;
        static const std::string _IN_APSYS_TEMP_ENTSPERREN_CD;
        static const std::string _IN_APSYS_TEMP_ENTSP_USERID;
        static const std::string _IN_APSYS_TEMP_ENTSP_DATUM;
        static const std::string _APSYS_CDREGS;
        static const std::string _RETENTION_ON_HOLD;
        static const std::string _RETENTION_ON_HOLD_DATE;
        static const std::string _RETENTION_ON_HOLD_REASON;
        static const std::string _LOGICAL_ERASURE;
        static const std::string _LOGICAL_ERASURE_DATE;
        static const std::string _LOGICAL_ERASURE_REASON;
        static const std::string _COMPLIANCE_MIN_RISK_CATEGORY;
        static const std::string _COMPLIANCE_MIN_RISK_COMMENT;
        static const std::string _CLIENT_STRUCTURE_CD;
        static const std::string _CLIENT_SUBSTRUCTURE_CD;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = double;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Kunde(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Kunde(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Kunde(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Kunde() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column KUNDENID  */
    ///Get the value of the column KUNDENID, returns the default value if the column is null
    const double &getValueOfKundenid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getKundenid() const noexcept;
    ///Set the value of the column KUNDENID
    void setKundenid(const double &pKundenid) noexcept;

    /**  For column BEZEICHNUNG  */
    ///Get the value of the column BEZEICHNUNG, returns the default value if the column is null
    const std::string &getValueOfBezeichnung() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getBezeichnung() const noexcept;
    ///Set the value of the column BEZEICHNUNG
    void setBezeichnung(const std::string &pBezeichnung) noexcept;
    void setBezeichnung(std::string &&pBezeichnung) noexcept;
    void setBezeichnungToNull() noexcept;

    /**  For column KUNDESEIT  */
    ///Get the value of the column KUNDESEIT, returns the default value if the column is null
    const ::trantor::Date &getValueOfKundeseit() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getKundeseit() const noexcept;
    ///Set the value of the column KUNDESEIT
    void setKundeseit(const ::trantor::Date &pKundeseit) noexcept;
    void setKundeseitToNull() noexcept;

    /**  For column VERTRAGSPARTEI_CD  */
    ///Get the value of the column VERTRAGSPARTEI_CD, returns the default value if the column is null
    const std::string &getValueOfVertragsparteiCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getVertragsparteiCd() const noexcept;
    ///Set the value of the column VERTRAGSPARTEI_CD
    void setVertragsparteiCd(const std::string &pVertragsparteiCd) noexcept;
    void setVertragsparteiCd(std::string &&pVertragsparteiCd) noexcept;
    void setVertragsparteiCdToNull() noexcept;

    /**  For column LOESCH_CD  */
    ///Get the value of the column LOESCH_CD, returns the default value if the column is null
    const std::string &getValueOfLoeschCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLoeschCd() const noexcept;
    ///Set the value of the column LOESCH_CD
    void setLoeschCd(const std::string &pLoeschCd) noexcept;
    void setLoeschCd(std::string &&pLoeschCd) noexcept;
    void setLoeschCdToNull() noexcept;

    /**  For column LOESCHDATUM  */
    ///Get the value of the column LOESCHDATUM, returns the default value if the column is null
    const ::trantor::Date &getValueOfLoeschdatum() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getLoeschdatum() const noexcept;
    ///Set the value of the column LOESCHDATUM
    void setLoeschdatum(const ::trantor::Date &pLoeschdatum) noexcept;
    void setLoeschdatumToNull() noexcept;

    /**  For column CRTDATUM  */
    ///Get the value of the column CRTDATUM, returns the default value if the column is null
    const ::trantor::Date &getValueOfCrtdatum() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCrtdatum() const noexcept;
    ///Set the value of the column CRTDATUM
    void setCrtdatum(const ::trantor::Date &pCrtdatum) noexcept;
    void setCrtdatumToNull() noexcept;

    /**  For column CRTUSER  */
    ///Get the value of the column CRTUSER, returns the default value if the column is null
    const std::string &getValueOfCrtuser() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCrtuser() const noexcept;
    ///Set the value of the column CRTUSER
    void setCrtuser(const std::string &pCrtuser) noexcept;
    void setCrtuser(std::string &&pCrtuser) noexcept;
    void setCrtuserToNull() noexcept;

    /**  For column MUTDATUM  */
    ///Get the value of the column MUTDATUM, returns the default value if the column is null
    const ::trantor::Date &getValueOfMutdatum() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getMutdatum() const noexcept;
    ///Set the value of the column MUTDATUM
    void setMutdatum(const ::trantor::Date &pMutdatum) noexcept;
    void setMutdatumToNull() noexcept;

    /**  For column MUTUSER  */
    ///Get the value of the column MUTUSER, returns the default value if the column is null
    const std::string &getValueOfMutuser() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getMutuser() const noexcept;
    ///Set the value of the column MUTUSER
    void setMutuser(const std::string &pMutuser) noexcept;
    void setMutuser(std::string &&pMutuser) noexcept;
    void setMutuserToNull() noexcept;

    /**  For column PSEUDOACCOUNT_CD  */
    ///Get the value of the column PSEUDOACCOUNT_CD, returns the default value if the column is null
    const std::string &getValueOfPseudoaccountCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPseudoaccountCd() const noexcept;
    ///Set the value of the column PSEUDOACCOUNT_CD
    void setPseudoaccountCd(const std::string &pPseudoaccountCd) noexcept;
    void setPseudoaccountCd(std::string &&pPseudoaccountCd) noexcept;
    void setPseudoaccountCdToNull() noexcept;

    /**  For column KUNDEBESUCH  */
    ///Get the value of the column KUNDEBESUCH, returns the default value if the column is null
    const ::trantor::Date &getValueOfKundebesuch() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getKundebesuch() const noexcept;
    ///Set the value of the column KUNDEBESUCH
    void setKundebesuch(const ::trantor::Date &pKundebesuch) noexcept;
    void setKundebesuchToNull() noexcept;

    /**  For column BEZEICHNUNGVERTRAG  */
    ///Get the value of the column BEZEICHNUNGVERTRAG, returns the default value if the column is null
    const std::string &getValueOfBezeichnungvertrag() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getBezeichnungvertrag() const noexcept;
    ///Set the value of the column BEZEICHNUNGVERTRAG
    void setBezeichnungvertrag(const std::string &pBezeichnungvertrag) noexcept;
    void setBezeichnungvertrag(std::string &&pBezeichnungvertrag) noexcept;
    void setBezeichnungvertragToNull() noexcept;

    /**  For column PSEUDONYM  */
    ///Get the value of the column PSEUDONYM, returns the default value if the column is null
    const std::string &getValueOfPseudonym() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPseudonym() const noexcept;
    ///Set the value of the column PSEUDONYM
    void setPseudonym(const std::string &pPseudonym) noexcept;
    void setPseudonym(std::string &&pPseudonym) noexcept;
    void setPseudonymToNull() noexcept;

    /**  For column RECHTSDOMIZIL_CD  */
    ///Get the value of the column RECHTSDOMIZIL_CD, returns the default value if the column is null
    const std::string &getValueOfRechtsdomizilCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRechtsdomizilCd() const noexcept;
    ///Set the value of the column RECHTSDOMIZIL_CD
    void setRechtsdomizilCd(const std::string &pRechtsdomizilCd) noexcept;
    void setRechtsdomizilCd(std::string &&pRechtsdomizilCd) noexcept;
    void setRechtsdomizilCdToNull() noexcept;

    /**  For column KORRESPONDENZSPRACH_CD  */
    ///Get the value of the column KORRESPONDENZSPRACH_CD, returns the default value if the column is null
    const std::string &getValueOfKorrespondenzsprachCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getKorrespondenzsprachCd() const noexcept;
    ///Set the value of the column KORRESPONDENZSPRACH_CD
    void setKorrespondenzsprachCd(const std::string &pKorrespondenzsprachCd) noexcept;
    void setKorrespondenzsprachCd(std::string &&pKorrespondenzsprachCd) noexcept;
    void setKorrespondenzsprachCdToNull() noexcept;

    /**  For column MIT_PROFIL_CD  */
    ///Get the value of the column MIT_PROFIL_CD, returns the default value if the column is null
    const std::string &getValueOfMitProfilCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getMitProfilCd() const noexcept;
    ///Set the value of the column MIT_PROFIL_CD
    void setMitProfilCd(const std::string &pMitProfilCd) noexcept;
    void setMitProfilCd(std::string &&pMitProfilCd) noexcept;
    void setMitProfilCdToNull() noexcept;

    /**  For column GEMEINSCHAFTSKONTO_CD  */
    ///Get the value of the column GEMEINSCHAFTSKONTO_CD, returns the default value if the column is null
    const std::string &getValueOfGemeinschaftskontoCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getGemeinschaftskontoCd() const noexcept;
    ///Set the value of the column GEMEINSCHAFTSKONTO_CD
    void setGemeinschaftskontoCd(const std::string &pGemeinschaftskontoCd) noexcept;
    void setGemeinschaftskontoCd(std::string &&pGemeinschaftskontoCd) noexcept;
    void setGemeinschaftskontoCdToNull() noexcept;

    /**  For column PIN  */
    ///Get the value of the column PIN, returns the default value if the column is null
    const std::string &getValueOfPin() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPin() const noexcept;
    ///Set the value of the column PIN
    void setPin(const std::string &pPin) noexcept;
    void setPin(std::string &&pPin) noexcept;
    void setPinToNull() noexcept;

    /**  For column VERWENDUNGSZWECK  */
    ///Get the value of the column VERWENDUNGSZWECK, returns the default value if the column is null
    const std::string &getValueOfVerwendungszweck() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getVerwendungszweck() const noexcept;
    ///Set the value of the column VERWENDUNGSZWECK
    void setVerwendungszweck(const std::string &pVerwendungszweck) noexcept;
    void setVerwendungszweck(std::string &&pVerwendungszweck) noexcept;
    void setVerwendungszweckToNull() noexcept;

    /**  For column IDENTIFIKATIONSART_CD  */
    ///Get the value of the column IDENTIFIKATIONSART_CD, returns the default value if the column is null
    const std::string &getValueOfIdentifikationsartCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getIdentifikationsartCd() const noexcept;
    ///Set the value of the column IDENTIFIKATIONSART_CD
    void setIdentifikationsartCd(const std::string &pIdentifikationsartCd) noexcept;
    void setIdentifikationsartCd(std::string &&pIdentifikationsartCd) noexcept;
    void setIdentifikationsartCdToNull() noexcept;

    /**  For column VERMOEGENSURSPRUNG_CD  */
    ///Get the value of the column VERMOEGENSURSPRUNG_CD, returns the default value if the column is null
    const std::string &getValueOfVermoegensursprungCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getVermoegensursprungCd() const noexcept;
    ///Set the value of the column VERMOEGENSURSPRUNG_CD
    void setVermoegensursprungCd(const std::string &pVermoegensursprungCd) noexcept;
    void setVermoegensursprungCd(std::string &&pVermoegensursprungCd) noexcept;
    void setVermoegensursprungCdToNull() noexcept;

    /**  For column VERMOEGENSURSPRUNG  */
    ///Get the value of the column VERMOEGENSURSPRUNG, returns the default value if the column is null
    const std::string &getValueOfVermoegensursprung() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getVermoegensursprung() const noexcept;
    ///Set the value of the column VERMOEGENSURSPRUNG
    void setVermoegensursprung(const std::string &pVermoegensursprung) noexcept;
    void setVermoegensursprung(std::string &&pVermoegensursprung) noexcept;
    void setVermoegensursprungToNull() noexcept;

    /**  For column GELDVONKONTO  */
    ///Get the value of the column GELDVONKONTO, returns the default value if the column is null
    const std::string &getValueOfGeldvonkonto() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getGeldvonkonto() const noexcept;
    ///Set the value of the column GELDVONKONTO
    void setGeldvonkonto(const std::string &pGeldvonkonto) noexcept;
    void setGeldvonkonto(std::string &&pGeldvonkonto) noexcept;
    void setGeldvonkontoToNull() noexcept;

    /**  For column BISHERIGEBETREUUNG  */
    ///Get the value of the column BISHERIGEBETREUUNG, returns the default value if the column is null
    const std::string &getValueOfBisherigebetreuung() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getBisherigebetreuung() const noexcept;
    ///Set the value of the column BISHERIGEBETREUUNG
    void setBisherigebetreuung(const std::string &pBisherigebetreuung) noexcept;
    void setBisherigebetreuung(std::string &&pBisherigebetreuung) noexcept;
    void setBisherigebetreuungToNull() noexcept;

    /**  For column BISHERIGEBETREUUNGSEIT  */
    ///Get the value of the column BISHERIGEBETREUUNGSEIT, returns the default value if the column is null
    const ::trantor::Date &getValueOfBisherigebetreuungseit() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getBisherigebetreuungseit() const noexcept;
    ///Set the value of the column BISHERIGEBETREUUNGSEIT
    void setBisherigebetreuungseit(const ::trantor::Date &pBisherigebetreuungseit) noexcept;
    void setBisherigebetreuungseitToNull() noexcept;

    /**  For column MANUALOPEN_CD  */
    ///Get the value of the column MANUALOPEN_CD, returns the default value if the column is null
    const std::string &getValueOfManualopenCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getManualopenCd() const noexcept;
    ///Set the value of the column MANUALOPEN_CD
    void setManualopenCd(const std::string &pManualopenCd) noexcept;
    void setManualopenCd(std::string &&pManualopenCd) noexcept;
    void setManualopenCdToNull() noexcept;

    /**  For column EIN_VERMOEGEN_CD  */
    ///Get the value of the column EIN_VERMOEGEN_CD, returns the default value if the column is null
    const std::string &getValueOfEinVermoegenCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEinVermoegenCd() const noexcept;
    ///Set the value of the column EIN_VERMOEGEN_CD
    void setEinVermoegenCd(const std::string &pEinVermoegenCd) noexcept;
    void setEinVermoegenCd(std::string &&pEinVermoegenCd) noexcept;
    void setEinVermoegenCdToNull() noexcept;

    /**  For column REGIONZAHLUNG_CD  */
    ///Get the value of the column REGIONZAHLUNG_CD, returns the default value if the column is null
    const std::string &getValueOfRegionzahlungCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRegionzahlungCd() const noexcept;
    ///Set the value of the column REGIONZAHLUNG_CD
    void setRegionzahlungCd(const std::string &pRegionzahlungCd) noexcept;
    void setRegionzahlungCd(std::string &&pRegionzahlungCd) noexcept;
    void setRegionzahlungCdToNull() noexcept;

    /**  For column EIN_VERMOEGENART_CD  */
    ///Get the value of the column EIN_VERMOEGENART_CD, returns the default value if the column is null
    const std::string &getValueOfEinVermoegenartCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEinVermoegenartCd() const noexcept;
    ///Set the value of the column EIN_VERMOEGENART_CD
    void setEinVermoegenartCd(const std::string &pEinVermoegenartCd) noexcept;
    void setEinVermoegenartCd(std::string &&pEinVermoegenartCd) noexcept;
    void setEinVermoegenartCdToNull() noexcept;

    /**  For column SPEZ_WUENSCHE_CD  */
    ///Get the value of the column SPEZ_WUENSCHE_CD, returns the default value if the column is null
    const std::string &getValueOfSpezWuenscheCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSpezWuenscheCd() const noexcept;
    ///Set the value of the column SPEZ_WUENSCHE_CD
    void setSpezWuenscheCd(const std::string &pSpezWuenscheCd) noexcept;
    void setSpezWuenscheCd(std::string &&pSpezWuenscheCd) noexcept;
    void setSpezWuenscheCdToNull() noexcept;

    /**  For column MANAGER_CD  */
    ///Get the value of the column MANAGER_CD, returns the default value if the column is null
    const std::string &getValueOfManagerCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getManagerCd() const noexcept;
    ///Set the value of the column MANAGER_CD
    void setManagerCd(const std::string &pManagerCd) noexcept;
    void setManagerCd(std::string &&pManagerCd) noexcept;
    void setManagerCdToNull() noexcept;

    /**  For column RISKINDEX  */
    ///Get the value of the column RISKINDEX, returns the default value if the column is null
    const double &getValueOfRiskindex() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getRiskindex() const noexcept;
    ///Set the value of the column RISKINDEX
    void setRiskindex(const double &pRiskindex) noexcept;
    void setRiskindexToNull() noexcept;

    /**  For column RISKINDEX_GUELTISEIT  */
    ///Get the value of the column RISKINDEX_GUELTISEIT, returns the default value if the column is null
    const ::trantor::Date &getValueOfRiskindexGueltiseit() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getRiskindexGueltiseit() const noexcept;
    ///Set the value of the column RISKINDEX_GUELTISEIT
    void setRiskindexGueltiseit(const ::trantor::Date &pRiskindexGueltiseit) noexcept;
    void setRiskindexGueltiseitToNull() noexcept;

    /**  For column RISKINDEX_LETZTEBERECHNUNG  */
    ///Get the value of the column RISKINDEX_LETZTEBERECHNUNG, returns the default value if the column is null
    const ::trantor::Date &getValueOfRiskindexLetzteberechnung() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getRiskindexLetzteberechnung() const noexcept;
    ///Set the value of the column RISKINDEX_LETZTEBERECHNUNG
    void setRiskindexLetzteberechnung(const ::trantor::Date &pRiskindexLetzteberechnung) noexcept;
    void setRiskindexLetzteberechnungToNull() noexcept;

    /**  For column KONTOEROEFFNUNGSART_CD  */
    ///Get the value of the column KONTOEROEFFNUNGSART_CD, returns the default value if the column is null
    const std::string &getValueOfKontoeroeffnungsartCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getKontoeroeffnungsartCd() const noexcept;
    ///Set the value of the column KONTOEROEFFNUNGSART_CD
    void setKontoeroeffnungsartCd(const std::string &pKontoeroeffnungsartCd) noexcept;
    void setKontoeroeffnungsartCd(std::string &&pKontoeroeffnungsartCd) noexcept;
    void setKontoeroeffnungsartCdToNull() noexcept;

    /**  For column RISKINDEXBERECHNEN_CD  */
    ///Get the value of the column RISKINDEXBERECHNEN_CD, returns the default value if the column is null
    const std::string &getValueOfRiskindexberechnenCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRiskindexberechnenCd() const noexcept;
    ///Set the value of the column RISKINDEXBERECHNEN_CD
    void setRiskindexberechnenCd(const std::string &pRiskindexberechnenCd) noexcept;
    void setRiskindexberechnenCd(std::string &&pRiskindexberechnenCd) noexcept;
    void setRiskindexberechnenCdToNull() noexcept;

    /**  For column KUNDENNATUR_CD  */
    ///Get the value of the column KUNDENNATUR_CD, returns the default value if the column is null
    const std::string &getValueOfKundennaturCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getKundennaturCd() const noexcept;
    ///Set the value of the column KUNDENNATUR_CD
    void setKundennaturCd(const std::string &pKundennaturCd) noexcept;
    void setKundennaturCd(std::string &&pKundennaturCd) noexcept;
    void setKundennaturCdToNull() noexcept;

    /**  For column RISIKOKATEGORIE_CD  */
    ///Get the value of the column RISIKOKATEGORIE_CD, returns the default value if the column is null
    const std::string &getValueOfRisikokategorieCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRisikokategorieCd() const noexcept;
    ///Set the value of the column RISIKOKATEGORIE_CD
    void setRisikokategorieCd(const std::string &pRisikokategorieCd) noexcept;
    void setRisikokategorieCd(std::string &&pRisikokategorieCd) noexcept;
    void setRisikokategorieCdToNull() noexcept;

    /**  For column PEP_CD  */
    ///Get the value of the column PEP_CD, returns the default value if the column is null
    const std::string &getValueOfPepCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPepCd() const noexcept;
    ///Set the value of the column PEP_CD
    void setPepCd(const std::string &pPepCd) noexcept;
    void setPepCd(std::string &&pPepCd) noexcept;
    void setPepCdToNull() noexcept;

    /**  For column SPEZIALKATEGORIE_CD  */
    ///Get the value of the column SPEZIALKATEGORIE_CD, returns the default value if the column is null
    const std::string &getValueOfSpezialkategorieCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSpezialkategorieCd() const noexcept;
    ///Set the value of the column SPEZIALKATEGORIE_CD
    void setSpezialkategorieCd(const std::string &pSpezialkategorieCd) noexcept;
    void setSpezialkategorieCd(std::string &&pSpezialkategorieCd) noexcept;
    void setSpezialkategorieCdToNull() noexcept;

    /**  For column NATURE_CD  */
    ///Get the value of the column NATURE_CD, returns the default value if the column is null
    const std::string &getValueOfNatureCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getNatureCd() const noexcept;
    ///Set the value of the column NATURE_CD
    void setNatureCd(const std::string &pNatureCd) noexcept;
    void setNatureCd(std::string &&pNatureCd) noexcept;
    void setNatureCdToNull() noexcept;

    /**  For column NAME  */
    ///Get the value of the column NAME, returns the default value if the column is null
    const std::string &getValueOfName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getName() const noexcept;
    ///Set the value of the column NAME
    void setName(const std::string &pName) noexcept;
    void setName(std::string &&pName) noexcept;
    void setNameToNull() noexcept;

    /**  For column LEDIGERNAME  */
    ///Get the value of the column LEDIGERNAME, returns the default value if the column is null
    const std::string &getValueOfLedigername() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLedigername() const noexcept;
    ///Set the value of the column LEDIGERNAME
    void setLedigername(const std::string &pLedigername) noexcept;
    void setLedigername(std::string &&pLedigername) noexcept;
    void setLedigernameToNull() noexcept;

    /**  For column VORNAME  */
    ///Get the value of the column VORNAME, returns the default value if the column is null
    const std::string &getValueOfVorname() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getVorname() const noexcept;
    ///Set the value of the column VORNAME
    void setVorname(const std::string &pVorname) noexcept;
    void setVorname(std::string &&pVorname) noexcept;
    void setVornameToNull() noexcept;

    /**  For column CDPARTC  */
    ///Get the value of the column CDPARTC, returns the default value if the column is null
    const std::string &getValueOfCdpartc() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCdpartc() const noexcept;
    ///Set the value of the column CDPARTC
    void setCdpartc(const std::string &pCdpartc) noexcept;
    void setCdpartc(std::string &&pCdpartc) noexcept;
    void setCdpartcToNull() noexcept;

    /**  For column NATIONALITAET_CD  */
    ///Get the value of the column NATIONALITAET_CD, returns the default value if the column is null
    const std::string &getValueOfNationalitaetCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getNationalitaetCd() const noexcept;
    ///Set the value of the column NATIONALITAET_CD
    void setNationalitaetCd(const std::string &pNationalitaetCd) noexcept;
    void setNationalitaetCd(std::string &&pNationalitaetCd) noexcept;
    void setNationalitaetCdToNull() noexcept;

    /**  For column RISIKOLAND_CD  */
    ///Get the value of the column RISIKOLAND_CD, returns the default value if the column is null
    const std::string &getValueOfRisikolandCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRisikolandCd() const noexcept;
    ///Set the value of the column RISIKOLAND_CD
    void setRisikolandCd(const std::string &pRisikolandCd) noexcept;
    void setRisikolandCd(std::string &&pRisikolandCd) noexcept;
    void setRisikolandCdToNull() noexcept;

    /**  For column PERSOENLICHBEKANNT_CD  */
    ///Get the value of the column PERSOENLICHBEKANNT_CD, returns the default value if the column is null
    const std::string &getValueOfPersoenlichbekanntCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPersoenlichbekanntCd() const noexcept;
    ///Set the value of the column PERSOENLICHBEKANNT_CD
    void setPersoenlichbekanntCd(const std::string &pPersoenlichbekanntCd) noexcept;
    void setPersoenlichbekanntCd(std::string &&pPersoenlichbekanntCd) noexcept;
    void setPersoenlichbekanntCdToNull() noexcept;

    /**  For column RISIKOTAETIGKEIT_CD  */
    ///Get the value of the column RISIKOTAETIGKEIT_CD, returns the default value if the column is null
    const std::string &getValueOfRisikotaetigkeitCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRisikotaetigkeitCd() const noexcept;
    ///Set the value of the column RISIKOTAETIGKEIT_CD
    void setRisikotaetigkeitCd(const std::string &pRisikotaetigkeitCd) noexcept;
    void setRisikotaetigkeitCd(std::string &&pRisikotaetigkeitCd) noexcept;
    void setRisikotaetigkeitCdToNull() noexcept;

    /**  For column STEUERDOMIZIL_CD  */
    ///Get the value of the column STEUERDOMIZIL_CD, returns the default value if the column is null
    const std::string &getValueOfSteuerdomizilCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSteuerdomizilCd() const noexcept;
    ///Set the value of the column STEUERDOMIZIL_CD
    void setSteuerdomizilCd(const std::string &pSteuerdomizilCd) noexcept;
    void setSteuerdomizilCd(std::string &&pSteuerdomizilCd) noexcept;
    void setSteuerdomizilCdToNull() noexcept;

    /**  For column EU_TAXSTATUS_CD  */
    ///Get the value of the column EU_TAXSTATUS_CD, returns the default value if the column is null
    const std::string &getValueOfEuTaxstatusCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEuTaxstatusCd() const noexcept;
    ///Set the value of the column EU_TAXSTATUS_CD
    void setEuTaxstatusCd(const std::string &pEuTaxstatusCd) noexcept;
    void setEuTaxstatusCd(std::string &&pEuTaxstatusCd) noexcept;
    void setEuTaxstatusCdToNull() noexcept;

    /**  For column TIN  */
    ///Get the value of the column TIN, returns the default value if the column is null
    const std::string &getValueOfTin() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTin() const noexcept;
    ///Set the value of the column TIN
    void setTin(const std::string &pTin) noexcept;
    void setTin(std::string &&pTin) noexcept;
    void setTinToNull() noexcept;

    /**  For column APSYS_CDROLPERSI  */
    ///Get the value of the column APSYS_CDROLPERSI, returns the default value if the column is null
    const std::string &getValueOfApsysCdrolpersi() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysCdrolpersi() const noexcept;
    ///Set the value of the column APSYS_CDROLPERSI
    void setApsysCdrolpersi(const std::string &pApsysCdrolpersi) noexcept;
    void setApsysCdrolpersi(std::string &&pApsysCdrolpersi) noexcept;
    void setApsysCdrolpersiToNull() noexcept;

    /**  For column VERTRAGSPRACH_CD  */
    ///Get the value of the column VERTRAGSPRACH_CD, returns the default value if the column is null
    const std::string &getValueOfVertragsprachCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getVertragsprachCd() const noexcept;
    ///Set the value of the column VERTRAGSPRACH_CD
    void setVertragsprachCd(const std::string &pVertragsprachCd) noexcept;
    void setVertragsprachCd(std::string &&pVertragsprachCd) noexcept;
    void setVertragsprachCdToNull() noexcept;

    /**  For column VERMOEGENSKATEGORIE_IHAG_CD  */
    ///Get the value of the column VERMOEGENSKATEGORIE_IHAG_CD, returns the default value if the column is null
    const std::string &getValueOfVermoegenskategorieIhagCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getVermoegenskategorieIhagCd() const noexcept;
    ///Set the value of the column VERMOEGENSKATEGORIE_IHAG_CD
    void setVermoegenskategorieIhagCd(const std::string &pVermoegenskategorieIhagCd) noexcept;
    void setVermoegenskategorieIhagCd(std::string &&pVermoegenskategorieIhagCd) noexcept;
    void setVermoegenskategorieIhagCdToNull() noexcept;

    /**  For column APSYS_INTISHS  */
    ///Get the value of the column APSYS_INTISHS, returns the default value if the column is null
    const std::string &getValueOfApsysIntishs() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysIntishs() const noexcept;
    ///Set the value of the column APSYS_INTISHS
    void setApsysIntishs(const std::string &pApsysIntishs) noexcept;
    void setApsysIntishs(std::string &&pApsysIntishs) noexcept;
    void setApsysIntishsToNull() noexcept;

    /**  For column APSYS_INTILGS  */
    ///Get the value of the column APSYS_INTILGS, returns the default value if the column is null
    const std::string &getValueOfApsysIntilgs() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysIntilgs() const noexcept;
    ///Set the value of the column APSYS_INTILGS
    void setApsysIntilgs(const std::string &pApsysIntilgs) noexcept;
    void setApsysIntilgs(std::string &&pApsysIntilgs) noexcept;
    void setApsysIntilgsToNull() noexcept;

    /**  For column GESAMTVERMOEGEN_CD  */
    ///Get the value of the column GESAMTVERMOEGEN_CD, returns the default value if the column is null
    const double &getValueOfGesamtvermoegenCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getGesamtvermoegenCd() const noexcept;
    ///Set the value of the column GESAMTVERMOEGEN_CD
    void setGesamtvermoegenCd(const double &pGesamtvermoegenCd) noexcept;
    void setGesamtvermoegenCdToNull() noexcept;

    /**  For column COMPLIANCE_OK_CD  */
    ///Get the value of the column COMPLIANCE_OK_CD, returns the default value if the column is null
    const std::string &getValueOfComplianceOkCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getComplianceOkCd() const noexcept;
    ///Set the value of the column COMPLIANCE_OK_CD
    void setComplianceOkCd(const std::string &pComplianceOkCd) noexcept;
    void setComplianceOkCd(std::string &&pComplianceOkCd) noexcept;
    void setComplianceOkCdToNull() noexcept;

    /**  For column COMPLIANCE_OK_BEMERKUNG  */
    ///Get the value of the column COMPLIANCE_OK_BEMERKUNG, returns the default value if the column is null
    const std::string &getValueOfComplianceOkBemerkung() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getComplianceOkBemerkung() const noexcept;
    ///Set the value of the column COMPLIANCE_OK_BEMERKUNG
    void setComplianceOkBemerkung(const std::string &pComplianceOkBemerkung) noexcept;
    void setComplianceOkBemerkung(std::string &&pComplianceOkBemerkung) noexcept;
    void setComplianceOkBemerkungToNull() noexcept;

    /**  For column COMPLIANCE_OK_DATUM  */
    ///Get the value of the column COMPLIANCE_OK_DATUM, returns the default value if the column is null
    const ::trantor::Date &getValueOfComplianceOkDatum() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getComplianceOkDatum() const noexcept;
    ///Set the value of the column COMPLIANCE_OK_DATUM
    void setComplianceOkDatum(const ::trantor::Date &pComplianceOkDatum) noexcept;
    void setComplianceOkDatumToNull() noexcept;

    /**  For column COMPLIANCE_OK_USERID  */
    ///Get the value of the column COMPLIANCE_OK_USERID, returns the default value if the column is null
    const std::string &getValueOfComplianceOkUserid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getComplianceOkUserid() const noexcept;
    ///Set the value of the column COMPLIANCE_OK_USERID
    void setComplianceOkUserid(const std::string &pComplianceOkUserid) noexcept;
    void setComplianceOkUserid(std::string &&pComplianceOkUserid) noexcept;
    void setComplianceOkUseridToNull() noexcept;

    /**  For column EIN_VERMOEGEN  */
    ///Get the value of the column EIN_VERMOEGEN, returns the default value if the column is null
    const double &getValueOfEinVermoegen() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getEinVermoegen() const noexcept;
    ///Set the value of the column EIN_VERMOEGEN
    void setEinVermoegen(const double &pEinVermoegen) noexcept;
    void setEinVermoegenToNull() noexcept;

    /**  For column SEGMENTIERUNG_CD  */
    ///Get the value of the column SEGMENTIERUNG_CD, returns the default value if the column is null
    const double &getValueOfSegmentierungCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getSegmentierungCd() const noexcept;
    ///Set the value of the column SEGMENTIERUNG_CD
    void setSegmentierungCd(const double &pSegmentierungCd) noexcept;
    void setSegmentierungCdToNull() noexcept;

    /**  For column AKTID  */
    ///Get the value of the column AKTID, returns the default value if the column is null
    const double &getValueOfAktid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getAktid() const noexcept;
    ///Set the value of the column AKTID
    void setAktid(const double &pAktid) noexcept;
    void setAktidToNull() noexcept;

    /**  For column VALIDID  */
    ///Get the value of the column VALIDID, returns the default value if the column is null
    const double &getValueOfValidid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getValidid() const noexcept;
    ///Set the value of the column VALIDID
    void setValidid(const double &pValidid) noexcept;
    void setValididToNull() noexcept;

    /**  For column VALID_CD  */
    ///Get the value of the column VALID_CD, returns the default value if the column is null
    const std::string &getValueOfValidCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getValidCd() const noexcept;
    ///Set the value of the column VALID_CD
    void setValidCd(const std::string &pValidCd) noexcept;
    void setValidCd(std::string &&pValidCd) noexcept;
    void setValidCdToNull() noexcept;

    /**  For column VALIDUSER  */
    ///Get the value of the column VALIDUSER, returns the default value if the column is null
    const std::string &getValueOfValiduser() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getValiduser() const noexcept;
    ///Set the value of the column VALIDUSER
    void setValiduser(const std::string &pValiduser) noexcept;
    void setValiduser(std::string &&pValiduser) noexcept;
    void setValiduserToNull() noexcept;

    /**  For column ENC_SALT  */
    ///Get the value of the column ENC_SALT, returns the default value if the column is null
    const std::string &getValueOfEncSalt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEncSalt() const noexcept;
    ///Set the value of the column ENC_SALT
    void setEncSalt(const std::string &pEncSalt) noexcept;
    void setEncSalt(std::string &&pEncSalt) noexcept;
    void setEncSaltToNull() noexcept;

    /**  For column BEZEICHNUNG_ENC  */
    ///Get the value of the column BEZEICHNUNG_ENC, returns the default value if the column is null
    const std::string &getValueOfBezeichnungEnc() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getBezeichnungEnc() const noexcept;
    ///Set the value of the column BEZEICHNUNG_ENC
    void setBezeichnungEnc(const std::string &pBezeichnungEnc) noexcept;
    void setBezeichnungEnc(std::string &&pBezeichnungEnc) noexcept;
    void setBezeichnungEncToNull() noexcept;

    /**  For column APSYS_CDMOTIFPARTS  */
    ///Get the value of the column APSYS_CDMOTIFPARTS, returns the default value if the column is null
    const std::string &getValueOfApsysCdmotifparts() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysCdmotifparts() const noexcept;
    ///Set the value of the column APSYS_CDMOTIFPARTS
    void setApsysCdmotifparts(const std::string &pApsysCdmotifparts) noexcept;
    void setApsysCdmotifparts(std::string &&pApsysCdmotifparts) noexcept;
    void setApsysCdmotifpartsToNull() noexcept;

    /**  For column APSYS_CDINDUS0S  */
    ///Get the value of the column APSYS_CDINDUS0S, returns the default value if the column is null
    const std::string &getValueOfApsysCdindus0s() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysCdindus0s() const noexcept;
    ///Set the value of the column APSYS_CDINDUS0S
    void setApsysCdindus0s(const std::string &pApsysCdindus0s) noexcept;
    void setApsysCdindus0s(std::string &&pApsysCdindus0s) noexcept;
    void setApsysCdindus0sToNull() noexcept;

    /**  For column APSYS_FLAGPREAVISEXEC  */
    ///Get the value of the column APSYS_FLAGPREAVISEXEC, returns the default value if the column is null
    const std::string &getValueOfApsysFlagpreavisexec() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysFlagpreavisexec() const noexcept;
    ///Set the value of the column APSYS_FLAGPREAVISEXEC
    void setApsysFlagpreavisexec(const std::string &pApsysFlagpreavisexec) noexcept;
    void setApsysFlagpreavisexec(std::string &&pApsysFlagpreavisexec) noexcept;
    void setApsysFlagpreavisexecToNull() noexcept;

    /**  For column APSYS_CDAVIOBISPECC  */
    ///Get the value of the column APSYS_CDAVIOBISPECC, returns the default value if the column is null
    const std::string &getValueOfApsysCdaviobispecc() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysCdaviobispecc() const noexcept;
    ///Set the value of the column APSYS_CDAVIOBISPECC
    void setApsysCdaviobispecc(const std::string &pApsysCdaviobispecc) noexcept;
    void setApsysCdaviobispecc(std::string &&pApsysCdaviobispecc) noexcept;
    void setApsysCdaviobispeccToNull() noexcept;

    /**  For column APSYS_FLAGHISPERC  */
    ///Get the value of the column APSYS_FLAGHISPERC, returns the default value if the column is null
    const std::string &getValueOfApsysFlaghisperc() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysFlaghisperc() const noexcept;
    ///Set the value of the column APSYS_FLAGHISPERC
    void setApsysFlaghisperc(const std::string &pApsysFlaghisperc) noexcept;
    void setApsysFlaghisperc(std::string &&pApsysFlaghisperc) noexcept;
    void setApsysFlaghispercToNull() noexcept;

    /**  For column APSYS_REPAMANUC  */
    ///Get the value of the column APSYS_REPAMANUC, returns the default value if the column is null
    const std::string &getValueOfApsysRepamanuc() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysRepamanuc() const noexcept;
    ///Set the value of the column APSYS_REPAMANUC
    void setApsysRepamanuc(const std::string &pApsysRepamanuc) noexcept;
    void setApsysRepamanuc(std::string &&pApsysRepamanuc) noexcept;
    void setApsysRepamanucToNull() noexcept;

    /**  For column APSYS_PERDEVCALC  */
    ///Get the value of the column APSYS_PERDEVCALC, returns the default value if the column is null
    const std::string &getValueOfApsysPerdevcalc() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysPerdevcalc() const noexcept;
    ///Set the value of the column APSYS_PERDEVCALC
    void setApsysPerdevcalc(const std::string &pApsysPerdevcalc) noexcept;
    void setApsysPerdevcalc(std::string &&pApsysPerdevcalc) noexcept;
    void setApsysPerdevcalcToNull() noexcept;

    /**  For column APSYS_FLAGUKTAXC  */
    ///Get the value of the column APSYS_FLAGUKTAXC, returns the default value if the column is null
    const std::string &getValueOfApsysFlaguktaxc() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysFlaguktaxc() const noexcept;
    ///Set the value of the column APSYS_FLAGUKTAXC
    void setApsysFlaguktaxc(const std::string &pApsysFlaguktaxc) noexcept;
    void setApsysFlaguktaxc(std::string &&pApsysFlaguktaxc) noexcept;
    void setApsysFlaguktaxcToNull() noexcept;

    /**  For column APSYS_CDNOGAS  */
    ///Get the value of the column APSYS_CDNOGAS, returns the default value if the column is null
    const std::string &getValueOfApsysCdnogas() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysCdnogas() const noexcept;
    ///Set the value of the column APSYS_CDNOGAS
    void setApsysCdnogas(const std::string &pApsysCdnogas) noexcept;
    void setApsysCdnogas(std::string &&pApsysCdnogas) noexcept;
    void setApsysCdnogasToNull() noexcept;

    /**  For column APSYS_STATFISCC  */
    ///Get the value of the column APSYS_STATFISCC, returns the default value if the column is null
    const std::string &getValueOfApsysStatfiscc() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysStatfiscc() const noexcept;
    ///Set the value of the column APSYS_STATFISCC
    void setApsysStatfiscc(const std::string &pApsysStatfiscc) noexcept;
    void setApsysStatfiscc(std::string &&pApsysStatfiscc) noexcept;
    void setApsysStatfisccToNull() noexcept;

    /**  For column APSYS_FLAGFWTI  */
    ///Get the value of the column APSYS_FLAGFWTI, returns the default value if the column is null
    const std::string &getValueOfApsysFlagfwti() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysFlagfwti() const noexcept;
    ///Set the value of the column APSYS_FLAGFWTI
    void setApsysFlagfwti(const std::string &pApsysFlagfwti) noexcept;
    void setApsysFlagfwti(std::string &&pApsysFlagfwti) noexcept;
    void setApsysFlagfwtiToNull() noexcept;

    /**  For column APSYS_FLAGFWTUKNRSDI  */
    ///Get the value of the column APSYS_FLAGFWTUKNRSDI, returns the default value if the column is null
    const std::string &getValueOfApsysFlagfwtuknrsdi() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysFlagfwtuknrsdi() const noexcept;
    ///Set the value of the column APSYS_FLAGFWTUKNRSDI
    void setApsysFlagfwtuknrsdi(const std::string &pApsysFlagfwtuknrsdi) noexcept;
    void setApsysFlagfwtuknrsdi(std::string &&pApsysFlagfwtuknrsdi) noexcept;
    void setApsysFlagfwtuknrsdiToNull() noexcept;

    /**  For column APSYS_FLAGFWTTAXSPEGEI  */
    ///Get the value of the column APSYS_FLAGFWTTAXSPEGEI, returns the default value if the column is null
    const std::string &getValueOfApsysFlagfwttaxspegei() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysFlagfwttaxspegei() const noexcept;
    ///Set the value of the column APSYS_FLAGFWTTAXSPEGEI
    void setApsysFlagfwttaxspegei(const std::string &pApsysFlagfwttaxspegei) noexcept;
    void setApsysFlagfwttaxspegei(std::string &&pApsysFlagfwttaxspegei) noexcept;
    void setApsysFlagfwttaxspegeiToNull() noexcept;

    /**  For column APSYS_CDFWTOPTREGULFISCANCC  */
    ///Get the value of the column APSYS_CDFWTOPTREGULFISCANCC, returns the default value if the column is null
    const std::string &getValueOfApsysCdfwtoptregulfiscancc() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysCdfwtoptregulfiscancc() const noexcept;
    ///Set the value of the column APSYS_CDFWTOPTREGULFISCANCC
    void setApsysCdfwtoptregulfiscancc(const std::string &pApsysCdfwtoptregulfiscancc) noexcept;
    void setApsysCdfwtoptregulfiscancc(std::string &&pApsysCdfwtoptregulfiscancc) noexcept;
    void setApsysCdfwtoptregulfiscanccToNull() noexcept;

    /**  For column APSYS_CDFWTSTATREGULFISCANCC  */
    ///Get the value of the column APSYS_CDFWTSTATREGULFISCANCC, returns the default value if the column is null
    const std::string &getValueOfApsysCdfwtstatregulfiscancc() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysCdfwtstatregulfiscancc() const noexcept;
    ///Set the value of the column APSYS_CDFWTSTATREGULFISCANCC
    void setApsysCdfwtstatregulfiscancc(const std::string &pApsysCdfwtstatregulfiscancc) noexcept;
    void setApsysCdfwtstatregulfiscancc(std::string &&pApsysCdfwtstatregulfiscancc) noexcept;
    void setApsysCdfwtstatregulfiscanccToNull() noexcept;

    /**  For column APSYS_CDFWTOPTREGULFISCFUTC  */
    ///Get the value of the column APSYS_CDFWTOPTREGULFISCFUTC, returns the default value if the column is null
    const std::string &getValueOfApsysCdfwtoptregulfiscfutc() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysCdfwtoptregulfiscfutc() const noexcept;
    ///Set the value of the column APSYS_CDFWTOPTREGULFISCFUTC
    void setApsysCdfwtoptregulfiscfutc(const std::string &pApsysCdfwtoptregulfiscfutc) noexcept;
    void setApsysCdfwtoptregulfiscfutc(std::string &&pApsysCdfwtoptregulfiscfutc) noexcept;
    void setApsysCdfwtoptregulfiscfutcToNull() noexcept;

    /**  For column STEUERLAND_ABGST_CD  */
    ///Get the value of the column STEUERLAND_ABGST_CD, returns the default value if the column is null
    const std::string &getValueOfSteuerlandAbgstCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSteuerlandAbgstCd() const noexcept;
    ///Set the value of the column STEUERLAND_ABGST_CD
    void setSteuerlandAbgstCd(const std::string &pSteuerlandAbgstCd) noexcept;
    void setSteuerlandAbgstCd(std::string &&pSteuerlandAbgstCd) noexcept;
    void setSteuerlandAbgstCdToNull() noexcept;

    /**  For column APSYS_CDNATURES  */
    ///Get the value of the column APSYS_CDNATURES, returns the default value if the column is null
    const std::string &getValueOfApsysCdnatures() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysCdnatures() const noexcept;
    ///Set the value of the column APSYS_CDNATURES
    void setApsysCdnatures(const std::string &pApsysCdnatures) noexcept;
    void setApsysCdnatures(std::string &&pApsysCdnatures) noexcept;
    void setApsysCdnaturesToNull() noexcept;

    /**  For column APSYS_SHNAS  */
    ///Get the value of the column APSYS_SHNAS, returns the default value if the column is null
    const std::string &getValueOfApsysShnas() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysShnas() const noexcept;
    ///Set the value of the column APSYS_SHNAS
    void setApsysShnas(const std::string &pApsysShnas) noexcept;
    void setApsysShnas(std::string &&pApsysShnas) noexcept;
    void setApsysShnasToNull() noexcept;

    /**  For column APSYS_CDPYHQDOMIS  */
    ///Get the value of the column APSYS_CDPYHQDOMIS, returns the default value if the column is null
    const std::string &getValueOfApsysCdpyhqdomis() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysCdpyhqdomis() const noexcept;
    ///Set the value of the column APSYS_CDPYHQDOMIS
    void setApsysCdpyhqdomis(const std::string &pApsysCdpyhqdomis) noexcept;
    void setApsysCdpyhqdomis(std::string &&pApsysCdpyhqdomis) noexcept;
    void setApsysCdpyhqdomisToNull() noexcept;

    /**  For column APSYS_CDPERMI  */
    ///Get the value of the column APSYS_CDPERMI, returns the default value if the column is null
    const double &getValueOfApsysCdpermi() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getApsysCdpermi() const noexcept;
    ///Set the value of the column APSYS_CDPERMI
    void setApsysCdpermi(const double &pApsysCdpermi) noexcept;
    void setApsysCdpermiToNull() noexcept;

    /**  For column APSYS_IDRCIS  */
    ///Get the value of the column APSYS_IDRCIS, returns the default value if the column is null
    const std::string &getValueOfApsysIdrcis() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysIdrcis() const noexcept;
    ///Set the value of the column APSYS_IDRCIS
    void setApsysIdrcis(const std::string &pApsysIdrcis) noexcept;
    void setApsysIdrcis(std::string &&pApsysIdrcis) noexcept;
    void setApsysIdrcisToNull() noexcept;

    /**  For column APSYS_FLAGISTTC  */
    ///Get the value of the column APSYS_FLAGISTTC, returns the default value if the column is null
    const std::string &getValueOfApsysFlagisttc() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysFlagisttc() const noexcept;
    ///Set the value of the column APSYS_FLAGISTTC
    void setApsysFlagisttc(const std::string &pApsysFlagisttc) noexcept;
    void setApsysFlagisttc(std::string &&pApsysFlagisttc) noexcept;
    void setApsysFlagisttcToNull() noexcept;

    /**  For column APSYS_DEVEVALS  */
    ///Get the value of the column APSYS_DEVEVALS, returns the default value if the column is null
    const std::string &getValueOfApsysDevevals() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysDevevals() const noexcept;
    ///Set the value of the column APSYS_DEVEVALS
    void setApsysDevevals(const std::string &pApsysDevevals) noexcept;
    void setApsysDevevals(std::string &&pApsysDevevals) noexcept;
    void setApsysDevevalsToNull() noexcept;

    /**  For column APSYS_IDSTRUCS  */
    ///Get the value of the column APSYS_IDSTRUCS, returns the default value if the column is null
    const std::string &getValueOfApsysIdstrucs() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysIdstrucs() const noexcept;
    ///Set the value of the column APSYS_IDSTRUCS
    void setApsysIdstrucs(const std::string &pApsysIdstrucs) noexcept;
    void setApsysIdstrucs(std::string &&pApsysIdstrucs) noexcept;
    void setApsysIdstrucsToNull() noexcept;

    /**  For column APSYS_SUIVIAGTS  */
    ///Get the value of the column APSYS_SUIVIAGTS, returns the default value if the column is null
    const std::string &getValueOfApsysSuiviagts() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysSuiviagts() const noexcept;
    ///Set the value of the column APSYS_SUIVIAGTS
    void setApsysSuiviagts(const std::string &pApsysSuiviagts) noexcept;
    void setApsysSuiviagts(std::string &&pApsysSuiviagts) noexcept;
    void setApsysSuiviagtsToNull() noexcept;

    /**  For column APSYS_CDINDUSCSSFS  */
    ///Get the value of the column APSYS_CDINDUSCSSFS, returns the default value if the column is null
    const std::string &getValueOfApsysCdinduscssfs() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysCdinduscssfs() const noexcept;
    ///Set the value of the column APSYS_CDINDUSCSSFS
    void setApsysCdinduscssfs(const std::string &pApsysCdinduscssfs) noexcept;
    void setApsysCdinduscssfs(std::string &&pApsysCdinduscssfs) noexcept;
    void setApsysCdinduscssfsToNull() noexcept;

    /**  For column APSYS_CDINDUSBLUXS  */
    ///Get the value of the column APSYS_CDINDUSBLUXS, returns the default value if the column is null
    const std::string &getValueOfApsysCdindusbluxs() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysCdindusbluxs() const noexcept;
    ///Set the value of the column APSYS_CDINDUSBLUXS
    void setApsysCdindusbluxs(const std::string &pApsysCdindusbluxs) noexcept;
    void setApsysCdindusbluxs(std::string &&pApsysCdindusbluxs) noexcept;
    void setApsysCdindusbluxsToNull() noexcept;

    /**  For column APSYS_CDINDUSSBUBA  */
    ///Get the value of the column APSYS_CDINDUSSBUBA, returns the default value if the column is null
    const std::string &getValueOfApsysCdindussbuba() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysCdindussbuba() const noexcept;
    ///Set the value of the column APSYS_CDINDUSSBUBA
    void setApsysCdindussbuba(const std::string &pApsysCdindussbuba) noexcept;
    void setApsysCdindussbuba(std::string &&pApsysCdindussbuba) noexcept;
    void setApsysCdindussbubaToNull() noexcept;

    /**  For column APSYS_CDINDUSSBNS  */
    ///Get the value of the column APSYS_CDINDUSSBNS, returns the default value if the column is null
    const std::string &getValueOfApsysCdindussbns() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysCdindussbns() const noexcept;
    ///Set the value of the column APSYS_CDINDUSSBNS
    void setApsysCdindussbns(const std::string &pApsysCdindussbns) noexcept;
    void setApsysCdindussbns(std::string &&pApsysCdindussbns) noexcept;
    void setApsysCdindussbnsToNull() noexcept;

    /**  For column APSYS_GRMTEVALS  */
    ///Get the value of the column APSYS_GRMTEVALS, returns the default value if the column is null
    const std::string &getValueOfApsysGrmtevals() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysGrmtevals() const noexcept;
    ///Set the value of the column APSYS_GRMTEVALS
    void setApsysGrmtevals(const std::string &pApsysGrmtevals) noexcept;
    void setApsysGrmtevals(std::string &&pApsysGrmtevals) noexcept;
    void setApsysGrmtevalsToNull() noexcept;

    /**  For column APSYS_IDPOCS  */
    ///Get the value of the column APSYS_IDPOCS, returns the default value if the column is null
    const std::string &getValueOfApsysIdpocs() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysIdpocs() const noexcept;
    ///Set the value of the column APSYS_IDPOCS
    void setApsysIdpocs(const std::string &pApsysIdpocs) noexcept;
    void setApsysIdpocs(std::string &&pApsysIdpocs) noexcept;
    void setApsysIdpocsToNull() noexcept;

    /**  For column APSYS_INFO  */
    ///Get the value of the column APSYS_INFO, returns the default value if the column is null
    const std::string &getValueOfApsysInfo() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysInfo() const noexcept;
    ///Set the value of the column APSYS_INFO
    void setApsysInfo(const std::string &pApsysInfo) noexcept;
    void setApsysInfo(std::string &&pApsysInfo) noexcept;
    void setApsysInfoToNull() noexcept;

    /**  For column APSYS_IDENTS  */
    ///Get the value of the column APSYS_IDENTS, returns the default value if the column is null
    const std::string &getValueOfApsysIdents() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysIdents() const noexcept;
    ///Set the value of the column APSYS_IDENTS
    void setApsysIdents(const std::string &pApsysIdents) noexcept;
    void setApsysIdents(std::string &&pApsysIdents) noexcept;
    void setApsysIdentsToNull() noexcept;

    /**  For column APSYS_STATUS_OPEC  */
    ///Get the value of the column APSYS_STATUS_OPEC, returns the default value if the column is null
    const std::string &getValueOfApsysStatusOpec() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysStatusOpec() const noexcept;
    ///Set the value of the column APSYS_STATUS_OPEC
    void setApsysStatusOpec(const std::string &pApsysStatusOpec) noexcept;
    void setApsysStatusOpec(std::string &&pApsysStatusOpec) noexcept;
    void setApsysStatusOpecToNull() noexcept;

    /**  For column APSYS_ERRI  */
    ///Get the value of the column APSYS_ERRI, returns the default value if the column is null
    const double &getValueOfApsysErri() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getApsysErri() const noexcept;
    ///Set the value of the column APSYS_ERRI
    void setApsysErri(const double &pApsysErri) noexcept;
    void setApsysErriToNull() noexcept;

    /**  For column NATIONALITAET2_CD  */
    ///Get the value of the column NATIONALITAET2_CD, returns the default value if the column is null
    const std::string &getValueOfNationalitaet2Cd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getNationalitaet2Cd() const noexcept;
    ///Set the value of the column NATIONALITAET2_CD
    void setNationalitaet2Cd(const std::string &pNationalitaet2Cd) noexcept;
    void setNationalitaet2Cd(std::string &&pNationalitaet2Cd) noexcept;
    void setNationalitaet2CdToNull() noexcept;

    /**  For column NATIONALITAET3_CD  */
    ///Get the value of the column NATIONALITAET3_CD, returns the default value if the column is null
    const std::string &getValueOfNationalitaet3Cd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getNationalitaet3Cd() const noexcept;
    ///Set the value of the column NATIONALITAET3_CD
    void setNationalitaet3Cd(const std::string &pNationalitaet3Cd) noexcept;
    void setNationalitaet3Cd(std::string &&pNationalitaet3Cd) noexcept;
    void setNationalitaet3CdToNull() noexcept;

    /**  For column VERMOEGENSURSPRUNG2_CD  */
    ///Get the value of the column VERMOEGENSURSPRUNG2_CD, returns the default value if the column is null
    const std::string &getValueOfVermoegensursprung2Cd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getVermoegensursprung2Cd() const noexcept;
    ///Set the value of the column VERMOEGENSURSPRUNG2_CD
    void setVermoegensursprung2Cd(const std::string &pVermoegensursprung2Cd) noexcept;
    void setVermoegensursprung2Cd(std::string &&pVermoegensursprung2Cd) noexcept;
    void setVermoegensursprung2CdToNull() noexcept;

    /**  For column VERMOEGENSURSPRUNG2  */
    ///Get the value of the column VERMOEGENSURSPRUNG2, returns the default value if the column is null
    const std::string &getValueOfVermoegensursprung2() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getVermoegensursprung2() const noexcept;
    ///Set the value of the column VERMOEGENSURSPRUNG2
    void setVermoegensursprung2(const std::string &pVermoegensursprung2) noexcept;
    void setVermoegensursprung2(std::string &&pVermoegensursprung2) noexcept;
    void setVermoegensursprung2ToNull() noexcept;

    /**  For column APPROVAL_STEP1_CD  */
    ///Get the value of the column APPROVAL_STEP1_CD, returns the default value if the column is null
    const std::string &getValueOfApprovalStep1Cd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApprovalStep1Cd() const noexcept;
    ///Set the value of the column APPROVAL_STEP1_CD
    void setApprovalStep1Cd(const std::string &pApprovalStep1Cd) noexcept;
    void setApprovalStep1Cd(std::string &&pApprovalStep1Cd) noexcept;
    void setApprovalStep1CdToNull() noexcept;

    /**  For column APPROVAL_STEP1_USER  */
    ///Get the value of the column APPROVAL_STEP1_USER, returns the default value if the column is null
    const std::string &getValueOfApprovalStep1User() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApprovalStep1User() const noexcept;
    ///Set the value of the column APPROVAL_STEP1_USER
    void setApprovalStep1User(const std::string &pApprovalStep1User) noexcept;
    void setApprovalStep1User(std::string &&pApprovalStep1User) noexcept;
    void setApprovalStep1UserToNull() noexcept;

    /**  For column APPROVAL_STEP1_DATE  */
    ///Get the value of the column APPROVAL_STEP1_DATE, returns the default value if the column is null
    const ::trantor::Date &getValueOfApprovalStep1Date() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getApprovalStep1Date() const noexcept;
    ///Set the value of the column APPROVAL_STEP1_DATE
    void setApprovalStep1Date(const ::trantor::Date &pApprovalStep1Date) noexcept;
    void setApprovalStep1DateToNull() noexcept;

    /**  For column APPROVAL_STEP2_CD  */
    ///Get the value of the column APPROVAL_STEP2_CD, returns the default value if the column is null
    const std::string &getValueOfApprovalStep2Cd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApprovalStep2Cd() const noexcept;
    ///Set the value of the column APPROVAL_STEP2_CD
    void setApprovalStep2Cd(const std::string &pApprovalStep2Cd) noexcept;
    void setApprovalStep2Cd(std::string &&pApprovalStep2Cd) noexcept;
    void setApprovalStep2CdToNull() noexcept;

    /**  For column APPROVAL_STEP2_USER  */
    ///Get the value of the column APPROVAL_STEP2_USER, returns the default value if the column is null
    const std::string &getValueOfApprovalStep2User() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApprovalStep2User() const noexcept;
    ///Set the value of the column APPROVAL_STEP2_USER
    void setApprovalStep2User(const std::string &pApprovalStep2User) noexcept;
    void setApprovalStep2User(std::string &&pApprovalStep2User) noexcept;
    void setApprovalStep2UserToNull() noexcept;

    /**  For column APPROVAL_STEP2_DATE  */
    ///Get the value of the column APPROVAL_STEP2_DATE, returns the default value if the column is null
    const ::trantor::Date &getValueOfApprovalStep2Date() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getApprovalStep2Date() const noexcept;
    ///Set the value of the column APPROVAL_STEP2_DATE
    void setApprovalStep2Date(const ::trantor::Date &pApprovalStep2Date) noexcept;
    void setApprovalStep2DateToNull() noexcept;

    /**  For column APPROVAL_STEP3_CD  */
    ///Get the value of the column APPROVAL_STEP3_CD, returns the default value if the column is null
    const std::string &getValueOfApprovalStep3Cd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApprovalStep3Cd() const noexcept;
    ///Set the value of the column APPROVAL_STEP3_CD
    void setApprovalStep3Cd(const std::string &pApprovalStep3Cd) noexcept;
    void setApprovalStep3Cd(std::string &&pApprovalStep3Cd) noexcept;
    void setApprovalStep3CdToNull() noexcept;

    /**  For column APPROVAL_STEP3_USER  */
    ///Get the value of the column APPROVAL_STEP3_USER, returns the default value if the column is null
    const std::string &getValueOfApprovalStep3User() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApprovalStep3User() const noexcept;
    ///Set the value of the column APPROVAL_STEP3_USER
    void setApprovalStep3User(const std::string &pApprovalStep3User) noexcept;
    void setApprovalStep3User(std::string &&pApprovalStep3User) noexcept;
    void setApprovalStep3UserToNull() noexcept;

    /**  For column APPROVAL_STEP3_DATE  */
    ///Get the value of the column APPROVAL_STEP3_DATE, returns the default value if the column is null
    const ::trantor::Date &getValueOfApprovalStep3Date() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getApprovalStep3Date() const noexcept;
    ///Set the value of the column APPROVAL_STEP3_DATE
    void setApprovalStep3Date(const ::trantor::Date &pApprovalStep3Date) noexcept;
    void setApprovalStep3DateToNull() noexcept;

    /**  For column APPROVAL_STEP4_CD  */
    ///Get the value of the column APPROVAL_STEP4_CD, returns the default value if the column is null
    const std::string &getValueOfApprovalStep4Cd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApprovalStep4Cd() const noexcept;
    ///Set the value of the column APPROVAL_STEP4_CD
    void setApprovalStep4Cd(const std::string &pApprovalStep4Cd) noexcept;
    void setApprovalStep4Cd(std::string &&pApprovalStep4Cd) noexcept;
    void setApprovalStep4CdToNull() noexcept;

    /**  For column APPROVAL_STEP4_USER  */
    ///Get the value of the column APPROVAL_STEP4_USER, returns the default value if the column is null
    const std::string &getValueOfApprovalStep4User() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApprovalStep4User() const noexcept;
    ///Set the value of the column APPROVAL_STEP4_USER
    void setApprovalStep4User(const std::string &pApprovalStep4User) noexcept;
    void setApprovalStep4User(std::string &&pApprovalStep4User) noexcept;
    void setApprovalStep4UserToNull() noexcept;

    /**  For column APPROVAL_STEP4_DATE  */
    ///Get the value of the column APPROVAL_STEP4_DATE, returns the default value if the column is null
    const ::trantor::Date &getValueOfApprovalStep4Date() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getApprovalStep4Date() const noexcept;
    ///Set the value of the column APPROVAL_STEP4_DATE
    void setApprovalStep4Date(const ::trantor::Date &pApprovalStep4Date) noexcept;
    void setApprovalStep4DateToNull() noexcept;

    /**  For column APPROVAL_STEP5_CD  */
    ///Get the value of the column APPROVAL_STEP5_CD, returns the default value if the column is null
    const std::string &getValueOfApprovalStep5Cd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApprovalStep5Cd() const noexcept;
    ///Set the value of the column APPROVAL_STEP5_CD
    void setApprovalStep5Cd(const std::string &pApprovalStep5Cd) noexcept;
    void setApprovalStep5Cd(std::string &&pApprovalStep5Cd) noexcept;
    void setApprovalStep5CdToNull() noexcept;

    /**  For column APPROVAL_STEP5_USER  */
    ///Get the value of the column APPROVAL_STEP5_USER, returns the default value if the column is null
    const std::string &getValueOfApprovalStep5User() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApprovalStep5User() const noexcept;
    ///Set the value of the column APPROVAL_STEP5_USER
    void setApprovalStep5User(const std::string &pApprovalStep5User) noexcept;
    void setApprovalStep5User(std::string &&pApprovalStep5User) noexcept;
    void setApprovalStep5UserToNull() noexcept;

    /**  For column APPROVAL_STEP5_DATE  */
    ///Get the value of the column APPROVAL_STEP5_DATE, returns the default value if the column is null
    const ::trantor::Date &getValueOfApprovalStep5Date() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getApprovalStep5Date() const noexcept;
    ///Set the value of the column APPROVAL_STEP5_DATE
    void setApprovalStep5Date(const ::trantor::Date &pApprovalStep5Date) noexcept;
    void setApprovalStep5DateToNull() noexcept;

    /**  For column APPROVAL_STEP1_BEM  */
    ///Get the value of the column APPROVAL_STEP1_BEM, returns the default value if the column is null
    const std::string &getValueOfApprovalStep1Bem() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApprovalStep1Bem() const noexcept;
    ///Set the value of the column APPROVAL_STEP1_BEM
    void setApprovalStep1Bem(const std::string &pApprovalStep1Bem) noexcept;
    void setApprovalStep1Bem(std::string &&pApprovalStep1Bem) noexcept;
    void setApprovalStep1BemToNull() noexcept;

    /**  For column APPROVAL_STEP2_BEM  */
    ///Get the value of the column APPROVAL_STEP2_BEM, returns the default value if the column is null
    const std::string &getValueOfApprovalStep2Bem() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApprovalStep2Bem() const noexcept;
    ///Set the value of the column APPROVAL_STEP2_BEM
    void setApprovalStep2Bem(const std::string &pApprovalStep2Bem) noexcept;
    void setApprovalStep2Bem(std::string &&pApprovalStep2Bem) noexcept;
    void setApprovalStep2BemToNull() noexcept;

    /**  For column APPROVAL_STEP3_BEM  */
    ///Get the value of the column APPROVAL_STEP3_BEM, returns the default value if the column is null
    const std::string &getValueOfApprovalStep3Bem() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApprovalStep3Bem() const noexcept;
    ///Set the value of the column APPROVAL_STEP3_BEM
    void setApprovalStep3Bem(const std::string &pApprovalStep3Bem) noexcept;
    void setApprovalStep3Bem(std::string &&pApprovalStep3Bem) noexcept;
    void setApprovalStep3BemToNull() noexcept;

    /**  For column APPROVAL_STEP4_BEM  */
    ///Get the value of the column APPROVAL_STEP4_BEM, returns the default value if the column is null
    const std::string &getValueOfApprovalStep4Bem() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApprovalStep4Bem() const noexcept;
    ///Set the value of the column APPROVAL_STEP4_BEM
    void setApprovalStep4Bem(const std::string &pApprovalStep4Bem) noexcept;
    void setApprovalStep4Bem(std::string &&pApprovalStep4Bem) noexcept;
    void setApprovalStep4BemToNull() noexcept;

    /**  For column APPROVAL_STEP5_BEM  */
    ///Get the value of the column APPROVAL_STEP5_BEM, returns the default value if the column is null
    const std::string &getValueOfApprovalStep5Bem() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApprovalStep5Bem() const noexcept;
    ///Set the value of the column APPROVAL_STEP5_BEM
    void setApprovalStep5Bem(const std::string &pApprovalStep5Bem) noexcept;
    void setApprovalStep5Bem(std::string &&pApprovalStep5Bem) noexcept;
    void setApprovalStep5BemToNull() noexcept;

    /**  For column APPROVAL_STEP1_ASSES_CD  */
    ///Get the value of the column APPROVAL_STEP1_ASSES_CD, returns the default value if the column is null
    const double &getValueOfApprovalStep1AssesCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getApprovalStep1AssesCd() const noexcept;
    ///Set the value of the column APPROVAL_STEP1_ASSES_CD
    void setApprovalStep1AssesCd(const double &pApprovalStep1AssesCd) noexcept;
    void setApprovalStep1AssesCdToNull() noexcept;

    /**  For column APPROVAL_STEP2_ASSES_CD  */
    ///Get the value of the column APPROVAL_STEP2_ASSES_CD, returns the default value if the column is null
    const double &getValueOfApprovalStep2AssesCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getApprovalStep2AssesCd() const noexcept;
    ///Set the value of the column APPROVAL_STEP2_ASSES_CD
    void setApprovalStep2AssesCd(const double &pApprovalStep2AssesCd) noexcept;
    void setApprovalStep2AssesCdToNull() noexcept;

    /**  For column APPROVAL_STEP3_ASSES_CD  */
    ///Get the value of the column APPROVAL_STEP3_ASSES_CD, returns the default value if the column is null
    const double &getValueOfApprovalStep3AssesCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getApprovalStep3AssesCd() const noexcept;
    ///Set the value of the column APPROVAL_STEP3_ASSES_CD
    void setApprovalStep3AssesCd(const double &pApprovalStep3AssesCd) noexcept;
    void setApprovalStep3AssesCdToNull() noexcept;

    /**  For column APPROVAL_STEP4_ASSES_CD  */
    ///Get the value of the column APPROVAL_STEP4_ASSES_CD, returns the default value if the column is null
    const double &getValueOfApprovalStep4AssesCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getApprovalStep4AssesCd() const noexcept;
    ///Set the value of the column APPROVAL_STEP4_ASSES_CD
    void setApprovalStep4AssesCd(const double &pApprovalStep4AssesCd) noexcept;
    void setApprovalStep4AssesCdToNull() noexcept;

    /**  For column APPROVAL_STEP5_ASSES_CD  */
    ///Get the value of the column APPROVAL_STEP5_ASSES_CD, returns the default value if the column is null
    const double &getValueOfApprovalStep5AssesCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getApprovalStep5AssesCd() const noexcept;
    ///Set the value of the column APPROVAL_STEP5_ASSES_CD
    void setApprovalStep5AssesCd(const double &pApprovalStep5AssesCd) noexcept;
    void setApprovalStep5AssesCdToNull() noexcept;

    /**  For column APPROVAL_STATUS_CD  */
    ///Get the value of the column APPROVAL_STATUS_CD, returns the default value if the column is null
    const double &getValueOfApprovalStatusCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getApprovalStatusCd() const noexcept;
    ///Set the value of the column APPROVAL_STATUS_CD
    void setApprovalStatusCd(const double &pApprovalStatusCd) noexcept;
    void setApprovalStatusCdToNull() noexcept;

    /**  For column CLIENT_STATUS_CD  */
    ///Get the value of the column CLIENT_STATUS_CD, returns the default value if the column is null
    const std::string &getValueOfClientStatusCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getClientStatusCd() const noexcept;
    ///Set the value of the column CLIENT_STATUS_CD
    void setClientStatusCd(const std::string &pClientStatusCd) noexcept;
    void setClientStatusCd(std::string &&pClientStatusCd) noexcept;
    void setClientStatusCdToNull() noexcept;

    /**  For column DISCHARGE_ORDERS_CD  */
    ///Get the value of the column DISCHARGE_ORDERS_CD, returns the default value if the column is null
    const std::string &getValueOfDischargeOrdersCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getDischargeOrdersCd() const noexcept;
    ///Set the value of the column DISCHARGE_ORDERS_CD
    void setDischargeOrdersCd(const std::string &pDischargeOrdersCd) noexcept;
    void setDischargeOrdersCd(std::string &&pDischargeOrdersCd) noexcept;
    void setDischargeOrdersCdToNull() noexcept;

    /**  For column PRINT_SUMMARY_HOLDMAIL_ONLY_CD  */
    ///Get the value of the column PRINT_SUMMARY_HOLDMAIL_ONLY_CD, returns the default value if the column is null
    const std::string &getValueOfPrintSummaryHoldmailOnlyCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPrintSummaryHoldmailOnlyCd() const noexcept;
    ///Set the value of the column PRINT_SUMMARY_HOLDMAIL_ONLY_CD
    void setPrintSummaryHoldmailOnlyCd(const std::string &pPrintSummaryHoldmailOnlyCd) noexcept;
    void setPrintSummaryHoldmailOnlyCd(std::string &&pPrintSummaryHoldmailOnlyCd) noexcept;
    void setPrintSummaryHoldmailOnlyCdToNull() noexcept;

    /**  For column EBANKING_CONTRACT_CD  */
    ///Get the value of the column EBANKING_CONTRACT_CD, returns the default value if the column is null
    const std::string &getValueOfEbankingContractCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEbankingContractCd() const noexcept;
    ///Set the value of the column EBANKING_CONTRACT_CD
    void setEbankingContractCd(const std::string &pEbankingContractCd) noexcept;
    void setEbankingContractCd(std::string &&pEbankingContractCd) noexcept;
    void setEbankingContractCdToNull() noexcept;

    /**  For column EBANKING_CONTRACT_LANGUAGE_CD  */
    ///Get the value of the column EBANKING_CONTRACT_LANGUAGE_CD, returns the default value if the column is null
    const std::string &getValueOfEbankingContractLanguageCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEbankingContractLanguageCd() const noexcept;
    ///Set the value of the column EBANKING_CONTRACT_LANGUAGE_CD
    void setEbankingContractLanguageCd(const std::string &pEbankingContractLanguageCd) noexcept;
    void setEbankingContractLanguageCd(std::string &&pEbankingContractLanguageCd) noexcept;
    void setEbankingContractLanguageCdToNull() noexcept;

    /**  For column APSYS_DTECHDIARYL  */
    ///Get the value of the column APSYS_DTECHDIARYL, returns the default value if the column is null
    const ::trantor::Date &getValueOfApsysDtechdiaryl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getApsysDtechdiaryl() const noexcept;
    ///Set the value of the column APSYS_DTECHDIARYL
    void setApsysDtechdiaryl(const ::trantor::Date &pApsysDtechdiaryl) noexcept;
    void setApsysDtechdiarylToNull() noexcept;

    /**  For column APSYS_MOTDIARYS  */
    ///Get the value of the column APSYS_MOTDIARYS, returns the default value if the column is null
    const std::string &getValueOfApsysMotdiarys() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysMotdiarys() const noexcept;
    ///Set the value of the column APSYS_MOTDIARYS
    void setApsysMotdiarys(const std::string &pApsysMotdiarys) noexcept;
    void setApsysMotdiarys(std::string &&pApsysMotdiarys) noexcept;
    void setApsysMotdiarysToNull() noexcept;

    /**  For column APSYS_IDTYPCLIIRSS  */
    ///Get the value of the column APSYS_IDTYPCLIIRSS, returns the default value if the column is null
    const std::string &getValueOfApsysIdtypcliirss() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysIdtypcliirss() const noexcept;
    ///Set the value of the column APSYS_IDTYPCLIIRSS
    void setApsysIdtypcliirss(const std::string &pApsysIdtypcliirss) noexcept;
    void setApsysIdtypcliirss(std::string &&pApsysIdtypcliirss) noexcept;
    void setApsysIdtypcliirssToNull() noexcept;

    /**  For column APSYS_IDRCIQIS  */
    ///Get the value of the column APSYS_IDRCIQIS, returns the default value if the column is null
    const std::string &getValueOfApsysIdrciqis() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysIdrciqis() const noexcept;
    ///Set the value of the column APSYS_IDRCIQIS
    void setApsysIdrciqis(const std::string &pApsysIdrciqis) noexcept;
    void setApsysIdrciqis(std::string &&pApsysIdrciqis) noexcept;
    void setApsysIdrciqisToNull() noexcept;

    /**  For column APSYS_IDRCIFATCAS  */
    ///Get the value of the column APSYS_IDRCIFATCAS, returns the default value if the column is null
    const std::string &getValueOfApsysIdrcifatcas() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysIdrcifatcas() const noexcept;
    ///Set the value of the column APSYS_IDRCIFATCAS
    void setApsysIdrcifatcas(const std::string &pApsysIdrcifatcas) noexcept;
    void setApsysIdrcifatcas(std::string &&pApsysIdrcifatcas) noexcept;
    void setApsysIdrcifatcasToNull() noexcept;

    /**  For column MAILING_TARIF_TYPE_CD  */
    ///Get the value of the column MAILING_TARIF_TYPE_CD, returns the default value if the column is null
    const double &getValueOfMailingTarifTypeCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getMailingTarifTypeCd() const noexcept;
    ///Set the value of the column MAILING_TARIF_TYPE_CD
    void setMailingTarifTypeCd(const double &pMailingTarifTypeCd) noexcept;
    void setMailingTarifTypeCdToNull() noexcept;

    /**  For column REGISTERED_CD  */
    ///Get the value of the column REGISTERED_CD, returns the default value if the column is null
    const std::string &getValueOfRegisteredCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRegisteredCd() const noexcept;
    ///Set the value of the column REGISTERED_CD
    void setRegisteredCd(const std::string &pRegisteredCd) noexcept;
    void setRegisteredCd(std::string &&pRegisteredCd) noexcept;
    void setRegisteredCdToNull() noexcept;

    /**  For column REGISTERED_MAIL_CD  */
    ///Get the value of the column REGISTERED_MAIL_CD, returns the default value if the column is null
    const std::string &getValueOfRegisteredMailCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRegisteredMailCd() const noexcept;
    ///Set the value of the column REGISTERED_MAIL_CD
    void setRegisteredMailCd(const std::string &pRegisteredMailCd) noexcept;
    void setRegisteredMailCd(std::string &&pRegisteredMailCd) noexcept;
    void setRegisteredMailCdToNull() noexcept;

    /**  For column APSYS_NBPERSCPARTIEL  */
    ///Get the value of the column APSYS_NBPERSCPARTIEL, returns the default value if the column is null
    const double &getValueOfApsysNbperscpartiel() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getApsysNbperscpartiel() const noexcept;
    ///Set the value of the column APSYS_NBPERSCPARTIEL
    void setApsysNbperscpartiel(const double &pApsysNbperscpartiel) noexcept;
    void setApsysNbperscpartielToNull() noexcept;

    /**  For column ASSET_VALUE_TIER_CD  */
    ///Get the value of the column ASSET_VALUE_TIER_CD, returns the default value if the column is null
    const std::string &getValueOfAssetValueTierCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAssetValueTierCd() const noexcept;
    ///Set the value of the column ASSET_VALUE_TIER_CD
    void setAssetValueTierCd(const std::string &pAssetValueTierCd) noexcept;
    void setAssetValueTierCd(std::string &&pAssetValueTierCd) noexcept;
    void setAssetValueTierCdToNull() noexcept;

    /**  For column RELATIONSHIP_TYPE_AML_CD  */
    ///Get the value of the column RELATIONSHIP_TYPE_AML_CD, returns the default value if the column is null
    const std::string &getValueOfRelationshipTypeAmlCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRelationshipTypeAmlCd() const noexcept;
    ///Set the value of the column RELATIONSHIP_TYPE_AML_CD
    void setRelationshipTypeAmlCd(const std::string &pRelationshipTypeAmlCd) noexcept;
    void setRelationshipTypeAmlCd(std::string &&pRelationshipTypeAmlCd) noexcept;
    void setRelationshipTypeAmlCdToNull() noexcept;

    /**  For column CB_ASSET_VALUE_TIER_CD  */
    ///Get the value of the column CB_ASSET_VALUE_TIER_CD, returns the default value if the column is null
    const std::string &getValueOfCbAssetValueTierCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getCbAssetValueTierCd() const noexcept;
    ///Set the value of the column CB_ASSET_VALUE_TIER_CD
    void setCbAssetValueTierCd(const std::string &pCbAssetValueTierCd) noexcept;
    void setCbAssetValueTierCd(std::string &&pCbAssetValueTierCd) noexcept;
    void setCbAssetValueTierCdToNull() noexcept;

    /**  For column APPROVAL_SCORE  */
    ///Get the value of the column APPROVAL_SCORE, returns the default value if the column is null
    const double &getValueOfApprovalScore() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getApprovalScore() const noexcept;
    ///Set the value of the column APPROVAL_SCORE
    void setApprovalScore(const double &pApprovalScore) noexcept;
    void setApprovalScoreToNull() noexcept;

    /**  For column APPROVAL_SCORE_STEPS  */
    ///Get the value of the column APPROVAL_SCORE_STEPS, returns the default value if the column is null
    const double &getValueOfApprovalScoreSteps() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getApprovalScoreSteps() const noexcept;
    ///Set the value of the column APPROVAL_SCORE_STEPS
    void setApprovalScoreSteps(const double &pApprovalScoreSteps) noexcept;
    void setApprovalScoreStepsToNull() noexcept;

    /**  For column APSYS_DTDEBPARTL  */
    ///Get the value of the column APSYS_DTDEBPARTL, returns the default value if the column is null
    const ::trantor::Date &getValueOfApsysDtdebpartl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getApsysDtdebpartl() const noexcept;
    ///Set the value of the column APSYS_DTDEBPARTL
    void setApsysDtdebpartl(const ::trantor::Date &pApsysDtdebpartl) noexcept;
    void setApsysDtdebpartlToNull() noexcept;

    /**  For column APSYS_DTFINPARTL  */
    ///Get the value of the column APSYS_DTFINPARTL, returns the default value if the column is null
    const ::trantor::Date &getValueOfApsysDtfinpartl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getApsysDtfinpartl() const noexcept;
    ///Set the value of the column APSYS_DTFINPARTL
    void setApsysDtfinpartl(const ::trantor::Date &pApsysDtfinpartl) noexcept;
    void setApsysDtfinpartlToNull() noexcept;

    /**  For column APSYS_CDMOTIFCLOS  */
    ///Get the value of the column APSYS_CDMOTIFCLOS, returns the default value if the column is null
    const std::string &getValueOfApsysCdmotifclos() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysCdmotifclos() const noexcept;
    ///Set the value of the column APSYS_CDMOTIFCLOS
    void setApsysCdmotifclos(const std::string &pApsysCdmotifclos) noexcept;
    void setApsysCdmotifclos(std::string &&pApsysCdmotifclos) noexcept;
    void setApsysCdmotifclosToNull() noexcept;

    /**  For column APSYS_CDNATURECPARTIEEMIRC  */
    ///Get the value of the column APSYS_CDNATURECPARTIEEMIRC, returns the default value if the column is null
    const std::string &getValueOfApsysCdnaturecpartieemirc() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysCdnaturecpartieemirc() const noexcept;
    ///Set the value of the column APSYS_CDNATURECPARTIEEMIRC
    void setApsysCdnaturecpartieemirc(const std::string &pApsysCdnaturecpartieemirc) noexcept;
    void setApsysCdnaturecpartieemirc(std::string &&pApsysCdnaturecpartieemirc) noexcept;
    void setApsysCdnaturecpartieemircToNull() noexcept;

    /**  For column APSYS_FLAGOTHEREMIRC  */
    ///Get the value of the column APSYS_FLAGOTHEREMIRC, returns the default value if the column is null
    const std::string &getValueOfApsysFlagotheremirc() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysFlagotheremirc() const noexcept;
    ///Set the value of the column APSYS_FLAGOTHEREMIRC
    void setApsysFlagotheremirc(const std::string &pApsysFlagotheremirc) noexcept;
    void setApsysFlagotheremirc(std::string &&pApsysFlagotheremirc) noexcept;
    void setApsysFlagotheremircToNull() noexcept;

    /**  For column APSYS_CDINDUSEMIRS  */
    ///Get the value of the column APSYS_CDINDUSEMIRS, returns the default value if the column is null
    const std::string &getValueOfApsysCdindusemirs() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysCdindusemirs() const noexcept;
    ///Set the value of the column APSYS_CDINDUSEMIRS
    void setApsysCdindusemirs(const std::string &pApsysCdindusemirs) noexcept;
    void setApsysCdindusemirs(std::string &&pApsysCdindusemirs) noexcept;
    void setApsysCdindusemirsToNull() noexcept;

    /**  For column OPENED_IN_APSYS_DATE  */
    ///Get the value of the column OPENED_IN_APSYS_DATE, returns the default value if the column is null
    const ::trantor::Date &getValueOfOpenedInApsysDate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getOpenedInApsysDate() const noexcept;
    ///Set the value of the column OPENED_IN_APSYS_DATE
    void setOpenedInApsysDate(const ::trantor::Date &pOpenedInApsysDate) noexcept;
    void setOpenedInApsysDateToNull() noexcept;

    /**  For column APSYS_CDNATURECPARTIEFMIAC  */
    ///Get the value of the column APSYS_CDNATURECPARTIEFMIAC, returns the default value if the column is null
    const std::string &getValueOfApsysCdnaturecpartiefmiac() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysCdnaturecpartiefmiac() const noexcept;
    ///Set the value of the column APSYS_CDNATURECPARTIEFMIAC
    void setApsysCdnaturecpartiefmiac(const std::string &pApsysCdnaturecpartiefmiac) noexcept;
    void setApsysCdnaturecpartiefmiac(std::string &&pApsysCdnaturecpartiefmiac) noexcept;
    void setApsysCdnaturecpartiefmiacToNull() noexcept;

    /**  For column EBANKING_CLOSED_CD  */
    ///Get the value of the column EBANKING_CLOSED_CD, returns the default value if the column is null
    const std::string &getValueOfEbankingClosedCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEbankingClosedCd() const noexcept;
    ///Set the value of the column EBANKING_CLOSED_CD
    void setEbankingClosedCd(const std::string &pEbankingClosedCd) noexcept;
    void setEbankingClosedCd(std::string &&pEbankingClosedCd) noexcept;
    void setEbankingClosedCdToNull() noexcept;

    /**  For column EBANKING_CLOSINGDATE  */
    ///Get the value of the column EBANKING_CLOSINGDATE, returns the default value if the column is null
    const ::trantor::Date &getValueOfEbankingClosingdate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getEbankingClosingdate() const noexcept;
    ///Set the value of the column EBANKING_CLOSINGDATE
    void setEbankingClosingdate(const ::trantor::Date &pEbankingClosingdate) noexcept;
    void setEbankingClosingdateToNull() noexcept;

    /**  For column KYC_REVIEW_PROCESS_START_DATE  */
    ///Get the value of the column KYC_REVIEW_PROCESS_START_DATE, returns the default value if the column is null
    const ::trantor::Date &getValueOfKycReviewProcessStartDate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getKycReviewProcessStartDate() const noexcept;
    ///Set the value of the column KYC_REVIEW_PROCESS_START_DATE
    void setKycReviewProcessStartDate(const ::trantor::Date &pKycReviewProcessStartDate) noexcept;
    void setKycReviewProcessStartDateToNull() noexcept;

    /**  For column REMARKS  */
    ///Get the value of the column REMARKS, returns the default value if the column is null
    const std::string &getValueOfRemarks() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRemarks() const noexcept;
    ///Set the value of the column REMARKS
    void setRemarks(const std::string &pRemarks) noexcept;
    void setRemarks(std::string &&pRemarks) noexcept;
    void setRemarksToNull() noexcept;

    /**  For column TRANSACTION_BL_COUNTRY_CD  */
    ///Get the value of the column TRANSACTION_BL_COUNTRY_CD, returns the default value if the column is null
    const double &getValueOfTransactionBlCountryCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getTransactionBlCountryCd() const noexcept;
    ///Set the value of the column TRANSACTION_BL_COUNTRY_CD
    void setTransactionBlCountryCd(const double &pTransactionBlCountryCd) noexcept;
    void setTransactionBlCountryCdToNull() noexcept;

    /**  For column CLIENTGROUP_CD  */
    ///Get the value of the column CLIENTGROUP_CD, returns the default value if the column is null
    const double &getValueOfClientgroupCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getClientgroupCd() const noexcept;
    ///Set the value of the column CLIENTGROUP_CD
    void setClientgroupCd(const double &pClientgroupCd) noexcept;
    void setClientgroupCdToNull() noexcept;

    /**  For column RISKINDEX_CALC  */
    ///Get the value of the column RISKINDEX_CALC, returns the default value if the column is null
    const double &getValueOfRiskindexCalc() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getRiskindexCalc() const noexcept;
    ///Set the value of the column RISKINDEX_CALC
    void setRiskindexCalc(const double &pRiskindexCalc) noexcept;
    void setRiskindexCalcToNull() noexcept;

    /**  For column LAST_CALC_CRI_MUTDATUM  */
    ///Get the value of the column LAST_CALC_CRI_MUTDATUM, returns the default value if the column is null
    const ::trantor::Date &getValueOfLastCalcCriMutdatum() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getLastCalcCriMutdatum() const noexcept;
    ///Set the value of the column LAST_CALC_CRI_MUTDATUM
    void setLastCalcCriMutdatum(const ::trantor::Date &pLastCalcCriMutdatum) noexcept;
    void setLastCalcCriMutdatumToNull() noexcept;

    /**  For column RISIKOKATEGORIE_CALC_CD  */
    ///Get the value of the column RISIKOKATEGORIE_CALC_CD, returns the default value if the column is null
    const std::string &getValueOfRisikokategorieCalcCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRisikokategorieCalcCd() const noexcept;
    ///Set the value of the column RISIKOKATEGORIE_CALC_CD
    void setRisikokategorieCalcCd(const std::string &pRisikokategorieCalcCd) noexcept;
    void setRisikokategorieCalcCd(std::string &&pRisikokategorieCalcCd) noexcept;
    void setRisikokategorieCalcCdToNull() noexcept;

    /**  For column RISKINDEX_GROUP  */
    ///Get the value of the column RISKINDEX_GROUP, returns the default value if the column is null
    const double &getValueOfRiskindexGroup() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getRiskindexGroup() const noexcept;
    ///Set the value of the column RISKINDEX_GROUP
    void setRiskindexGroup(const double &pRiskindexGroup) noexcept;
    void setRiskindexGroupToNull() noexcept;

    /**  For column EST_AMOUNT_REM_WITH_MUTDATUM  */
    ///Get the value of the column EST_AMOUNT_REM_WITH_MUTDATUM, returns the default value if the column is null
    const ::trantor::Date &getValueOfEstAmountRemWithMutdatum() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getEstAmountRemWithMutdatum() const noexcept;
    ///Set the value of the column EST_AMOUNT_REM_WITH_MUTDATUM
    void setEstAmountRemWithMutdatum(const ::trantor::Date &pEstAmountRemWithMutdatum) noexcept;
    void setEstAmountRemWithMutdatumToNull() noexcept;

    /**  For column GESAMTVERMOEGEN_MUTDATUM  */
    ///Get the value of the column GESAMTVERMOEGEN_MUTDATUM, returns the default value if the column is null
    const ::trantor::Date &getValueOfGesamtvermoegenMutdatum() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getGesamtvermoegenMutdatum() const noexcept;
    ///Set the value of the column GESAMTVERMOEGEN_MUTDATUM
    void setGesamtvermoegenMutdatum(const ::trantor::Date &pGesamtvermoegenMutdatum) noexcept;
    void setGesamtvermoegenMutdatumToNull() noexcept;

    /**  For column TRANSACT_BL_COUNTRY_MUTDATUM  */
    ///Get the value of the column TRANSACT_BL_COUNTRY_MUTDATUM, returns the default value if the column is null
    const ::trantor::Date &getValueOfTransactBlCountryMutdatum() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getTransactBlCountryMutdatum() const noexcept;
    ///Set the value of the column TRANSACT_BL_COUNTRY_MUTDATUM
    void setTransactBlCountryMutdatum(const ::trantor::Date &pTransactBlCountryMutdatum) noexcept;
    void setTransactBlCountryMutdatumToNull() noexcept;

    /**  For column ACCOUNTPURPOSE_MUTDATUM  */
    ///Get the value of the column ACCOUNTPURPOSE_MUTDATUM, returns the default value if the column is null
    const ::trantor::Date &getValueOfAccountpurposeMutdatum() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getAccountpurposeMutdatum() const noexcept;
    ///Set the value of the column ACCOUNTPURPOSE_MUTDATUM
    void setAccountpurposeMutdatum(const ::trantor::Date &pAccountpurposeMutdatum) noexcept;
    void setAccountpurposeMutdatumToNull() noexcept;

    /**  For column APSYS_FLAGDELDATAPERSI  */
    ///Get the value of the column APSYS_FLAGDELDATAPERSI, returns the default value if the column is null
    const std::string &getValueOfApsysFlagdeldatapersi() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysFlagdeldatapersi() const noexcept;
    ///Set the value of the column APSYS_FLAGDELDATAPERSI
    void setApsysFlagdeldatapersi(const std::string &pApsysFlagdeldatapersi) noexcept;
    void setApsysFlagdeldatapersi(std::string &&pApsysFlagdeldatapersi) noexcept;
    void setApsysFlagdeldatapersiToNull() noexcept;

    /**  For column APSYS_DTWAITDELDATAPERSL  */
    ///Get the value of the column APSYS_DTWAITDELDATAPERSL, returns the default value if the column is null
    const ::trantor::Date &getValueOfApsysDtwaitdeldatapersl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getApsysDtwaitdeldatapersl() const noexcept;
    ///Set the value of the column APSYS_DTWAITDELDATAPERSL
    void setApsysDtwaitdeldatapersl(const ::trantor::Date &pApsysDtwaitdeldatapersl) noexcept;
    void setApsysDtwaitdeldataperslToNull() noexcept;

    /**  For column NAME_ENC  */
    ///Get the value of the column NAME_ENC, returns the default value if the column is null
    const std::string &getValueOfNameEnc() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getNameEnc() const noexcept;
    ///Set the value of the column NAME_ENC
    void setNameEnc(const std::string &pNameEnc) noexcept;
    void setNameEnc(std::string &&pNameEnc) noexcept;
    void setNameEncToNull() noexcept;

    /**  For column IN_APSYS_TEMP_ENTSPERREN_CD  */
    ///Get the value of the column IN_APSYS_TEMP_ENTSPERREN_CD, returns the default value if the column is null
    const std::string &getValueOfInApsysTempEntsperrenCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getInApsysTempEntsperrenCd() const noexcept;
    ///Set the value of the column IN_APSYS_TEMP_ENTSPERREN_CD
    void setInApsysTempEntsperrenCd(const std::string &pInApsysTempEntsperrenCd) noexcept;
    void setInApsysTempEntsperrenCd(std::string &&pInApsysTempEntsperrenCd) noexcept;
    void setInApsysTempEntsperrenCdToNull() noexcept;

    /**  For column IN_APSYS_TEMP_ENTSP_USERID  */
    ///Get the value of the column IN_APSYS_TEMP_ENTSP_USERID, returns the default value if the column is null
    const std::string &getValueOfInApsysTempEntspUserid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getInApsysTempEntspUserid() const noexcept;
    ///Set the value of the column IN_APSYS_TEMP_ENTSP_USERID
    void setInApsysTempEntspUserid(const std::string &pInApsysTempEntspUserid) noexcept;
    void setInApsysTempEntspUserid(std::string &&pInApsysTempEntspUserid) noexcept;
    void setInApsysTempEntspUseridToNull() noexcept;

    /**  For column IN_APSYS_TEMP_ENTSP_DATUM  */
    ///Get the value of the column IN_APSYS_TEMP_ENTSP_DATUM, returns the default value if the column is null
    const ::trantor::Date &getValueOfInApsysTempEntspDatum() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getInApsysTempEntspDatum() const noexcept;
    ///Set the value of the column IN_APSYS_TEMP_ENTSP_DATUM
    void setInApsysTempEntspDatum(const ::trantor::Date &pInApsysTempEntspDatum) noexcept;
    void setInApsysTempEntspDatumToNull() noexcept;

    /**  For column APSYS_CDREGS  */
    ///Get the value of the column APSYS_CDREGS, returns the default value if the column is null
    const std::string &getValueOfApsysCdregs() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getApsysCdregs() const noexcept;
    ///Set the value of the column APSYS_CDREGS
    void setApsysCdregs(const std::string &pApsysCdregs) noexcept;
    void setApsysCdregs(std::string &&pApsysCdregs) noexcept;
    void setApsysCdregsToNull() noexcept;

    /**  For column RETENTION_ON_HOLD  */
    ///Get the value of the column RETENTION_ON_HOLD, returns the default value if the column is null
    const std::string &getValueOfRetentionOnHold() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRetentionOnHold() const noexcept;
    ///Set the value of the column RETENTION_ON_HOLD
    void setRetentionOnHold(const std::string &pRetentionOnHold) noexcept;
    void setRetentionOnHold(std::string &&pRetentionOnHold) noexcept;
    void setRetentionOnHoldToNull() noexcept;

    /**  For column RETENTION_ON_HOLD_DATE  */
    ///Get the value of the column RETENTION_ON_HOLD_DATE, returns the default value if the column is null
    const ::trantor::Date &getValueOfRetentionOnHoldDate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getRetentionOnHoldDate() const noexcept;
    ///Set the value of the column RETENTION_ON_HOLD_DATE
    void setRetentionOnHoldDate(const ::trantor::Date &pRetentionOnHoldDate) noexcept;
    void setRetentionOnHoldDateToNull() noexcept;

    /**  For column RETENTION_ON_HOLD_REASON  */
    ///Get the value of the column RETENTION_ON_HOLD_REASON, returns the default value if the column is null
    const std::string &getValueOfRetentionOnHoldReason() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRetentionOnHoldReason() const noexcept;
    ///Set the value of the column RETENTION_ON_HOLD_REASON
    void setRetentionOnHoldReason(const std::string &pRetentionOnHoldReason) noexcept;
    void setRetentionOnHoldReason(std::string &&pRetentionOnHoldReason) noexcept;
    void setRetentionOnHoldReasonToNull() noexcept;

    /**  For column LOGICAL_ERASURE  */
    ///Get the value of the column LOGICAL_ERASURE, returns the default value if the column is null
    const std::string &getValueOfLogicalErasure() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLogicalErasure() const noexcept;
    ///Set the value of the column LOGICAL_ERASURE
    void setLogicalErasure(const std::string &pLogicalErasure) noexcept;
    void setLogicalErasure(std::string &&pLogicalErasure) noexcept;
    void setLogicalErasureToNull() noexcept;

    /**  For column LOGICAL_ERASURE_DATE  */
    ///Get the value of the column LOGICAL_ERASURE_DATE, returns the default value if the column is null
    const ::trantor::Date &getValueOfLogicalErasureDate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getLogicalErasureDate() const noexcept;
    ///Set the value of the column LOGICAL_ERASURE_DATE
    void setLogicalErasureDate(const ::trantor::Date &pLogicalErasureDate) noexcept;
    void setLogicalErasureDateToNull() noexcept;

    /**  For column LOGICAL_ERASURE_REASON  */
    ///Get the value of the column LOGICAL_ERASURE_REASON, returns the default value if the column is null
    const std::string &getValueOfLogicalErasureReason() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLogicalErasureReason() const noexcept;
    ///Set the value of the column LOGICAL_ERASURE_REASON
    void setLogicalErasureReason(const std::string &pLogicalErasureReason) noexcept;
    void setLogicalErasureReason(std::string &&pLogicalErasureReason) noexcept;
    void setLogicalErasureReasonToNull() noexcept;

    /**  For column COMPLIANCE_MIN_RISK_CATEGORY  */
    ///Get the value of the column COMPLIANCE_MIN_RISK_CATEGORY, returns the default value if the column is null
    const std::string &getValueOfComplianceMinRiskCategory() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getComplianceMinRiskCategory() const noexcept;
    ///Set the value of the column COMPLIANCE_MIN_RISK_CATEGORY
    void setComplianceMinRiskCategory(const std::string &pComplianceMinRiskCategory) noexcept;
    void setComplianceMinRiskCategory(std::string &&pComplianceMinRiskCategory) noexcept;
    void setComplianceMinRiskCategoryToNull() noexcept;

    /**  For column COMPLIANCE_MIN_RISK_COMMENT  */
    ///Get the value of the column COMPLIANCE_MIN_RISK_COMMENT, returns the default value if the column is null
    const std::string &getValueOfComplianceMinRiskComment() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getComplianceMinRiskComment() const noexcept;
    ///Set the value of the column COMPLIANCE_MIN_RISK_COMMENT
    void setComplianceMinRiskComment(const std::string &pComplianceMinRiskComment) noexcept;
    void setComplianceMinRiskComment(std::string &&pComplianceMinRiskComment) noexcept;
    void setComplianceMinRiskCommentToNull() noexcept;

    /**  For column CLIENT_STRUCTURE_CD  */
    ///Get the value of the column CLIENT_STRUCTURE_CD, returns the default value if the column is null
    const std::string &getValueOfClientStructureCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getClientStructureCd() const noexcept;
    ///Set the value of the column CLIENT_STRUCTURE_CD
    void setClientStructureCd(const std::string &pClientStructureCd) noexcept;
    void setClientStructureCd(std::string &&pClientStructureCd) noexcept;
    void setClientStructureCdToNull() noexcept;

    /**  For column CLIENT_SUBSTRUCTURE_CD  */
    ///Get the value of the column CLIENT_SUBSTRUCTURE_CD, returns the default value if the column is null
    const std::string &getValueOfClientSubstructureCd() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getClientSubstructureCd() const noexcept;
    ///Set the value of the column CLIENT_SUBSTRUCTURE_CD
    void setClientSubstructureCd(const std::string &pClientSubstructureCd) noexcept;
    void setClientSubstructureCd(std::string &&pClientSubstructureCd) noexcept;
    void setClientSubstructureCdToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 195;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Kunde>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Kunde>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<double> kundenid_;
    std::shared_ptr<std::string> bezeichnung_;
    std::shared_ptr<::trantor::Date> kundeseit_;
    std::shared_ptr<std::string> vertragsparteiCd_;
    std::shared_ptr<std::string> loeschCd_;
    std::shared_ptr<::trantor::Date> loeschdatum_;
    std::shared_ptr<::trantor::Date> crtdatum_;
    std::shared_ptr<std::string> crtuser_;
    std::shared_ptr<::trantor::Date> mutdatum_;
    std::shared_ptr<std::string> mutuser_;
    std::shared_ptr<std::string> pseudoaccountCd_;
    std::shared_ptr<::trantor::Date> kundebesuch_;
    std::shared_ptr<std::string> bezeichnungvertrag_;
    std::shared_ptr<std::string> pseudonym_;
    std::shared_ptr<std::string> rechtsdomizilCd_;
    std::shared_ptr<std::string> korrespondenzsprachCd_;
    std::shared_ptr<std::string> mitProfilCd_;
    std::shared_ptr<std::string> gemeinschaftskontoCd_;
    std::shared_ptr<std::string> pin_;
    std::shared_ptr<std::string> verwendungszweck_;
    std::shared_ptr<std::string> identifikationsartCd_;
    std::shared_ptr<std::string> vermoegensursprungCd_;
    std::shared_ptr<std::string> vermoegensursprung_;
    std::shared_ptr<std::string> geldvonkonto_;
    std::shared_ptr<std::string> bisherigebetreuung_;
    std::shared_ptr<::trantor::Date> bisherigebetreuungseit_;
    std::shared_ptr<std::string> manualopenCd_;
    std::shared_ptr<std::string> einVermoegenCd_;
    std::shared_ptr<std::string> regionzahlungCd_;
    std::shared_ptr<std::string> einVermoegenartCd_;
    std::shared_ptr<std::string> spezWuenscheCd_;
    std::shared_ptr<std::string> managerCd_;
    std::shared_ptr<double> riskindex_;
    std::shared_ptr<::trantor::Date> riskindexGueltiseit_;
    std::shared_ptr<::trantor::Date> riskindexLetzteberechnung_;
    std::shared_ptr<std::string> kontoeroeffnungsartCd_;
    std::shared_ptr<std::string> riskindexberechnenCd_;
    std::shared_ptr<std::string> kundennaturCd_;
    std::shared_ptr<std::string> risikokategorieCd_;
    std::shared_ptr<std::string> pepCd_;
    std::shared_ptr<std::string> spezialkategorieCd_;
    std::shared_ptr<std::string> natureCd_;
    std::shared_ptr<std::string> name_;
    std::shared_ptr<std::string> ledigername_;
    std::shared_ptr<std::string> vorname_;
    std::shared_ptr<std::string> cdpartc_;
    std::shared_ptr<std::string> nationalitaetCd_;
    std::shared_ptr<std::string> risikolandCd_;
    std::shared_ptr<std::string> persoenlichbekanntCd_;
    std::shared_ptr<std::string> risikotaetigkeitCd_;
    std::shared_ptr<std::string> steuerdomizilCd_;
    std::shared_ptr<std::string> euTaxstatusCd_;
    std::shared_ptr<std::string> tin_;
    std::shared_ptr<std::string> apsysCdrolpersi_;
    std::shared_ptr<std::string> vertragsprachCd_;
    std::shared_ptr<std::string> vermoegenskategorieIhagCd_;
    std::shared_ptr<std::string> apsysIntishs_;
    std::shared_ptr<std::string> apsysIntilgs_;
    std::shared_ptr<double> gesamtvermoegenCd_;
    std::shared_ptr<std::string> complianceOkCd_;
    std::shared_ptr<std::string> complianceOkBemerkung_;
    std::shared_ptr<::trantor::Date> complianceOkDatum_;
    std::shared_ptr<std::string> complianceOkUserid_;
    std::shared_ptr<double> einVermoegen_;
    std::shared_ptr<double> segmentierungCd_;
    std::shared_ptr<double> aktid_;
    std::shared_ptr<double> validid_;
    std::shared_ptr<std::string> validCd_;
    std::shared_ptr<std::string> validuser_;
    std::shared_ptr<std::string> encSalt_;
    std::shared_ptr<std::string> bezeichnungEnc_;
    std::shared_ptr<std::string> apsysCdmotifparts_;
    std::shared_ptr<std::string> apsysCdindus0s_;
    std::shared_ptr<std::string> apsysFlagpreavisexec_;
    std::shared_ptr<std::string> apsysCdaviobispecc_;
    std::shared_ptr<std::string> apsysFlaghisperc_;
    std::shared_ptr<std::string> apsysRepamanuc_;
    std::shared_ptr<std::string> apsysPerdevcalc_;
    std::shared_ptr<std::string> apsysFlaguktaxc_;
    std::shared_ptr<std::string> apsysCdnogas_;
    std::shared_ptr<std::string> apsysStatfiscc_;
    std::shared_ptr<std::string> apsysFlagfwti_;
    std::shared_ptr<std::string> apsysFlagfwtuknrsdi_;
    std::shared_ptr<std::string> apsysFlagfwttaxspegei_;
    std::shared_ptr<std::string> apsysCdfwtoptregulfiscancc_;
    std::shared_ptr<std::string> apsysCdfwtstatregulfiscancc_;
    std::shared_ptr<std::string> apsysCdfwtoptregulfiscfutc_;
    std::shared_ptr<std::string> steuerlandAbgstCd_;
    std::shared_ptr<std::string> apsysCdnatures_;
    std::shared_ptr<std::string> apsysShnas_;
    std::shared_ptr<std::string> apsysCdpyhqdomis_;
    std::shared_ptr<double> apsysCdpermi_;
    std::shared_ptr<std::string> apsysIdrcis_;
    std::shared_ptr<std::string> apsysFlagisttc_;
    std::shared_ptr<std::string> apsysDevevals_;
    std::shared_ptr<std::string> apsysIdstrucs_;
    std::shared_ptr<std::string> apsysSuiviagts_;
    std::shared_ptr<std::string> apsysCdinduscssfs_;
    std::shared_ptr<std::string> apsysCdindusbluxs_;
    std::shared_ptr<std::string> apsysCdindussbuba_;
    std::shared_ptr<std::string> apsysCdindussbns_;
    std::shared_ptr<std::string> apsysGrmtevals_;
    std::shared_ptr<std::string> apsysIdpocs_;
    std::shared_ptr<std::string> apsysInfo_;
    std::shared_ptr<std::string> apsysIdents_;
    std::shared_ptr<std::string> apsysStatusOpec_;
    std::shared_ptr<double> apsysErri_;
    std::shared_ptr<std::string> nationalitaet2Cd_;
    std::shared_ptr<std::string> nationalitaet3Cd_;
    std::shared_ptr<std::string> vermoegensursprung2Cd_;
    std::shared_ptr<std::string> vermoegensursprung2_;
    std::shared_ptr<std::string> approvalStep1Cd_;
    std::shared_ptr<std::string> approvalStep1User_;
    std::shared_ptr<::trantor::Date> approvalStep1Date_;
    std::shared_ptr<std::string> approvalStep2Cd_;
    std::shared_ptr<std::string> approvalStep2User_;
    std::shared_ptr<::trantor::Date> approvalStep2Date_;
    std::shared_ptr<std::string> approvalStep3Cd_;
    std::shared_ptr<std::string> approvalStep3User_;
    std::shared_ptr<::trantor::Date> approvalStep3Date_;
    std::shared_ptr<std::string> approvalStep4Cd_;
    std::shared_ptr<std::string> approvalStep4User_;
    std::shared_ptr<::trantor::Date> approvalStep4Date_;
    std::shared_ptr<std::string> approvalStep5Cd_;
    std::shared_ptr<std::string> approvalStep5User_;
    std::shared_ptr<::trantor::Date> approvalStep5Date_;
    std::shared_ptr<std::string> approvalStep1Bem_;
    std::shared_ptr<std::string> approvalStep2Bem_;
    std::shared_ptr<std::string> approvalStep3Bem_;
    std::shared_ptr<std::string> approvalStep4Bem_;
    std::shared_ptr<std::string> approvalStep5Bem_;
    std::shared_ptr<double> approvalStep1AssesCd_;
    std::shared_ptr<double> approvalStep2AssesCd_;
    std::shared_ptr<double> approvalStep3AssesCd_;
    std::shared_ptr<double> approvalStep4AssesCd_;
    std::shared_ptr<double> approvalStep5AssesCd_;
    std::shared_ptr<double> approvalStatusCd_;
    std::shared_ptr<std::string> clientStatusCd_;
    std::shared_ptr<std::string> dischargeOrdersCd_;
    std::shared_ptr<std::string> printSummaryHoldmailOnlyCd_;
    std::shared_ptr<std::string> ebankingContractCd_;
    std::shared_ptr<std::string> ebankingContractLanguageCd_;
    std::shared_ptr<::trantor::Date> apsysDtechdiaryl_;
    std::shared_ptr<std::string> apsysMotdiarys_;
    std::shared_ptr<std::string> apsysIdtypcliirss_;
    std::shared_ptr<std::string> apsysIdrciqis_;
    std::shared_ptr<std::string> apsysIdrcifatcas_;
    std::shared_ptr<double> mailingTarifTypeCd_;
    std::shared_ptr<std::string> registeredCd_;
    std::shared_ptr<std::string> registeredMailCd_;
    std::shared_ptr<double> apsysNbperscpartiel_;
    std::shared_ptr<std::string> assetValueTierCd_;
    std::shared_ptr<std::string> relationshipTypeAmlCd_;
    std::shared_ptr<std::string> cbAssetValueTierCd_;
    std::shared_ptr<double> approvalScore_;
    std::shared_ptr<double> approvalScoreSteps_;
    std::shared_ptr<::trantor::Date> apsysDtdebpartl_;
    std::shared_ptr<::trantor::Date> apsysDtfinpartl_;
    std::shared_ptr<std::string> apsysCdmotifclos_;
    std::shared_ptr<std::string> apsysCdnaturecpartieemirc_;
    std::shared_ptr<std::string> apsysFlagotheremirc_;
    std::shared_ptr<std::string> apsysCdindusemirs_;
    std::shared_ptr<::trantor::Date> openedInApsysDate_;
    std::shared_ptr<std::string> apsysCdnaturecpartiefmiac_;
    std::shared_ptr<std::string> ebankingClosedCd_;
    std::shared_ptr<::trantor::Date> ebankingClosingdate_;
    std::shared_ptr<::trantor::Date> kycReviewProcessStartDate_;
    std::shared_ptr<std::string> remarks_;
    std::shared_ptr<double> transactionBlCountryCd_;
    std::shared_ptr<double> clientgroupCd_;
    std::shared_ptr<double> riskindexCalc_;
    std::shared_ptr<::trantor::Date> lastCalcCriMutdatum_;
    std::shared_ptr<std::string> risikokategorieCalcCd_;
    std::shared_ptr<double> riskindexGroup_;
    std::shared_ptr<::trantor::Date> estAmountRemWithMutdatum_;
    std::shared_ptr<::trantor::Date> gesamtvermoegenMutdatum_;
    std::shared_ptr<::trantor::Date> transactBlCountryMutdatum_;
    std::shared_ptr<::trantor::Date> accountpurposeMutdatum_;
    std::shared_ptr<std::string> apsysFlagdeldatapersi_;
    std::shared_ptr<::trantor::Date> apsysDtwaitdeldatapersl_;
    std::shared_ptr<std::string> nameEnc_;
    std::shared_ptr<std::string> inApsysTempEntsperrenCd_;
    std::shared_ptr<std::string> inApsysTempEntspUserid_;
    std::shared_ptr<::trantor::Date> inApsysTempEntspDatum_;
    std::shared_ptr<std::string> apsysCdregs_;
    std::shared_ptr<std::string> retentionOnHold_;
    std::shared_ptr<::trantor::Date> retentionOnHoldDate_;
    std::shared_ptr<std::string> retentionOnHoldReason_;
    std::shared_ptr<std::string> logicalErasure_;
    std::shared_ptr<::trantor::Date> logicalErasureDate_;
    std::shared_ptr<std::string> logicalErasureReason_;
    std::shared_ptr<std::string> complianceMinRiskCategory_;
    std::shared_ptr<std::string> complianceMinRiskComment_;
    std::shared_ptr<std::string> clientStructureCd_;
    std::shared_ptr<std::string> clientSubstructureCd_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[195]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where KUNDENID = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where KUNDENID = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[0])
        {
            sql += "KUNDENID,";
            ++parametersCount;
        }
        if(dirtyFlag_[1])
        {
            sql += "BEZEICHNUNG,";
            ++parametersCount;
        }
        sql += "KUNDESEIT,";
        ++parametersCount;
        if(!dirtyFlag_[2])
        {
            needSelection=true;
        }
        if(dirtyFlag_[3])
        {
            sql += "VERTRAGSPARTEI_CD,";
            ++parametersCount;
        }
        sql += "LOESCH_CD,";
        ++parametersCount;
        if(!dirtyFlag_[4])
        {
            needSelection=true;
        }
        if(dirtyFlag_[5])
        {
            sql += "LOESCHDATUM,";
            ++parametersCount;
        }
        sql += "CRTDATUM,";
        ++parametersCount;
        if(!dirtyFlag_[6])
        {
            needSelection=true;
        }
        sql += "CRTUSER,";
        ++parametersCount;
        if(!dirtyFlag_[7])
        {
            needSelection=true;
        }
        if(dirtyFlag_[8])
        {
            sql += "MUTDATUM,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "MUTUSER,";
            ++parametersCount;
        }
        sql += "PSEUDOACCOUNT_CD,";
        ++parametersCount;
        if(!dirtyFlag_[10])
        {
            needSelection=true;
        }
        if(dirtyFlag_[11])
        {
            sql += "KUNDEBESUCH,";
            ++parametersCount;
        }
        if(dirtyFlag_[12])
        {
            sql += "BEZEICHNUNGVERTRAG,";
            ++parametersCount;
        }
        if(dirtyFlag_[13])
        {
            sql += "PSEUDONYM,";
            ++parametersCount;
        }
        if(dirtyFlag_[14])
        {
            sql += "RECHTSDOMIZIL_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[15])
        {
            sql += "KORRESPONDENZSPRACH_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[16])
        {
            sql += "MIT_PROFIL_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[17])
        {
            sql += "GEMEINSCHAFTSKONTO_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[18])
        {
            sql += "PIN,";
            ++parametersCount;
        }
        if(dirtyFlag_[19])
        {
            sql += "VERWENDUNGSZWECK,";
            ++parametersCount;
        }
        if(dirtyFlag_[20])
        {
            sql += "IDENTIFIKATIONSART_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[21])
        {
            sql += "VERMOEGENSURSPRUNG_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[22])
        {
            sql += "VERMOEGENSURSPRUNG,";
            ++parametersCount;
        }
        if(dirtyFlag_[23])
        {
            sql += "GELDVONKONTO,";
            ++parametersCount;
        }
        if(dirtyFlag_[24])
        {
            sql += "BISHERIGEBETREUUNG,";
            ++parametersCount;
        }
        if(dirtyFlag_[25])
        {
            sql += "BISHERIGEBETREUUNGSEIT,";
            ++parametersCount;
        }
        sql += "MANUALOPEN_CD,";
        ++parametersCount;
        if(!dirtyFlag_[26])
        {
            needSelection=true;
        }
        if(dirtyFlag_[27])
        {
            sql += "EIN_VERMOEGEN_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[28])
        {
            sql += "REGIONZAHLUNG_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[29])
        {
            sql += "EIN_VERMOEGENART_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[30])
        {
            sql += "SPEZ_WUENSCHE_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[31])
        {
            sql += "MANAGER_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[32])
        {
            sql += "RISKINDEX,";
            ++parametersCount;
        }
        if(dirtyFlag_[33])
        {
            sql += "RISKINDEX_GUELTISEIT,";
            ++parametersCount;
        }
        if(dirtyFlag_[34])
        {
            sql += "RISKINDEX_LETZTEBERECHNUNG,";
            ++parametersCount;
        }
        if(dirtyFlag_[35])
        {
            sql += "KONTOEROEFFNUNGSART_CD,";
            ++parametersCount;
        }
        sql += "RISKINDEXBERECHNEN_CD,";
        ++parametersCount;
        if(!dirtyFlag_[36])
        {
            needSelection=true;
        }
        if(dirtyFlag_[37])
        {
            sql += "KUNDENNATUR_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[38])
        {
            sql += "RISIKOKATEGORIE_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[39])
        {
            sql += "PEP_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[40])
        {
            sql += "SPEZIALKATEGORIE_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[41])
        {
            sql += "NATURE_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[42])
        {
            sql += "NAME,";
            ++parametersCount;
        }
        if(dirtyFlag_[43])
        {
            sql += "LEDIGERNAME,";
            ++parametersCount;
        }
        if(dirtyFlag_[44])
        {
            sql += "VORNAME,";
            ++parametersCount;
        }
        if(dirtyFlag_[45])
        {
            sql += "CDPARTC,";
            ++parametersCount;
        }
        if(dirtyFlag_[46])
        {
            sql += "NATIONALITAET_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[47])
        {
            sql += "RISIKOLAND_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[48])
        {
            sql += "PERSOENLICHBEKANNT_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[49])
        {
            sql += "RISIKOTAETIGKEIT_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[50])
        {
            sql += "STEUERDOMIZIL_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[51])
        {
            sql += "EU_TAXSTATUS_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[52])
        {
            sql += "TIN,";
            ++parametersCount;
        }
        if(dirtyFlag_[53])
        {
            sql += "APSYS_CDROLPERSI,";
            ++parametersCount;
        }
        if(dirtyFlag_[54])
        {
            sql += "VERTRAGSPRACH_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[55])
        {
            sql += "VERMOEGENSKATEGORIE_IHAG_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[56])
        {
            sql += "APSYS_INTISHS,";
            ++parametersCount;
        }
        if(dirtyFlag_[57])
        {
            sql += "APSYS_INTILGS,";
            ++parametersCount;
        }
        if(dirtyFlag_[58])
        {
            sql += "GESAMTVERMOEGEN_CD,";
            ++parametersCount;
        }
        sql += "COMPLIANCE_OK_CD,";
        ++parametersCount;
        if(!dirtyFlag_[59])
        {
            needSelection=true;
        }
        if(dirtyFlag_[60])
        {
            sql += "COMPLIANCE_OK_BEMERKUNG,";
            ++parametersCount;
        }
        if(dirtyFlag_[61])
        {
            sql += "COMPLIANCE_OK_DATUM,";
            ++parametersCount;
        }
        if(dirtyFlag_[62])
        {
            sql += "COMPLIANCE_OK_USERID,";
            ++parametersCount;
        }
        if(dirtyFlag_[63])
        {
            sql += "EIN_VERMOEGEN,";
            ++parametersCount;
        }
        if(dirtyFlag_[64])
        {
            sql += "SEGMENTIERUNG_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[65])
        {
            sql += "AKTID,";
            ++parametersCount;
        }
        if(dirtyFlag_[66])
        {
            sql += "VALIDID,";
            ++parametersCount;
        }
        sql += "VALID_CD,";
        ++parametersCount;
        if(!dirtyFlag_[67])
        {
            needSelection=true;
        }
        if(dirtyFlag_[68])
        {
            sql += "VALIDUSER,";
            ++parametersCount;
        }
        if(dirtyFlag_[69])
        {
            sql += "ENC_SALT,";
            ++parametersCount;
        }
        if(dirtyFlag_[70])
        {
            sql += "BEZEICHNUNG_ENC,";
            ++parametersCount;
        }
        if(dirtyFlag_[71])
        {
            sql += "APSYS_CDMOTIFPARTS,";
            ++parametersCount;
        }
        if(dirtyFlag_[72])
        {
            sql += "APSYS_CDINDUS0S,";
            ++parametersCount;
        }
        if(dirtyFlag_[73])
        {
            sql += "APSYS_FLAGPREAVISEXEC,";
            ++parametersCount;
        }
        if(dirtyFlag_[74])
        {
            sql += "APSYS_CDAVIOBISPECC,";
            ++parametersCount;
        }
        if(dirtyFlag_[75])
        {
            sql += "APSYS_FLAGHISPERC,";
            ++parametersCount;
        }
        if(dirtyFlag_[76])
        {
            sql += "APSYS_REPAMANUC,";
            ++parametersCount;
        }
        if(dirtyFlag_[77])
        {
            sql += "APSYS_PERDEVCALC,";
            ++parametersCount;
        }
        if(dirtyFlag_[78])
        {
            sql += "APSYS_FLAGUKTAXC,";
            ++parametersCount;
        }
        if(dirtyFlag_[79])
        {
            sql += "APSYS_CDNOGAS,";
            ++parametersCount;
        }
        if(dirtyFlag_[80])
        {
            sql += "APSYS_STATFISCC,";
            ++parametersCount;
        }
        sql += "APSYS_FLAGFWTI,";
        ++parametersCount;
        if(!dirtyFlag_[81])
        {
            needSelection=true;
        }
        sql += "APSYS_FLAGFWTUKNRSDI,";
        ++parametersCount;
        if(!dirtyFlag_[82])
        {
            needSelection=true;
        }
        sql += "APSYS_FLAGFWTTAXSPEGEI,";
        ++parametersCount;
        if(!dirtyFlag_[83])
        {
            needSelection=true;
        }
        if(dirtyFlag_[84])
        {
            sql += "APSYS_CDFWTOPTREGULFISCANCC,";
            ++parametersCount;
        }
        if(dirtyFlag_[85])
        {
            sql += "APSYS_CDFWTSTATREGULFISCANCC,";
            ++parametersCount;
        }
        if(dirtyFlag_[86])
        {
            sql += "APSYS_CDFWTOPTREGULFISCFUTC,";
            ++parametersCount;
        }
        if(dirtyFlag_[87])
        {
            sql += "STEUERLAND_ABGST_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[88])
        {
            sql += "APSYS_CDNATURES,";
            ++parametersCount;
        }
        if(dirtyFlag_[89])
        {
            sql += "APSYS_SHNAS,";
            ++parametersCount;
        }
        if(dirtyFlag_[90])
        {
            sql += "APSYS_CDPYHQDOMIS,";
            ++parametersCount;
        }
        if(dirtyFlag_[91])
        {
            sql += "APSYS_CDPERMI,";
            ++parametersCount;
        }
        if(dirtyFlag_[92])
        {
            sql += "APSYS_IDRCIS,";
            ++parametersCount;
        }
        if(dirtyFlag_[93])
        {
            sql += "APSYS_FLAGISTTC,";
            ++parametersCount;
        }
        if(dirtyFlag_[94])
        {
            sql += "APSYS_DEVEVALS,";
            ++parametersCount;
        }
        if(dirtyFlag_[95])
        {
            sql += "APSYS_IDSTRUCS,";
            ++parametersCount;
        }
        if(dirtyFlag_[96])
        {
            sql += "APSYS_SUIVIAGTS,";
            ++parametersCount;
        }
        if(dirtyFlag_[97])
        {
            sql += "APSYS_CDINDUSCSSFS,";
            ++parametersCount;
        }
        if(dirtyFlag_[98])
        {
            sql += "APSYS_CDINDUSBLUXS,";
            ++parametersCount;
        }
        if(dirtyFlag_[99])
        {
            sql += "APSYS_CDINDUSSBUBA,";
            ++parametersCount;
        }
        if(dirtyFlag_[100])
        {
            sql += "APSYS_CDINDUSSBNS,";
            ++parametersCount;
        }
        if(dirtyFlag_[101])
        {
            sql += "APSYS_GRMTEVALS,";
            ++parametersCount;
        }
        if(dirtyFlag_[102])
        {
            sql += "APSYS_IDPOCS,";
            ++parametersCount;
        }
        if(dirtyFlag_[103])
        {
            sql += "APSYS_INFO,";
            ++parametersCount;
        }
        if(dirtyFlag_[104])
        {
            sql += "APSYS_IDENTS,";
            ++parametersCount;
        }
        if(dirtyFlag_[105])
        {
            sql += "APSYS_STATUS_OPEC,";
            ++parametersCount;
        }
        if(dirtyFlag_[106])
        {
            sql += "APSYS_ERRI,";
            ++parametersCount;
        }
        if(dirtyFlag_[107])
        {
            sql += "NATIONALITAET2_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[108])
        {
            sql += "NATIONALITAET3_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[109])
        {
            sql += "VERMOEGENSURSPRUNG2_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[110])
        {
            sql += "VERMOEGENSURSPRUNG2,";
            ++parametersCount;
        }
        if(dirtyFlag_[111])
        {
            sql += "APPROVAL_STEP1_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[112])
        {
            sql += "APPROVAL_STEP1_USER,";
            ++parametersCount;
        }
        if(dirtyFlag_[113])
        {
            sql += "APPROVAL_STEP1_DATE,";
            ++parametersCount;
        }
        if(dirtyFlag_[114])
        {
            sql += "APPROVAL_STEP2_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[115])
        {
            sql += "APPROVAL_STEP2_USER,";
            ++parametersCount;
        }
        if(dirtyFlag_[116])
        {
            sql += "APPROVAL_STEP2_DATE,";
            ++parametersCount;
        }
        if(dirtyFlag_[117])
        {
            sql += "APPROVAL_STEP3_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[118])
        {
            sql += "APPROVAL_STEP3_USER,";
            ++parametersCount;
        }
        if(dirtyFlag_[119])
        {
            sql += "APPROVAL_STEP3_DATE,";
            ++parametersCount;
        }
        if(dirtyFlag_[120])
        {
            sql += "APPROVAL_STEP4_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[121])
        {
            sql += "APPROVAL_STEP4_USER,";
            ++parametersCount;
        }
        if(dirtyFlag_[122])
        {
            sql += "APPROVAL_STEP4_DATE,";
            ++parametersCount;
        }
        if(dirtyFlag_[123])
        {
            sql += "APPROVAL_STEP5_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[124])
        {
            sql += "APPROVAL_STEP5_USER,";
            ++parametersCount;
        }
        if(dirtyFlag_[125])
        {
            sql += "APPROVAL_STEP5_DATE,";
            ++parametersCount;
        }
        if(dirtyFlag_[126])
        {
            sql += "APPROVAL_STEP1_BEM,";
            ++parametersCount;
        }
        if(dirtyFlag_[127])
        {
            sql += "APPROVAL_STEP2_BEM,";
            ++parametersCount;
        }
        if(dirtyFlag_[128])
        {
            sql += "APPROVAL_STEP3_BEM,";
            ++parametersCount;
        }
        if(dirtyFlag_[129])
        {
            sql += "APPROVAL_STEP4_BEM,";
            ++parametersCount;
        }
        if(dirtyFlag_[130])
        {
            sql += "APPROVAL_STEP5_BEM,";
            ++parametersCount;
        }
        if(dirtyFlag_[131])
        {
            sql += "APPROVAL_STEP1_ASSES_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[132])
        {
            sql += "APPROVAL_STEP2_ASSES_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[133])
        {
            sql += "APPROVAL_STEP3_ASSES_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[134])
        {
            sql += "APPROVAL_STEP4_ASSES_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[135])
        {
            sql += "APPROVAL_STEP5_ASSES_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[136])
        {
            sql += "APPROVAL_STATUS_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[137])
        {
            sql += "CLIENT_STATUS_CD,";
            ++parametersCount;
        }
        sql += "DISCHARGE_ORDERS_CD,";
        ++parametersCount;
        if(!dirtyFlag_[138])
        {
            needSelection=true;
        }
        sql += "PRINT_SUMMARY_HOLDMAIL_ONLY_CD,";
        ++parametersCount;
        if(!dirtyFlag_[139])
        {
            needSelection=true;
        }
        sql += "EBANKING_CONTRACT_CD,";
        ++parametersCount;
        if(!dirtyFlag_[140])
        {
            needSelection=true;
        }
        if(dirtyFlag_[141])
        {
            sql += "EBANKING_CONTRACT_LANGUAGE_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[142])
        {
            sql += "APSYS_DTECHDIARYL,";
            ++parametersCount;
        }
        if(dirtyFlag_[143])
        {
            sql += "APSYS_MOTDIARYS,";
            ++parametersCount;
        }
        if(dirtyFlag_[144])
        {
            sql += "APSYS_IDTYPCLIIRSS,";
            ++parametersCount;
        }
        if(dirtyFlag_[145])
        {
            sql += "APSYS_IDRCIQIS,";
            ++parametersCount;
        }
        if(dirtyFlag_[146])
        {
            sql += "APSYS_IDRCIFATCAS,";
            ++parametersCount;
        }
        if(dirtyFlag_[147])
        {
            sql += "MAILING_TARIF_TYPE_CD,";
            ++parametersCount;
        }
        sql += "REGISTERED_CD,";
        ++parametersCount;
        if(!dirtyFlag_[148])
        {
            needSelection=true;
        }
        sql += "REGISTERED_MAIL_CD,";
        ++parametersCount;
        if(!dirtyFlag_[149])
        {
            needSelection=true;
        }
        if(dirtyFlag_[150])
        {
            sql += "APSYS_NBPERSCPARTIEL,";
            ++parametersCount;
        }
        if(dirtyFlag_[151])
        {
            sql += "ASSET_VALUE_TIER_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[152])
        {
            sql += "RELATIONSHIP_TYPE_AML_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[153])
        {
            sql += "CB_ASSET_VALUE_TIER_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[154])
        {
            sql += "APPROVAL_SCORE,";
            ++parametersCount;
        }
        if(dirtyFlag_[155])
        {
            sql += "APPROVAL_SCORE_STEPS,";
            ++parametersCount;
        }
        if(dirtyFlag_[156])
        {
            sql += "APSYS_DTDEBPARTL,";
            ++parametersCount;
        }
        if(dirtyFlag_[157])
        {
            sql += "APSYS_DTFINPARTL,";
            ++parametersCount;
        }
        if(dirtyFlag_[158])
        {
            sql += "APSYS_CDMOTIFCLOS,";
            ++parametersCount;
        }
        if(dirtyFlag_[159])
        {
            sql += "APSYS_CDNATURECPARTIEEMIRC,";
            ++parametersCount;
        }
        if(dirtyFlag_[160])
        {
            sql += "APSYS_FLAGOTHEREMIRC,";
            ++parametersCount;
        }
        if(dirtyFlag_[161])
        {
            sql += "APSYS_CDINDUSEMIRS,";
            ++parametersCount;
        }
        if(dirtyFlag_[162])
        {
            sql += "OPENED_IN_APSYS_DATE,";
            ++parametersCount;
        }
        if(dirtyFlag_[163])
        {
            sql += "APSYS_CDNATURECPARTIEFMIAC,";
            ++parametersCount;
        }
        sql += "EBANKING_CLOSED_CD,";
        ++parametersCount;
        if(!dirtyFlag_[164])
        {
            needSelection=true;
        }
        if(dirtyFlag_[165])
        {
            sql += "EBANKING_CLOSINGDATE,";
            ++parametersCount;
        }
        if(dirtyFlag_[166])
        {
            sql += "KYC_REVIEW_PROCESS_START_DATE,";
            ++parametersCount;
        }
        if(dirtyFlag_[167])
        {
            sql += "REMARKS,";
            ++parametersCount;
        }
        if(dirtyFlag_[168])
        {
            sql += "TRANSACTION_BL_COUNTRY_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[169])
        {
            sql += "CLIENTGROUP_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[170])
        {
            sql += "RISKINDEX_CALC,";
            ++parametersCount;
        }
        if(dirtyFlag_[171])
        {
            sql += "LAST_CALC_CRI_MUTDATUM,";
            ++parametersCount;
        }
        if(dirtyFlag_[172])
        {
            sql += "RISIKOKATEGORIE_CALC_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[173])
        {
            sql += "RISKINDEX_GROUP,";
            ++parametersCount;
        }
        if(dirtyFlag_[174])
        {
            sql += "EST_AMOUNT_REM_WITH_MUTDATUM,";
            ++parametersCount;
        }
        if(dirtyFlag_[175])
        {
            sql += "GESAMTVERMOEGEN_MUTDATUM,";
            ++parametersCount;
        }
        if(dirtyFlag_[176])
        {
            sql += "TRANSACT_BL_COUNTRY_MUTDATUM,";
            ++parametersCount;
        }
        if(dirtyFlag_[177])
        {
            sql += "ACCOUNTPURPOSE_MUTDATUM,";
            ++parametersCount;
        }
        sql += "APSYS_FLAGDELDATAPERSI,";
        ++parametersCount;
        if(!dirtyFlag_[178])
        {
            needSelection=true;
        }
        if(dirtyFlag_[179])
        {
            sql += "APSYS_DTWAITDELDATAPERSL,";
            ++parametersCount;
        }
        if(dirtyFlag_[180])
        {
            sql += "NAME_ENC,";
            ++parametersCount;
        }
        sql += "IN_APSYS_TEMP_ENTSPERREN_CD,";
        ++parametersCount;
        if(!dirtyFlag_[181])
        {
            needSelection=true;
        }
        if(dirtyFlag_[182])
        {
            sql += "IN_APSYS_TEMP_ENTSP_USERID,";
            ++parametersCount;
        }
        if(dirtyFlag_[183])
        {
            sql += "IN_APSYS_TEMP_ENTSP_DATUM,";
            ++parametersCount;
        }
        if(dirtyFlag_[184])
        {
            sql += "APSYS_CDREGS,";
            ++parametersCount;
        }
        sql += "RETENTION_ON_HOLD,";
        ++parametersCount;
        if(!dirtyFlag_[185])
        {
            needSelection=true;
        }
        if(dirtyFlag_[186])
        {
            sql += "RETENTION_ON_HOLD_DATE,";
            ++parametersCount;
        }
        if(dirtyFlag_[187])
        {
            sql += "RETENTION_ON_HOLD_REASON,";
            ++parametersCount;
        }
        sql += "LOGICAL_ERASURE,";
        ++parametersCount;
        if(!dirtyFlag_[188])
        {
            needSelection=true;
        }
        if(dirtyFlag_[189])
        {
            sql += "LOGICAL_ERASURE_DATE,";
            ++parametersCount;
        }
        if(dirtyFlag_[190])
        {
            sql += "LOGICAL_ERASURE_REASON,";
            ++parametersCount;
        }
        if(dirtyFlag_[191])
        {
            sql += "COMPLIANCE_MIN_RISK_CATEGORY,";
            ++parametersCount;
        }
        if(dirtyFlag_[192])
        {
            sql += "COMPLIANCE_MIN_RISK_COMMENT,";
            ++parametersCount;
        }
        if(dirtyFlag_[193])
        {
            sql += "CLIENT_STRUCTURE_CD,";
            ++parametersCount;
        }
        if(dirtyFlag_[194])
        {
            sql += "CLIENT_SUBSTRUCTURE_CD,";
            ++parametersCount;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        if(dirtyFlag_[0])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[15])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[16])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[17])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[18])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[19])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[20])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[21])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[22])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[23])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[24])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[25])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[26])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[27])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[28])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[29])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[30])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[31])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[32])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[33])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[34])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[35])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[36])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[37])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[38])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[39])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[40])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[41])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[42])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[43])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[44])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[45])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[46])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[47])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[48])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[49])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[50])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[51])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[52])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[53])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[54])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[55])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[56])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[57])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[58])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[59])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[60])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[61])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[62])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[63])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[64])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[65])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[66])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[67])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[68])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[69])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[70])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[71])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[72])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[73])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[74])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[75])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[76])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[77])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[78])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[79])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[80])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[81])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[82])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[83])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[84])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[85])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[86])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[87])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[88])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[89])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[90])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[91])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[92])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[93])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[94])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[95])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[96])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[97])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[98])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[99])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[100])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[101])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[102])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[103])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[104])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[105])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[106])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[107])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[108])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[109])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[110])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[111])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[112])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[113])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[114])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[115])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[116])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[117])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[118])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[119])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[120])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[121])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[122])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[123])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[124])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[125])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[126])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[127])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[128])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[129])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[130])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[131])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[132])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[133])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[134])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[135])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[136])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[137])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[138])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[139])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[140])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[141])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[142])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[143])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[144])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[145])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[146])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[147])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[148])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[149])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[150])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[151])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[152])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[153])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[154])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[155])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[156])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[157])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[158])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[159])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[160])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[161])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[162])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[163])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[164])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[165])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[166])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[167])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[168])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[169])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[170])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[171])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[172])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[173])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[174])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[175])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[176])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[177])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[178])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[179])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[180])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[181])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[182])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[183])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[184])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[185])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[186])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[187])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[188])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[189])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[190])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[191])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[192])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[193])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[194])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace cim_web
} // namespace drogon_model
